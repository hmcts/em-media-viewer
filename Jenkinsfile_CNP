#!groovy

properties([
  [
    $class       : 'GithubProjectProperty',
    displayName  : 'MediaViewer',
    projectUrlStr: 'https://github.com/hmcts/em-media-viewer/'
  ],
  pipelineTriggers([
    [$class: 'GitHubPushTrigger']
  ])
])


@Library("Infrastructure")

def type = "nodejs"
def product = "em"
def component = "media-viewer"
def channel   = '#em-dev-chat'

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

env.DOCASSEMBLY_URL = "http://dg-docassembly-aat.service.core-compute-aat.internal"
env.DM_STORE_APP_URL = "http://dm-store-aat.service.core-compute-aat.internal"
env.HRS_API_URL = "http://em-hrs-api-aat.service.core-compute-aat.internal"
env.ANNOTATION_API_URL = "http://em-anno-aat.service.core-compute-aat.internal"
env.ICP_API_URL = "http://em-icp-aat.service.core-compute-aat.internal"
env.NPA_URL = "http://em-npa-aat.service.core-compute-aat.internal"
env.IDAM_URL = "http://idam-api.aat.platform.hmcts.net"
env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.REDIRECT_URL = "https://em-show-aat.service.core-compute-aat.internal/oauth2/callback"
env.NODE_ENV="TEST"

def vaultOverrides = [
        'preview' : 'aat',
]

def secrets = [
        's2s-${env}': [
                secret('microservicekey-em-gw', 'S2S_KEY')
        ],
        'rpa-${env}': [
                secret('show-oauth2-token', 'IDAM_SECRET')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline(type, product, component) {
  enableSlackNotifications(channel)
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  enableSecurityScan()
  //env.TEST_URL may need to be set to: http://em-showcase-aat.service.core-compute-aat.internal/media-viewer
//  env.TEST_URL = 'https://em-media-viewer-staging.service.core-compute-aat.internal/'
  env.TEST_URL = 'http://em-showcase-aat.service.core-compute-aat.internal/media-viewer'
  enableAksStagingDeployment()
  disableLegacyDeployment()

  after('checkout') {
      sh ("rm -rf node_modules")
      sh ("yarn cache clean")
      sh ('npm rebuild node-sass')
      sh ('yarn install --force')
      sh ('yarn setup')
  }

  after('build') {
    yarnBuilder.yarn('build')
  }

  after('functionalTest:preview') {
      publishHTML([
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : "functional-output/reports/html",
              reportFiles          : 'index.html',
              reportName           : 'PREVIEW Functional Test'
      ])
  }

  after('functionalTest:aat') {
      publishHTML([
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : "functional-output/reports/html",
              reportFiles          : 'index.html',
              reportName           : 'AAT Functional Test'
      ])
  }
}
