#!groovy

properties([
  [
  $class       : 'GithubProjectProperty',
  displayName  : 'MediaViewer',
  projectUrlStr: 'https://github.com/hmcts/em-media-viewer/'
  ],
  pipelineTriggers([
    cron('H 05 * * *')
  ]),
  parameters([
    string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
    string(name: 'ExUI_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net', description: 'The ExUI Url you want to run Media Viewer end to end tests'),
    string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The Url of IDAM'),
    string(name: 'S2S_PROVIDER_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', description: 'The Url of S2S provider'),
    string(name: 'CCD_DATA_STORE_URL', defaultValue: 'http://ccd-data-store-api-aat.service.core-compute-aat.internal', description: 'The Url of ccd data store'),
    string(name: 'SecurityRules',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "em"
def component = "media-viewer"
def channel   = '#em-dev-chat'

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def vaultOverrides = [
  'aat' : params.ENVIRONMENT,
]

def secrets = [
  "s2s-${params.ENVIRONMENT}": [
    secret('microservicekey-em-gw', 'S2S_KEY')
  ],
  "rpa-${params.ENVIRONMENT}": [
    secret('show-oauth2-token', 'IDAM_SECRET')
  ],
  "em-showcase-${params.ENVIRONMENT}": [
    secret('ccd-user-email', 'CCD_CASEWORKER_E2E_EMAIL'),
    secret('ccd-user-password', 'CCD_CASEWORKER_E2E_PASSWORD'),
    secret('microservicekey-ccd-gw', 'MICROSERVICE_CCD_GW'),
    secret('idam-client-secret', 'IDAM_CLIENT_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withNightlyPipeline(type, product, component) {
  env.TEST_URL = params.ExUI_URL
  env.IDAM_URL = params.IDAM_API_URL
  env.S2S_PROVIDER = params.S2S_PROVIDER_URL
  env.CCD_DATA_STORE_API_URL = params.CCD_DATA_STORE_URL
  env.RUNNING_ENV = params.ENVIRONMENT
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)

  disableLegacyDeployment()
  enableSecurityScan()
  enableSlackNotifications(channel)
  enableFullFunctionalTest(60)
  enableCrossBrowserTest()

  afterSuccess('checkout') {
    sh ("rm -rf node_modules")
    sh ("yarn cache clean")
    sh ('npm rebuild node-sass')
    sh ('yarn install --force')
    sh ('yarn setup')
  }

  afterSuccess('build') {
    yarnBuilder.yarn('build')
  }

  afterAlways('functionalTest') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output/reports/html",
      reportFiles          : 'index.html',
      reportName           : 'Functional Tests'
    ])
  }

  afterAlways('crossBrowserTest') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "reports/tests/crossbrowser/",
      reportFiles          : 'index.html',
      reportName           : 'Cross Browser Tests'
    ])
  }

  afterAlways('securityScan') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "reports/tests/",
      reportFiles          : 'activescan.html',
      reportName           : 'ZAP Security Scan Report'
    ])
  }
}
