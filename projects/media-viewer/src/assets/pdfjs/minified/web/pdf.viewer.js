(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === "object" && typeof module === "object") module.exports = factory(); else if (typeof define === "function" && define.amd) define("pdfjs-dist/build/pdf", [], factory); else if (typeof exports === "object") exports["pdfjs-dist/build/pdf"] = factory(); else root["pdfjs-dist/build/pdf"] = root.pdfjsLib = factory();
})(this, function() {
    return function(modules) {
        var installedModules = {};
        function __w_pdfjs_require__(moduleId) {
            if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
            }
            var module = installedModules[moduleId] = {
                i: moduleId,
                l: false,
                exports: {}
            };
            modules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);
            module.l = true;
            return module.exports;
        }
        __w_pdfjs_require__.m = modules;
        __w_pdfjs_require__.c = installedModules;
        __w_pdfjs_require__.d = function(exports, name, getter) {
            if (!__w_pdfjs_require__.o(exports, name)) {
                Object.defineProperty(exports, name, {
                    enumerable: true,
                    get: getter
                });
            }
        };
        __w_pdfjs_require__.r = function(exports) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                Object.defineProperty(exports, Symbol.toStringTag, {
                    value: "Module"
                });
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
        };
        __w_pdfjs_require__.t = function(value, mode) {
            if (mode & 1) value = __w_pdfjs_require__(value);
            if (mode & 8) return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule) return value;
            var ns = Object.create(null);
            __w_pdfjs_require__.r(ns);
            Object.defineProperty(ns, "default", {
                enumerable: true,
                value: value
            });
            if (mode & 2 && typeof value != "string") for (var key in value) __w_pdfjs_require__.d(ns, key, function(key) {
                return value[key];
            }.bind(null, key));
            return ns;
        };
        __w_pdfjs_require__.n = function(module) {
            var getter = module && module.__esModule ? function getDefault() {
                return module["default"];
            } : function getModuleExports() {
                return module;
            };
            __w_pdfjs_require__.d(getter, "a", getter);
            return getter;
        };
        __w_pdfjs_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        __w_pdfjs_require__.p = "";
        return __w_pdfjs_require__(__w_pdfjs_require__.s = 0);
    }([ function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var pdfjsVersion = "2.2.154";
        var pdfjsBuild = "762c58e0";
        var pdfjsSharedUtil = __w_pdfjs_require__(1);
        var pdfjsDisplayAPI = __w_pdfjs_require__(147);
        var pdfjsDisplayTextLayer = __w_pdfjs_require__(162);
        var pdfjsDisplayAnnotationLayer = __w_pdfjs_require__(163);
        var pdfjsDisplayDisplayUtils = __w_pdfjs_require__(151);
        var pdfjsDisplaySVG = __w_pdfjs_require__(164);
        var pdfjsDisplayWorkerOptions = __w_pdfjs_require__(156);
        var pdfjsDisplayAPICompatibility = __w_pdfjs_require__(153);
        {
            var isNodeJS = __w_pdfjs_require__(4);
            if (isNodeJS()) {
                var PDFNodeStream = __w_pdfjs_require__(165).PDFNodeStream;
                pdfjsDisplayAPI.setPDFNetworkStreamFactory(function(params) {
                    return new PDFNodeStream(params);
                });
            } else {
                var PDFNetworkStream = __w_pdfjs_require__(168).PDFNetworkStream;
                var PDFFetchStream;
                if (pdfjsDisplayDisplayUtils.isFetchSupported()) {
                    PDFFetchStream = __w_pdfjs_require__(169).PDFFetchStream;
                }
                pdfjsDisplayAPI.setPDFNetworkStreamFactory(function(params) {
                    if (PDFFetchStream && pdfjsDisplayDisplayUtils.isValidFetchUrl(params.url)) {
                        return new PDFFetchStream(params);
                    }
                    return new PDFNetworkStream(params);
                });
            }
        }
        exports.build = pdfjsDisplayAPI.build;
        exports.version = pdfjsDisplayAPI.version;
        exports.getDocument = pdfjsDisplayAPI.getDocument;
        exports.LoopbackPort = pdfjsDisplayAPI.LoopbackPort;
        exports.PDFDataRangeTransport = pdfjsDisplayAPI.PDFDataRangeTransport;
        exports.PDFWorker = pdfjsDisplayAPI.PDFWorker;
        exports.renderTextLayer = pdfjsDisplayTextLayer.renderTextLayer;
        exports.AnnotationLayer = pdfjsDisplayAnnotationLayer.AnnotationLayer;
        exports.createPromiseCapability = pdfjsSharedUtil.createPromiseCapability;
        exports.PasswordResponses = pdfjsSharedUtil.PasswordResponses;
        exports.InvalidPDFException = pdfjsSharedUtil.InvalidPDFException;
        exports.MissingPDFException = pdfjsSharedUtil.MissingPDFException;
        exports.SVGGraphics = pdfjsDisplaySVG.SVGGraphics;
        exports.NativeImageDecoding = pdfjsSharedUtil.NativeImageDecoding;
        exports.CMapCompressionType = pdfjsSharedUtil.CMapCompressionType;
        exports.PermissionFlag = pdfjsSharedUtil.PermissionFlag;
        exports.UnexpectedResponseException = pdfjsSharedUtil.UnexpectedResponseException;
        exports.OPS = pdfjsSharedUtil.OPS;
        exports.VerbosityLevel = pdfjsSharedUtil.VerbosityLevel;
        exports.UNSUPPORTED_FEATURES = pdfjsSharedUtil.UNSUPPORTED_FEATURES;
        exports.createValidAbsoluteUrl = pdfjsSharedUtil.createValidAbsoluteUrl;
        exports.createObjectURL = pdfjsSharedUtil.createObjectURL;
        exports.removeNullCharacters = pdfjsSharedUtil.removeNullCharacters;
        exports.shadow = pdfjsSharedUtil.shadow;
        exports.Util = pdfjsSharedUtil.Util;
        exports.ReadableStream = pdfjsSharedUtil.ReadableStream;
        exports.URL = pdfjsSharedUtil.URL;
        exports.RenderingCancelledException = pdfjsDisplayDisplayUtils.RenderingCancelledException;
        exports.getFilenameFromUrl = pdfjsDisplayDisplayUtils.getFilenameFromUrl;
        exports.LinkTarget = pdfjsDisplayDisplayUtils.LinkTarget;
        exports.addLinkAttributes = pdfjsDisplayDisplayUtils.addLinkAttributes;
        exports.loadScript = pdfjsDisplayDisplayUtils.loadScript;
        exports.GlobalWorkerOptions = pdfjsDisplayWorkerOptions.GlobalWorkerOptions;
        exports.apiCompatibilityParams = pdfjsDisplayAPICompatibility.apiCompatibilityParams;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.arrayByteLength = arrayByteLength;
        exports.arraysToBytes = arraysToBytes;
        exports.assert = assert;
        exports.bytesToString = bytesToString;
        exports.createPromiseCapability = createPromiseCapability;
        exports.getVerbosityLevel = getVerbosityLevel;
        exports.info = info;
        exports.isArrayBuffer = isArrayBuffer;
        exports.isArrayEqual = isArrayEqual;
        exports.isBool = isBool;
        exports.isEmptyObj = isEmptyObj;
        exports.isNum = isNum;
        exports.isString = isString;
        exports.isSpace = isSpace;
        exports.isSameOrigin = isSameOrigin;
        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
        exports.isLittleEndian = isLittleEndian;
        exports.isEvalSupported = isEvalSupported;
        exports.log2 = log2;
        exports.readInt8 = readInt8;
        exports.readUint16 = readUint16;
        exports.readUint32 = readUint32;
        exports.removeNullCharacters = removeNullCharacters;
        exports.setVerbosityLevel = setVerbosityLevel;
        exports.shadow = shadow;
        exports.string32 = string32;
        exports.stringToBytes = stringToBytes;
        exports.stringToPDFString = stringToPDFString;
        exports.stringToUTF8String = stringToUTF8String;
        exports.utf8StringToString = utf8StringToString;
        exports.warn = warn;
        exports.unreachable = unreachable;
        Object.defineProperty(exports, "ReadableStream", {
            enumerable: true,
            get: function get() {
                return _streams_polyfill.ReadableStream;
            }
        });
        Object.defineProperty(exports, "URL", {
            enumerable: true,
            get: function get() {
                return _url_polyfill.URL;
            }
        });
        exports.createObjectURL = exports.FormatError = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.NativeImageDecoding = exports.MissingPDFException = exports.InvalidPDFException = exports.AbortException = exports.CMapCompressionType = exports.ImageKind = exports.FontType = exports.AnnotationType = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.UNSUPPORTED_FEATURES = exports.VerbosityLevel = exports.OPS = exports.IDENTITY_MATRIX = exports.FONT_IDENTITY_MATRIX = void 0;
        __w_pdfjs_require__(2);
        var _streams_polyfill = __w_pdfjs_require__(143);
        var _url_polyfill = __w_pdfjs_require__(145);
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        var IDENTITY_MATRIX = [ 1, 0, 0, 1, 0, 0 ];
        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
        var FONT_IDENTITY_MATRIX = [ .001, 0, 0, .001, 0, 0 ];
        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
        var NativeImageDecoding = {
            NONE: "none",
            DECODE: "decode",
            DISPLAY: "display"
        };
        exports.NativeImageDecoding = NativeImageDecoding;
        var PermissionFlag = {
            PRINT: 4,
            MODIFY_CONTENTS: 8,
            COPY: 16,
            MODIFY_ANNOTATIONS: 32,
            FILL_INTERACTIVE_FORMS: 256,
            COPY_FOR_ACCESSIBILITY: 512,
            ASSEMBLE: 1024,
            PRINT_HIGH_QUALITY: 2048
        };
        exports.PermissionFlag = PermissionFlag;
        var TextRenderingMode = {
            FILL: 0,
            STROKE: 1,
            FILL_STROKE: 2,
            INVISIBLE: 3,
            FILL_ADD_TO_PATH: 4,
            STROKE_ADD_TO_PATH: 5,
            FILL_STROKE_ADD_TO_PATH: 6,
            ADD_TO_PATH: 7,
            FILL_STROKE_MASK: 3,
            ADD_TO_PATH_FLAG: 4
        };
        exports.TextRenderingMode = TextRenderingMode;
        var ImageKind = {
            GRAYSCALE_1BPP: 1,
            RGB_24BPP: 2,
            RGBA_32BPP: 3
        };
        exports.ImageKind = ImageKind;
        var AnnotationType = {
            TEXT: 1,
            LINK: 2,
            FREETEXT: 3,
            LINE: 4,
            SQUARE: 5,
            CIRCLE: 6,
            POLYGON: 7,
            POLYLINE: 8,
            HIGHLIGHT: 9,
            UNDERLINE: 10,
            SQUIGGLY: 11,
            STRIKEOUT: 12,
            STAMP: 13,
            CARET: 14,
            INK: 15,
            POPUP: 16,
            FILEATTACHMENT: 17,
            SOUND: 18,
            MOVIE: 19,
            WIDGET: 20,
            SCREEN: 21,
            PRINTERMARK: 22,
            TRAPNET: 23,
            WATERMARK: 24,
            THREED: 25,
            REDACT: 26
        };
        exports.AnnotationType = AnnotationType;
        var AnnotationFlag = {
            INVISIBLE: 1,
            HIDDEN: 2,
            PRINT: 4,
            NOZOOM: 8,
            NOROTATE: 16,
            NOVIEW: 32,
            READONLY: 64,
            LOCKED: 128,
            TOGGLENOVIEW: 256,
            LOCKEDCONTENTS: 512
        };
        exports.AnnotationFlag = AnnotationFlag;
        var AnnotationFieldFlag = {
            READONLY: 1,
            REQUIRED: 2,
            NOEXPORT: 4,
            MULTILINE: 4096,
            PASSWORD: 8192,
            NOTOGGLETOOFF: 16384,
            RADIO: 32768,
            PUSHBUTTON: 65536,
            COMBO: 131072,
            EDIT: 262144,
            SORT: 524288,
            FILESELECT: 1048576,
            MULTISELECT: 2097152,
            DONOTSPELLCHECK: 4194304,
            DONOTSCROLL: 8388608,
            COMB: 16777216,
            RICHTEXT: 33554432,
            RADIOSINUNISON: 33554432,
            COMMITONSELCHANGE: 67108864
        };
        exports.AnnotationFieldFlag = AnnotationFieldFlag;
        var AnnotationBorderStyleType = {
            SOLID: 1,
            DASHED: 2,
            BEVELED: 3,
            INSET: 4,
            UNDERLINE: 5
        };
        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
        var StreamType = {
            UNKNOWN: 0,
            FLATE: 1,
            LZW: 2,
            DCT: 3,
            JPX: 4,
            JBIG: 5,
            A85: 6,
            AHX: 7,
            CCF: 8,
            RL: 9
        };
        exports.StreamType = StreamType;
        var FontType = {
            UNKNOWN: 0,
            TYPE1: 1,
            TYPE1C: 2,
            CIDFONTTYPE0: 3,
            CIDFONTTYPE0C: 4,
            TRUETYPE: 5,
            CIDFONTTYPE2: 6,
            TYPE3: 7,
            OPENTYPE: 8,
            TYPE0: 9,
            MMTYPE1: 10
        };
        exports.FontType = FontType;
        var VerbosityLevel = {
            ERRORS: 0,
            WARNINGS: 1,
            INFOS: 5
        };
        exports.VerbosityLevel = VerbosityLevel;
        var CMapCompressionType = {
            NONE: 0,
            BINARY: 1,
            STREAM: 2
        };
        exports.CMapCompressionType = CMapCompressionType;
        var OPS = {
            dependency: 1,
            setLineWidth: 2,
            setLineCap: 3,
            setLineJoin: 4,
            setMiterLimit: 5,
            setDash: 6,
            setRenderingIntent: 7,
            setFlatness: 8,
            setGState: 9,
            save: 10,
            restore: 11,
            transform: 12,
            moveTo: 13,
            lineTo: 14,
            curveTo: 15,
            curveTo2: 16,
            curveTo3: 17,
            closePath: 18,
            rectangle: 19,
            stroke: 20,
            closeStroke: 21,
            fill: 22,
            eoFill: 23,
            fillStroke: 24,
            eoFillStroke: 25,
            closeFillStroke: 26,
            closeEOFillStroke: 27,
            endPath: 28,
            clip: 29,
            eoClip: 30,
            beginText: 31,
            endText: 32,
            setCharSpacing: 33,
            setWordSpacing: 34,
            setHScale: 35,
            setLeading: 36,
            setFont: 37,
            setTextRenderingMode: 38,
            setTextRise: 39,
            moveText: 40,
            setLeadingMoveText: 41,
            setTextMatrix: 42,
            nextLine: 43,
            showText: 44,
            showSpacedText: 45,
            nextLineShowText: 46,
            nextLineSetSpacingShowText: 47,
            setCharWidth: 48,
            setCharWidthAndBounds: 49,
            setStrokeColorSpace: 50,
            setFillColorSpace: 51,
            setStrokeColor: 52,
            setStrokeColorN: 53,
            setFillColor: 54,
            setFillColorN: 55,
            setStrokeGray: 56,
            setFillGray: 57,
            setStrokeRGBColor: 58,
            setFillRGBColor: 59,
            setStrokeCMYKColor: 60,
            setFillCMYKColor: 61,
            shadingFill: 62,
            beginInlineImage: 63,
            beginImageData: 64,
            endInlineImage: 65,
            paintXObject: 66,
            markPoint: 67,
            markPointProps: 68,
            beginMarkedContent: 69,
            beginMarkedContentProps: 70,
            endMarkedContent: 71,
            beginCompat: 72,
            endCompat: 73,
            paintFormXObjectBegin: 74,
            paintFormXObjectEnd: 75,
            beginGroup: 76,
            endGroup: 77,
            beginAnnotations: 78,
            endAnnotations: 79,
            beginAnnotation: 80,
            endAnnotation: 81,
            paintJpegXObject: 82,
            paintImageMaskXObject: 83,
            paintImageMaskXObjectGroup: 84,
            paintImageXObject: 85,
            paintInlineImageXObject: 86,
            paintInlineImageXObjectGroup: 87,
            paintImageXObjectRepeat: 88,
            paintImageMaskXObjectRepeat: 89,
            paintSolidColorImageMask: 90,
            constructPath: 91
        };
        exports.OPS = OPS;
        var UNSUPPORTED_FEATURES = {
            unknown: "unknown",
            forms: "forms",
            javaScript: "javaScript",
            smask: "smask",
            shadingPattern: "shadingPattern",
            font: "font"
        };
        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
        var PasswordResponses = {
            NEED_PASSWORD: 1,
            INCORRECT_PASSWORD: 2
        };
        exports.PasswordResponses = PasswordResponses;
        var verbosity = VerbosityLevel.WARNINGS;
        function setVerbosityLevel(level) {
            if (Number.isInteger(level)) {
                verbosity = level;
            }
        }
        function getVerbosityLevel() {
            return verbosity;
        }
        function info(msg) {
            if (verbosity >= VerbosityLevel.INFOS) {
                console.log("Info: " + msg);
            }
        }
        function warn(msg) {
            if (verbosity >= VerbosityLevel.WARNINGS) {
                console.log("Warning: " + msg);
            }
        }
        function unreachable(msg) {
            throw new Error(msg);
        }
        function assert(cond, msg) {
            if (!cond) {
                unreachable(msg);
            }
        }
        function isSameOrigin(baseUrl, otherUrl) {
            try {
                var base = new _url_polyfill.URL(baseUrl);
                if (!base.origin || base.origin === "null") {
                    return false;
                }
            } catch (e) {
                return false;
            }
            var other = new _url_polyfill.URL(otherUrl, base);
            return base.origin === other.origin;
        }
        function _isValidProtocol(url) {
            if (!url) {
                return false;
            }
            switch (url.protocol) {
              case "http:":
              case "https:":
              case "ftp:":
              case "mailto:":
              case "tel:":
                return true;

              default:
                return false;
            }
        }
        function createValidAbsoluteUrl(url, baseUrl) {
            if (!url) {
                return null;
            }
            try {
                var absoluteUrl = baseUrl ? new _url_polyfill.URL(url, baseUrl) : new _url_polyfill.URL(url);
                if (_isValidProtocol(absoluteUrl)) {
                    return absoluteUrl;
                }
            } catch (ex) {}
            return null;
        }
        function shadow(obj, prop, value) {
            Object.defineProperty(obj, prop, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: false
            });
            return value;
        }
        var PasswordException = function PasswordExceptionClosure() {
            function PasswordException(msg, code) {
                this.name = "PasswordException";
                this.message = msg;
                this.code = code;
            }
            PasswordException.prototype = new Error();
            PasswordException.constructor = PasswordException;
            return PasswordException;
        }();
        exports.PasswordException = PasswordException;
        var UnknownErrorException = function UnknownErrorExceptionClosure() {
            function UnknownErrorException(msg, details) {
                this.name = "UnknownErrorException";
                this.message = msg;
                this.details = details;
            }
            UnknownErrorException.prototype = new Error();
            UnknownErrorException.constructor = UnknownErrorException;
            return UnknownErrorException;
        }();
        exports.UnknownErrorException = UnknownErrorException;
        var InvalidPDFException = function InvalidPDFExceptionClosure() {
            function InvalidPDFException(msg) {
                this.name = "InvalidPDFException";
                this.message = msg;
            }
            InvalidPDFException.prototype = new Error();
            InvalidPDFException.constructor = InvalidPDFException;
            return InvalidPDFException;
        }();
        exports.InvalidPDFException = InvalidPDFException;
        var MissingPDFException = function MissingPDFExceptionClosure() {
            function MissingPDFException(msg) {
                this.name = "MissingPDFException";
                this.message = msg;
            }
            MissingPDFException.prototype = new Error();
            MissingPDFException.constructor = MissingPDFException;
            return MissingPDFException;
        }();
        exports.MissingPDFException = MissingPDFException;
        var UnexpectedResponseException = function UnexpectedResponseExceptionClosure() {
            function UnexpectedResponseException(msg, status) {
                this.name = "UnexpectedResponseException";
                this.message = msg;
                this.status = status;
            }
            UnexpectedResponseException.prototype = new Error();
            UnexpectedResponseException.constructor = UnexpectedResponseException;
            return UnexpectedResponseException;
        }();
        exports.UnexpectedResponseException = UnexpectedResponseException;
        var FormatError = function FormatErrorClosure() {
            function FormatError(msg) {
                this.message = msg;
            }
            FormatError.prototype = new Error();
            FormatError.prototype.name = "FormatError";
            FormatError.constructor = FormatError;
            return FormatError;
        }();
        exports.FormatError = FormatError;
        var AbortException = function AbortExceptionClosure() {
            function AbortException(msg) {
                this.name = "AbortException";
                this.message = msg;
            }
            AbortException.prototype = new Error();
            AbortException.constructor = AbortException;
            return AbortException;
        }();
        exports.AbortException = AbortException;
        var NullCharactersRegExp = /\x00/g;
        function removeNullCharacters(str) {
            if (typeof str !== "string") {
                warn("The argument for removeNullCharacters must be a string.");
                return str;
            }
            return str.replace(NullCharactersRegExp, "");
        }
        function bytesToString(bytes) {
            assert(bytes !== null && _typeof(bytes) === "object" && bytes.length !== undefined, "Invalid argument for bytesToString");
            var length = bytes.length;
            var MAX_ARGUMENT_COUNT = 8192;
            if (length < MAX_ARGUMENT_COUNT) {
                return String.fromCharCode.apply(null, bytes);
            }
            var strBuf = [];
            for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
                var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
                var chunk = bytes.subarray(i, chunkEnd);
                strBuf.push(String.fromCharCode.apply(null, chunk));
            }
            return strBuf.join("");
        }
        function stringToBytes(str) {
            assert(typeof str === "string", "Invalid argument for stringToBytes");
            var length = str.length;
            var bytes = new Uint8Array(length);
            for (var i = 0; i < length; ++i) {
                bytes[i] = str.charCodeAt(i) & 255;
            }
            return bytes;
        }
        function arrayByteLength(arr) {
            if (arr.length !== undefined) {
                return arr.length;
            }
            assert(arr.byteLength !== undefined);
            return arr.byteLength;
        }
        function arraysToBytes(arr) {
            if (arr.length === 1 && arr[0] instanceof Uint8Array) {
                return arr[0];
            }
            var resultLength = 0;
            var i, ii = arr.length;
            var item, itemLength;
            for (i = 0; i < ii; i++) {
                item = arr[i];
                itemLength = arrayByteLength(item);
                resultLength += itemLength;
            }
            var pos = 0;
            var data = new Uint8Array(resultLength);
            for (i = 0; i < ii; i++) {
                item = arr[i];
                if (!(item instanceof Uint8Array)) {
                    if (typeof item === "string") {
                        item = stringToBytes(item);
                    } else {
                        item = new Uint8Array(item);
                    }
                }
                itemLength = item.byteLength;
                data.set(item, pos);
                pos += itemLength;
            }
            return data;
        }
        function string32(value) {
            return String.fromCharCode(value >> 24 & 255, value >> 16 & 255, value >> 8 & 255, value & 255);
        }
        function log2(x) {
            if (x <= 0) {
                return 0;
            }
            return Math.ceil(Math.log2(x));
        }
        function readInt8(data, start) {
            return data[start] << 24 >> 24;
        }
        function readUint16(data, offset) {
            return data[offset] << 8 | data[offset + 1];
        }
        function readUint32(data, offset) {
            return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
        }
        function isLittleEndian() {
            var buffer8 = new Uint8Array(4);
            buffer8[0] = 1;
            var view32 = new Uint32Array(buffer8.buffer, 0, 1);
            return view32[0] === 1;
        }
        function isEvalSupported() {
            try {
                new Function("");
                return true;
            } catch (e) {
                return false;
            }
        }
        var Util = function UtilClosure() {
            function Util() {}
            var rgbBuf = [ "rgb(", 0, ",", 0, ",", 0, ")" ];
            Util.makeCssRgb = function Util_makeCssRgb(r, g, b) {
                rgbBuf[1] = r;
                rgbBuf[3] = g;
                rgbBuf[5] = b;
                return rgbBuf.join("");
            };
            Util.transform = function Util_transform(m1, m2) {
                return [ m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5] ];
            };
            Util.applyTransform = function Util_applyTransform(p, m) {
                var xt = p[0] * m[0] + p[1] * m[2] + m[4];
                var yt = p[0] * m[1] + p[1] * m[3] + m[5];
                return [ xt, yt ];
            };
            Util.applyInverseTransform = function Util_applyInverseTransform(p, m) {
                var d = m[0] * m[3] - m[1] * m[2];
                var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
                var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
                return [ xt, yt ];
            };
            Util.getAxialAlignedBoundingBox = function Util_getAxialAlignedBoundingBox(r, m) {
                var p1 = Util.applyTransform(r, m);
                var p2 = Util.applyTransform(r.slice(2, 4), m);
                var p3 = Util.applyTransform([ r[0], r[3] ], m);
                var p4 = Util.applyTransform([ r[2], r[1] ], m);
                return [ Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]) ];
            };
            Util.inverseTransform = function Util_inverseTransform(m) {
                var d = m[0] * m[3] - m[1] * m[2];
                return [ m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d ];
            };
            Util.apply3dTransform = function Util_apply3dTransform(m, v) {
                return [ m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2] ];
            };
            Util.singularValueDecompose2dScale = function Util_singularValueDecompose2dScale(m) {
                var transpose = [ m[0], m[2], m[1], m[3] ];
                var a = m[0] * transpose[0] + m[1] * transpose[2];
                var b = m[0] * transpose[1] + m[1] * transpose[3];
                var c = m[2] * transpose[0] + m[3] * transpose[2];
                var d = m[2] * transpose[1] + m[3] * transpose[3];
                var first = (a + d) / 2;
                var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;
                var sx = first + second || 1;
                var sy = first - second || 1;
                return [ Math.sqrt(sx), Math.sqrt(sy) ];
            };
            Util.normalizeRect = function Util_normalizeRect(rect) {
                var r = rect.slice(0);
                if (rect[0] > rect[2]) {
                    r[0] = rect[2];
                    r[2] = rect[0];
                }
                if (rect[1] > rect[3]) {
                    r[1] = rect[3];
                    r[3] = rect[1];
                }
                return r;
            };
            Util.intersect = function Util_intersect(rect1, rect2) {
                function compare(a, b) {
                    return a - b;
                }
                var orderedX = [ rect1[0], rect1[2], rect2[0], rect2[2] ].sort(compare), orderedY = [ rect1[1], rect1[3], rect2[1], rect2[3] ].sort(compare), result = [];
                rect1 = Util.normalizeRect(rect1);
                rect2 = Util.normalizeRect(rect2);
                if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
                    result[0] = orderedX[1];
                    result[2] = orderedX[2];
                } else {
                    return false;
                }
                if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
                    result[1] = orderedY[1];
                    result[3] = orderedY[2];
                } else {
                    return false;
                }
                return result;
            };
            return Util;
        }();
        exports.Util = Util;
        var PDFStringTranslateTable = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364 ];
        function stringToPDFString(str) {
            var i, n = str.length, strBuf = [];
            if (str[0] === "þ" && str[1] === "ÿ") {
                for (i = 2; i < n; i += 2) {
                    strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
                }
            } else {
                for (i = 0; i < n; ++i) {
                    var code = PDFStringTranslateTable[str.charCodeAt(i)];
                    strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
                }
            }
            return strBuf.join("");
        }
        function stringToUTF8String(str) {
            return decodeURIComponent(escape(str));
        }
        function utf8StringToString(str) {
            return unescape(encodeURIComponent(str));
        }
        function isEmptyObj(obj) {
            for (var key in obj) {
                return false;
            }
            return true;
        }
        function isBool(v) {
            return typeof v === "boolean";
        }
        function isNum(v) {
            return typeof v === "number";
        }
        function isString(v) {
            return typeof v === "string";
        }
        function isArrayBuffer(v) {
            return _typeof(v) === "object" && v !== null && v.byteLength !== undefined;
        }
        function isArrayEqual(arr1, arr2) {
            if (arr1.length !== arr2.length) {
                return false;
            }
            return arr1.every(function(element, index) {
                return element === arr2[index];
            });
        }
        function isSpace(ch) {
            return ch === 32 || ch === 9 || ch === 13 || ch === 10;
        }
        function createPromiseCapability() {
            var capability = Object.create(null);
            var isSettled = false;
            Object.defineProperty(capability, "settled", {
                get: function get() {
                    return isSettled;
                }
            });
            capability.promise = new Promise(function(resolve, reject) {
                capability.resolve = function(data) {
                    isSettled = true;
                    resolve(data);
                };
                capability.reject = function(reason) {
                    isSettled = true;
                    reject(reason);
                };
            });
            return capability;
        }
        var createObjectURL = function createObjectURLClosure() {
            var digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            return function createObjectURL(data, contentType) {
                var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                if (!forceDataSchema && _url_polyfill.URL.createObjectURL) {
                    var blob = new Blob([ data ], {
                        type: contentType
                    });
                    return _url_polyfill.URL.createObjectURL(blob);
                }
                var buffer = "data:" + contentType + ";base64,";
                for (var i = 0, ii = data.length; i < ii; i += 3) {
                    var b1 = data[i] & 255;
                    var b2 = data[i + 1] & 255;
                    var b3 = data[i + 2] & 255;
                    var d1 = b1 >> 2, d2 = (b1 & 3) << 4 | b2 >> 4;
                    var d3 = i + 1 < ii ? (b2 & 15) << 2 | b3 >> 6 : 64;
                    var d4 = i + 2 < ii ? b3 & 63 : 64;
                    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
                }
                return buffer;
            };
        }();
        exports.createObjectURL = createObjectURL;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        var globalScope = __w_pdfjs_require__(3);
        if (!globalScope._pdfjsCompatibilityChecked) {
            globalScope._pdfjsCompatibilityChecked = true;
            var isNodeJS = __w_pdfjs_require__(4);
            var hasDOM = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof(document)) === "object";
            (function checkNodeBtoa() {
                if (globalScope.btoa || !isNodeJS()) {
                    return;
                }
                globalScope.btoa = function(chars) {
                    return Buffer.from(chars, "binary").toString("base64");
                };
            })();
            (function checkNodeAtob() {
                if (globalScope.atob || !isNodeJS()) {
                    return;
                }
                globalScope.atob = function(input) {
                    return Buffer.from(input, "base64").toString("binary");
                };
            })();
            (function checkChildNodeRemove() {
                if (!hasDOM) {
                    return;
                }
                if (typeof Element.prototype.remove !== "undefined") {
                    return;
                }
                Element.prototype.remove = function() {
                    if (this.parentNode) {
                        this.parentNode.removeChild(this);
                    }
                };
            })();
            (function checkDOMTokenListAddRemove() {
                if (!hasDOM || isNodeJS()) {
                    return;
                }
                var div = document.createElement("div");
                div.classList.add("testOne", "testTwo");
                if (div.classList.contains("testOne") === true && div.classList.contains("testTwo") === true) {
                    return;
                }
                var OriginalDOMTokenListAdd = DOMTokenList.prototype.add;
                var OriginalDOMTokenListRemove = DOMTokenList.prototype.remove;
                DOMTokenList.prototype.add = function() {
                    for (var _len = arguments.length, tokens = new Array(_len), _key = 0; _key < _len; _key++) {
                        tokens[_key] = arguments[_key];
                    }
                    for (var _i = 0, _tokens = tokens; _i < _tokens.length; _i++) {
                        var token = _tokens[_i];
                        OriginalDOMTokenListAdd.call(this, token);
                    }
                };
                DOMTokenList.prototype.remove = function() {
                    for (var _len2 = arguments.length, tokens = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        tokens[_key2] = arguments[_key2];
                    }
                    for (var _i2 = 0, _tokens2 = tokens; _i2 < _tokens2.length; _i2++) {
                        var token = _tokens2[_i2];
                        OriginalDOMTokenListRemove.call(this, token);
                    }
                };
            })();
            (function checkDOMTokenListToggle() {
                if (!hasDOM || isNodeJS()) {
                    return;
                }
                var div = document.createElement("div");
                if (div.classList.toggle("test", 0) === false) {
                    return;
                }
                DOMTokenList.prototype.toggle = function(token) {
                    var force = arguments.length > 1 ? !!arguments[1] : !this.contains(token);
                    return this[force ? "add" : "remove"](token), force;
                };
            })();
            (function checkStringStartsWith() {
                if (String.prototype.startsWith) {
                    return;
                }
                __w_pdfjs_require__(5);
            })();
            (function checkStringEndsWith() {
                if (String.prototype.endsWith) {
                    return;
                }
                __w_pdfjs_require__(36);
            })();
            (function checkStringIncludes() {
                if (String.prototype.includes) {
                    return;
                }
                __w_pdfjs_require__(38);
            })();
            (function checkArrayIncludes() {
                if (Array.prototype.includes) {
                    return;
                }
                __w_pdfjs_require__(40);
            })();
            (function checkArrayFrom() {
                if (Array.from) {
                    return;
                }
                __w_pdfjs_require__(47);
            })();
            (function checkObjectAssign() {
                if (Object.assign) {
                    return;
                }
                __w_pdfjs_require__(70);
            })();
            (function checkMathLog2() {
                if (Math.log2) {
                    return;
                }
                Math.log2 = __w_pdfjs_require__(75);
            })();
            (function checkNumberIsNaN() {
                if (Number.isNaN) {
                    return;
                }
                Number.isNaN = __w_pdfjs_require__(77);
            })();
            (function checkNumberIsInteger() {
                if (Number.isInteger) {
                    return;
                }
                Number.isInteger = __w_pdfjs_require__(79);
            })();
            (function checkPromise() {
                if (globalScope.Promise && globalScope.Promise.prototype && globalScope.Promise.prototype["finally"]) {
                    return;
                }
                globalScope.Promise = __w_pdfjs_require__(82);
            })();
            (function checkWeakMap() {
                if (globalScope.WeakMap) {
                    return;
                }
                globalScope.WeakMap = __w_pdfjs_require__(102);
            })();
            (function checkWeakSet() {
                if (globalScope.WeakSet) {
                    return;
                }
                globalScope.WeakSet = __w_pdfjs_require__(119);
            })();
            (function checkStringCodePointAt() {
                if (String.codePointAt) {
                    return;
                }
                String.codePointAt = __w_pdfjs_require__(123);
            })();
            (function checkStringFromCodePoint() {
                if (String.fromCodePoint) {
                    return;
                }
                String.fromCodePoint = __w_pdfjs_require__(125);
            })();
            (function checkSymbol() {
                if (globalScope.Symbol) {
                    return;
                }
                __w_pdfjs_require__(127);
            })();
            (function checkStringPadStart() {
                if (String.prototype.padStart) {
                    return;
                }
                __w_pdfjs_require__(134);
            })();
            (function checkStringPadEnd() {
                if (String.prototype.padEnd) {
                    return;
                }
                __w_pdfjs_require__(138);
            })();
            (function checkObjectValues() {
                if (Object.values) {
                    return;
                }
                Object.values = __w_pdfjs_require__(140);
            })();
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = typeof window !== "undefined" && window.Math === Math ? window : typeof global !== "undefined" && global.Math === Math ? global : typeof self !== "undefined" && self.Math === Math ? self : {};
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        module.exports = function isNodeJS() {
            return (typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && process + "" === "[object process]" && !process.versions["nw"] && !process.versions["electron"];
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(6);
        module.exports = __w_pdfjs_require__(9).String.startsWith;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var toLength = __w_pdfjs_require__(28);
        var context = __w_pdfjs_require__(30);
        var STARTS_WITH = "startsWith";
        var $startsWith = ""[STARTS_WITH];
        $export($export.P + $export.F * __w_pdfjs_require__(35)(STARTS_WITH), "String", {
            startsWith: function startsWith(searchString) {
                var that = context(this, searchString, STARTS_WITH);
                var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
                var search = String(searchString);
                return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = __w_pdfjs_require__(8);
        var core = __w_pdfjs_require__(9);
        var hide = __w_pdfjs_require__(10);
        var redefine = __w_pdfjs_require__(20);
        var ctx = __w_pdfjs_require__(26);
        var PROTOTYPE = "prototype";
        var $export = function $export(type, name, source) {
            var IS_FORCED = type & $export.F;
            var IS_GLOBAL = type & $export.G;
            var IS_STATIC = type & $export.S;
            var IS_PROTO = type & $export.P;
            var IS_BIND = type & $export.B;
            var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
            var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
            var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
            var key, own, out, exp;
            if (IS_GLOBAL) source = name;
            for (key in source) {
                own = !IS_FORCED && target && target[key] !== undefined;
                out = (own ? target : source)[key];
                exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == "function" ? ctx(Function.call, out) : out;
                if (target) redefine(target, key, out, type & $export.U);
                if (exports[key] != out) hide(exports, key, exp);
                if (IS_PROTO && expProto[key] != out) expProto[key] = out;
            }
        };
        global.core = core;
        $export.F = 1;
        $export.G = 2;
        $export.S = 4;
        $export.P = 8;
        $export.B = 16;
        $export.W = 32;
        $export.U = 64;
        $export.R = 128;
        module.exports = $export;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = module.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
        if (typeof __g == "number") __g = global;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var core = module.exports = {
            version: "2.6.5"
        };
        if (typeof __e == "number") __e = core;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var dP = __w_pdfjs_require__(11);
        var createDesc = __w_pdfjs_require__(19);
        module.exports = __w_pdfjs_require__(15) ? function(object, key, value) {
            return dP.f(object, key, createDesc(1, value));
        } : function(object, key, value) {
            object[key] = value;
            return object;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var anObject = __w_pdfjs_require__(12);
        var IE8_DOM_DEFINE = __w_pdfjs_require__(14);
        var toPrimitive = __w_pdfjs_require__(18);
        var dP = Object.defineProperty;
        exports.f = __w_pdfjs_require__(15) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
            anObject(O);
            P = toPrimitive(P, true);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
                return dP(O, P, Attributes);
            } catch (e) {}
            if ("get" in Attributes || "set" in Attributes) throw TypeError("Accessors not supported!");
            if ("value" in Attributes) O[P] = Attributes.value;
            return O;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        module.exports = function(it) {
            if (!isObject(it)) throw TypeError(it + " is not an object!");
            return it;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        module.exports = function(it) {
            return _typeof(it) === "object" ? it !== null : typeof it === "function";
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = !__w_pdfjs_require__(15) && !__w_pdfjs_require__(16)(function() {
            return Object.defineProperty(__w_pdfjs_require__(17)("div"), "a", {
                get: function get() {
                    return 7;
                }
            }).a != 7;
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = !__w_pdfjs_require__(16)(function() {
            return Object.defineProperty({}, "a", {
                get: function get() {
                    return 7;
                }
            }).a != 7;
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(exec) {
            try {
                return !!exec();
            } catch (e) {
                return true;
            }
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        var document = __w_pdfjs_require__(8).document;
        var is = isObject(document) && isObject(document.createElement);
        module.exports = function(it) {
            return is ? document.createElement(it) : {};
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        module.exports = function(it, S) {
            if (!isObject(it)) return it;
            var fn, val;
            if (S && typeof (fn = it.toString) == "function" && !isObject(val = fn.call(it))) return val;
            if (typeof (fn = it.valueOf) == "function" && !isObject(val = fn.call(it))) return val;
            if (!S && typeof (fn = it.toString) == "function" && !isObject(val = fn.call(it))) return val;
            throw TypeError("Can't convert object to primitive value");
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(bitmap, value) {
            return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value
            };
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = __w_pdfjs_require__(8);
        var hide = __w_pdfjs_require__(10);
        var has = __w_pdfjs_require__(21);
        var SRC = __w_pdfjs_require__(22)("src");
        var $toString = __w_pdfjs_require__(23);
        var TO_STRING = "toString";
        var TPL = ("" + $toString).split(TO_STRING);
        __w_pdfjs_require__(9).inspectSource = function(it) {
            return $toString.call(it);
        };
        (module.exports = function(O, key, val, safe) {
            var isFunction = typeof val == "function";
            if (isFunction) has(val, "name") || hide(val, "name", key);
            if (O[key] === val) return;
            if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? "" + O[key] : TPL.join(String(key)));
            if (O === global) {
                O[key] = val;
            } else if (!safe) {
                delete O[key];
                hide(O, key, val);
            } else if (O[key]) {
                O[key] = val;
            } else {
                hide(O, key, val);
            }
        })(Function.prototype, TO_STRING, function toString() {
            return typeof this == "function" && this[SRC] || $toString.call(this);
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function(it, key) {
            return hasOwnProperty.call(it, key);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var id = 0;
        var px = Math.random();
        module.exports = function(key) {
            return "Symbol(".concat(key === undefined ? "" : key, ")_", (++id + px).toString(36));
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = __w_pdfjs_require__(24)("native-function-to-string", Function.toString);
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var core = __w_pdfjs_require__(9);
        var global = __w_pdfjs_require__(8);
        var SHARED = "__core-js_shared__";
        var store = global[SHARED] || (global[SHARED] = {});
        (module.exports = function(key, value) {
            return store[key] || (store[key] = value !== undefined ? value : {});
        })("versions", []).push({
            version: core.version,
            mode: __w_pdfjs_require__(25) ? "pure" : "global",
            copyright: "© 2019 Denis Pushkarev (zloirock.ru)"
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = false;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var aFunction = __w_pdfjs_require__(27);
        module.exports = function(fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
              case 1:
                return function(a) {
                    return fn.call(that, a);
                };

              case 2:
                return function(a, b) {
                    return fn.call(that, a, b);
                };

              case 3:
                return function(a, b, c) {
                    return fn.call(that, a, b, c);
                };
            }
            return function() {
                return fn.apply(that, arguments);
            };
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(it) {
            if (typeof it != "function") throw TypeError(it + " is not a function!");
            return it;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var toInteger = __w_pdfjs_require__(29);
        var min = Math.min;
        module.exports = function(it) {
            return it > 0 ? min(toInteger(it), 9007199254740991) : 0;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var ceil = Math.ceil;
        var floor = Math.floor;
        module.exports = function(it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isRegExp = __w_pdfjs_require__(31);
        var defined = __w_pdfjs_require__(34);
        module.exports = function(that, searchString, NAME) {
            if (isRegExp(searchString)) throw TypeError("String#" + NAME + " doesn't accept regex!");
            return String(defined(that));
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        var cof = __w_pdfjs_require__(32);
        var MATCH = __w_pdfjs_require__(33)("match");
        module.exports = function(it) {
            var isRegExp;
            return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == "RegExp");
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var toString = {}.toString;
        module.exports = function(it) {
            return toString.call(it).slice(8, -1);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var store = __w_pdfjs_require__(24)("wks");
        var uid = __w_pdfjs_require__(22);
        var _Symbol = __w_pdfjs_require__(8).Symbol;
        var USE_SYMBOL = typeof _Symbol == "function";
        var $exports = module.exports = function(name) {
            return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)("Symbol." + name));
        };
        $exports.store = store;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(it) {
            if (it == undefined) throw TypeError("Can't call method on  " + it);
            return it;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var MATCH = __w_pdfjs_require__(33)("match");
        module.exports = function(KEY) {
            var re = /./;
            try {
                "/./"[KEY](re);
            } catch (e) {
                try {
                    re[MATCH] = false;
                    return !"/./"[KEY](re);
                } catch (f) {}
            }
            return true;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(37);
        module.exports = __w_pdfjs_require__(9).String.endsWith;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var toLength = __w_pdfjs_require__(28);
        var context = __w_pdfjs_require__(30);
        var ENDS_WITH = "endsWith";
        var $endsWith = ""[ENDS_WITH];
        $export($export.P + $export.F * __w_pdfjs_require__(35)(ENDS_WITH), "String", {
            endsWith: function endsWith(searchString) {
                var that = context(this, searchString, ENDS_WITH);
                var endPosition = arguments.length > 1 ? arguments[1] : undefined;
                var len = toLength(that.length);
                var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
                var search = String(searchString);
                return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(39);
        module.exports = __w_pdfjs_require__(9).String.includes;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var context = __w_pdfjs_require__(30);
        var INCLUDES = "includes";
        $export($export.P + $export.F * __w_pdfjs_require__(35)(INCLUDES), "String", {
            includes: function includes(searchString) {
                return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(41);
        module.exports = __w_pdfjs_require__(9).Array.includes;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var $includes = __w_pdfjs_require__(42)(true);
        $export($export.P, "Array", {
            includes: function includes(el) {
                return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
            }
        });
        __w_pdfjs_require__(46)("includes");
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var toIObject = __w_pdfjs_require__(43);
        var toLength = __w_pdfjs_require__(28);
        var toAbsoluteIndex = __w_pdfjs_require__(45);
        module.exports = function(IS_INCLUDES) {
            return function($this, el, fromIndex) {
                var O = toIObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;
                if (IS_INCLUDES && el != el) while (length > index) {
                    value = O[index++];
                    if (value != value) return true;
                } else for (;length > index; index++) {
                    if (IS_INCLUDES || index in O) {
                        if (O[index] === el) return IS_INCLUDES || index || 0;
                    }
                }
                return !IS_INCLUDES && -1;
            };
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var IObject = __w_pdfjs_require__(44);
        var defined = __w_pdfjs_require__(34);
        module.exports = function(it) {
            return IObject(defined(it));
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var cof = __w_pdfjs_require__(32);
        module.exports = Object("z").propertyIsEnumerable(0) ? Object : function(it) {
            return cof(it) == "String" ? it.split("") : Object(it);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var toInteger = __w_pdfjs_require__(29);
        var max = Math.max;
        var min = Math.min;
        module.exports = function(index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var UNSCOPABLES = __w_pdfjs_require__(33)("unscopables");
        var ArrayProto = Array.prototype;
        if (ArrayProto[UNSCOPABLES] == undefined) __w_pdfjs_require__(10)(ArrayProto, UNSCOPABLES, {});
        module.exports = function(key) {
            ArrayProto[UNSCOPABLES][key] = true;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(48);
        __w_pdfjs_require__(63);
        module.exports = __w_pdfjs_require__(9).Array.from;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $at = __w_pdfjs_require__(49)(true);
        __w_pdfjs_require__(50)(String, "String", function(iterated) {
            this._t = String(iterated);
            this._i = 0;
        }, function() {
            var O = this._t;
            var index = this._i;
            var point;
            if (index >= O.length) return {
                value: undefined,
                done: true
            };
            point = $at(O, index);
            this._i += point.length;
            return {
                value: point,
                done: false
            };
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var toInteger = __w_pdfjs_require__(29);
        var defined = __w_pdfjs_require__(34);
        module.exports = function(TO_STRING) {
            return function(that, pos) {
                var s = String(defined(that));
                var i = toInteger(pos);
                var l = s.length;
                var a, b;
                if (i < 0 || i >= l) return TO_STRING ? "" : undefined;
                a = s.charCodeAt(i);
                return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
            };
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var LIBRARY = __w_pdfjs_require__(25);
        var $export = __w_pdfjs_require__(7);
        var redefine = __w_pdfjs_require__(20);
        var hide = __w_pdfjs_require__(10);
        var Iterators = __w_pdfjs_require__(51);
        var $iterCreate = __w_pdfjs_require__(52);
        var setToStringTag = __w_pdfjs_require__(60);
        var getPrototypeOf = __w_pdfjs_require__(61);
        var ITERATOR = __w_pdfjs_require__(33)("iterator");
        var BUGGY = !([].keys && "next" in [].keys());
        var FF_ITERATOR = "@@iterator";
        var KEYS = "keys";
        var VALUES = "values";
        var returnThis = function returnThis() {
            return this;
        };
        module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
            $iterCreate(Constructor, NAME, next);
            var getMethod = function getMethod(kind) {
                if (!BUGGY && kind in proto) return proto[kind];
                switch (kind) {
                  case KEYS:
                    return function keys() {
                        return new Constructor(this, kind);
                    };

                  case VALUES:
                    return function values() {
                        return new Constructor(this, kind);
                    };
                }
                return function entries() {
                    return new Constructor(this, kind);
                };
            };
            var TAG = NAME + " Iterator";
            var DEF_VALUES = DEFAULT == VALUES;
            var VALUES_BUG = false;
            var proto = Base.prototype;
            var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
            var $default = $native || getMethod(DEFAULT);
            var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod("entries") : undefined;
            var $anyNative = NAME == "Array" ? proto.entries || $native : $native;
            var methods, key, IteratorPrototype;
            if ($anyNative) {
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                    setToStringTag(IteratorPrototype, TAG, true);
                    if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != "function") hide(IteratorPrototype, ITERATOR, returnThis);
                }
            }
            if (DEF_VALUES && $native && $native.name !== VALUES) {
                VALUES_BUG = true;
                $default = function values() {
                    return $native.call(this);
                };
            }
            if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                hide(proto, ITERATOR, $default);
            }
            Iterators[NAME] = $default;
            Iterators[TAG] = returnThis;
            if (DEFAULT) {
                methods = {
                    values: DEF_VALUES ? $default : getMethod(VALUES),
                    keys: IS_SET ? $default : getMethod(KEYS),
                    entries: $entries
                };
                if (FORCED) for (key in methods) {
                    if (!(key in proto)) redefine(proto, key, methods[key]);
                } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
            }
            return methods;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = {};
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var create = __w_pdfjs_require__(53);
        var descriptor = __w_pdfjs_require__(19);
        var setToStringTag = __w_pdfjs_require__(60);
        var IteratorPrototype = {};
        __w_pdfjs_require__(10)(IteratorPrototype, __w_pdfjs_require__(33)("iterator"), function() {
            return this;
        });
        module.exports = function(Constructor, NAME, next) {
            Constructor.prototype = create(IteratorPrototype, {
                next: descriptor(1, next)
            });
            setToStringTag(Constructor, NAME + " Iterator");
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var anObject = __w_pdfjs_require__(12);
        var dPs = __w_pdfjs_require__(54);
        var enumBugKeys = __w_pdfjs_require__(58);
        var IE_PROTO = __w_pdfjs_require__(57)("IE_PROTO");
        var Empty = function Empty() {};
        var PROTOTYPE = "prototype";
        var _createDict = function createDict() {
            var iframe = __w_pdfjs_require__(17)("iframe");
            var i = enumBugKeys.length;
            var lt = "<";
            var gt = ">";
            var iframeDocument;
            iframe.style.display = "none";
            __w_pdfjs_require__(59).appendChild(iframe);
            iframe.src = "javascript:";
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(lt + "script" + gt + "document.F=Object" + lt + "/script" + gt);
            iframeDocument.close();
            _createDict = iframeDocument.F;
            while (i--) {
                delete _createDict[PROTOTYPE][enumBugKeys[i]];
            }
            return _createDict();
        };
        module.exports = Object.create || function create(O, Properties) {
            var result;
            if (O !== null) {
                Empty[PROTOTYPE] = anObject(O);
                result = new Empty();
                Empty[PROTOTYPE] = null;
                result[IE_PROTO] = O;
            } else result = _createDict();
            return Properties === undefined ? result : dPs(result, Properties);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var dP = __w_pdfjs_require__(11);
        var anObject = __w_pdfjs_require__(12);
        var getKeys = __w_pdfjs_require__(55);
        module.exports = __w_pdfjs_require__(15) ? Object.defineProperties : function defineProperties(O, Properties) {
            anObject(O);
            var keys = getKeys(Properties);
            var length = keys.length;
            var i = 0;
            var P;
            while (length > i) {
                dP.f(O, P = keys[i++], Properties[P]);
            }
            return O;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $keys = __w_pdfjs_require__(56);
        var enumBugKeys = __w_pdfjs_require__(58);
        module.exports = Object.keys || function keys(O) {
            return $keys(O, enumBugKeys);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var has = __w_pdfjs_require__(21);
        var toIObject = __w_pdfjs_require__(43);
        var arrayIndexOf = __w_pdfjs_require__(42)(false);
        var IE_PROTO = __w_pdfjs_require__(57)("IE_PROTO");
        module.exports = function(object, names) {
            var O = toIObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O) {
                if (key != IE_PROTO) has(O, key) && result.push(key);
            }
            while (names.length > i) {
                if (has(O, key = names[i++])) {
                    ~arrayIndexOf(result, key) || result.push(key);
                }
            }
            return result;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var shared = __w_pdfjs_require__(24)("keys");
        var uid = __w_pdfjs_require__(22);
        module.exports = function(key) {
            return shared[key] || (shared[key] = uid(key));
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var document = __w_pdfjs_require__(8).document;
        module.exports = document && document.documentElement;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var def = __w_pdfjs_require__(11).f;
        var has = __w_pdfjs_require__(21);
        var TAG = __w_pdfjs_require__(33)("toStringTag");
        module.exports = function(it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
                configurable: true,
                value: tag
            });
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var has = __w_pdfjs_require__(21);
        var toObject = __w_pdfjs_require__(62);
        var IE_PROTO = __w_pdfjs_require__(57)("IE_PROTO");
        var ObjectProto = Object.prototype;
        module.exports = Object.getPrototypeOf || function(O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (typeof O.constructor == "function" && O instanceof O.constructor) {
                return O.constructor.prototype;
            }
            return O instanceof Object ? ObjectProto : null;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var defined = __w_pdfjs_require__(34);
        module.exports = function(it) {
            return Object(defined(it));
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var ctx = __w_pdfjs_require__(26);
        var $export = __w_pdfjs_require__(7);
        var toObject = __w_pdfjs_require__(62);
        var call = __w_pdfjs_require__(64);
        var isArrayIter = __w_pdfjs_require__(65);
        var toLength = __w_pdfjs_require__(28);
        var createProperty = __w_pdfjs_require__(66);
        var getIterFn = __w_pdfjs_require__(67);
        $export($export.S + $export.F * !__w_pdfjs_require__(69)(function(iter) {
            Array.from(iter);
        }), "Array", {
            from: function from(arrayLike) {
                var O = toObject(arrayLike);
                var C = typeof this == "function" ? this : Array;
                var aLen = arguments.length;
                var mapfn = aLen > 1 ? arguments[1] : undefined;
                var mapping = mapfn !== undefined;
                var index = 0;
                var iterFn = getIterFn(O);
                var length, result, step, iterator;
                if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
                if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                    for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                        createProperty(result, index, mapping ? call(iterator, mapfn, [ step.value, index ], true) : step.value);
                    }
                } else {
                    length = toLength(O.length);
                    for (result = new C(length); length > index; index++) {
                        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                    }
                }
                result.length = index;
                return result;
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var anObject = __w_pdfjs_require__(12);
        module.exports = function(iterator, fn, value, entries) {
            try {
                return entries ? fn(anObject(value)[0], value[1]) : fn(value);
            } catch (e) {
                var ret = iterator["return"];
                if (ret !== undefined) anObject(ret.call(iterator));
                throw e;
            }
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var Iterators = __w_pdfjs_require__(51);
        var ITERATOR = __w_pdfjs_require__(33)("iterator");
        var ArrayProto = Array.prototype;
        module.exports = function(it) {
            return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $defineProperty = __w_pdfjs_require__(11);
        var createDesc = __w_pdfjs_require__(19);
        module.exports = function(object, index, value) {
            if (index in object) $defineProperty.f(object, index, createDesc(0, value)); else object[index] = value;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var classof = __w_pdfjs_require__(68);
        var ITERATOR = __w_pdfjs_require__(33)("iterator");
        var Iterators = __w_pdfjs_require__(51);
        module.exports = __w_pdfjs_require__(9).getIteratorMethod = function(it) {
            if (it != undefined) return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var cof = __w_pdfjs_require__(32);
        var TAG = __w_pdfjs_require__(33)("toStringTag");
        var ARG = cof(function() {
            return arguments;
        }()) == "Arguments";
        var tryGet = function tryGet(it, key) {
            try {
                return it[key];
            } catch (e) {}
        };
        module.exports = function(it) {
            var O, T, B;
            return it === undefined ? "Undefined" : it === null ? "Null" : typeof (T = tryGet(O = Object(it), TAG)) == "string" ? T : ARG ? cof(O) : (B = cof(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : B;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var ITERATOR = __w_pdfjs_require__(33)("iterator");
        var SAFE_CLOSING = false;
        try {
            var riter = [ 7 ][ITERATOR]();
            riter["return"] = function() {
                SAFE_CLOSING = true;
            };
            Array.from(riter, function() {
                throw 2;
            });
        } catch (e) {}
        module.exports = function(exec, skipClosing) {
            if (!skipClosing && !SAFE_CLOSING) return false;
            var safe = false;
            try {
                var arr = [ 7 ];
                var iter = arr[ITERATOR]();
                iter.next = function() {
                    return {
                        done: safe = true
                    };
                };
                arr[ITERATOR] = function() {
                    return iter;
                };
                exec(arr);
            } catch (e) {}
            return safe;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(71);
        module.exports = __w_pdfjs_require__(9).Object.assign;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        $export($export.S + $export.F, "Object", {
            assign: __w_pdfjs_require__(72)
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var getKeys = __w_pdfjs_require__(55);
        var gOPS = __w_pdfjs_require__(73);
        var pIE = __w_pdfjs_require__(74);
        var toObject = __w_pdfjs_require__(62);
        var IObject = __w_pdfjs_require__(44);
        var $assign = Object.assign;
        module.exports = !$assign || __w_pdfjs_require__(16)(function() {
            var A = {};
            var B = {};
            var S = Symbol();
            var K = "abcdefghijklmnopqrst";
            A[S] = 7;
            K.split("").forEach(function(k) {
                B[k] = k;
            });
            return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join("") != K;
        }) ? function assign(target, source) {
            var T = toObject(target);
            var aLen = arguments.length;
            var index = 1;
            var getSymbols = gOPS.f;
            var isEnum = pIE.f;
            while (aLen > index) {
                var S = IObject(arguments[index++]);
                var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
                var length = keys.length;
                var j = 0;
                var key;
                while (length > j) {
                    if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
                }
            }
            return T;
        } : $assign;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        exports.f = Object.getOwnPropertySymbols;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        exports.f = {}.propertyIsEnumerable;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(76);
        module.exports = __w_pdfjs_require__(9).Math.log2;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        $export($export.S, "Math", {
            log2: function log2(x) {
                return Math.log(x) / Math.LN2;
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(78);
        module.exports = __w_pdfjs_require__(9).Number.isNaN;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        $export($export.S, "Number", {
            isNaN: function isNaN(number) {
                return number != number;
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(80);
        module.exports = __w_pdfjs_require__(9).Number.isInteger;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        $export($export.S, "Number", {
            isInteger: __w_pdfjs_require__(81)
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        var floor = Math.floor;
        module.exports = function isInteger(it) {
            return !isObject(it) && isFinite(it) && floor(it) === it;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(83);
        __w_pdfjs_require__(48);
        __w_pdfjs_require__(84);
        __w_pdfjs_require__(87);
        __w_pdfjs_require__(100);
        __w_pdfjs_require__(101);
        module.exports = __w_pdfjs_require__(9).Promise;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var classof = __w_pdfjs_require__(68);
        var test = {};
        test[__w_pdfjs_require__(33)("toStringTag")] = "z";
        if (test + "" != "[object z]") {
            __w_pdfjs_require__(20)(Object.prototype, "toString", function toString() {
                return "[object " + classof(this) + "]";
            }, true);
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $iterators = __w_pdfjs_require__(85);
        var getKeys = __w_pdfjs_require__(55);
        var redefine = __w_pdfjs_require__(20);
        var global = __w_pdfjs_require__(8);
        var hide = __w_pdfjs_require__(10);
        var Iterators = __w_pdfjs_require__(51);
        var wks = __w_pdfjs_require__(33);
        var ITERATOR = wks("iterator");
        var TO_STRING_TAG = wks("toStringTag");
        var ArrayValues = Iterators.Array;
        var DOMIterables = {
            CSSRuleList: true,
            CSSStyleDeclaration: false,
            CSSValueList: false,
            ClientRectList: false,
            DOMRectList: false,
            DOMStringList: false,
            DOMTokenList: true,
            DataTransferItemList: false,
            FileList: false,
            HTMLAllCollection: false,
            HTMLCollection: false,
            HTMLFormElement: false,
            HTMLSelectElement: false,
            MediaList: true,
            MimeTypeArray: false,
            NamedNodeMap: false,
            NodeList: true,
            PaintRequestList: false,
            Plugin: false,
            PluginArray: false,
            SVGLengthList: false,
            SVGNumberList: false,
            SVGPathSegList: false,
            SVGPointList: false,
            SVGStringList: false,
            SVGTransformList: false,
            SourceBufferList: false,
            StyleSheetList: true,
            TextTrackCueList: false,
            TextTrackList: false,
            TouchList: false
        };
        for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
            var NAME = collections[i];
            var explicit = DOMIterables[NAME];
            var Collection = global[NAME];
            var proto = Collection && Collection.prototype;
            var key;
            if (proto) {
                if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
                if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                Iterators[NAME] = ArrayValues;
                if (explicit) for (key in $iterators) {
                    if (!proto[key]) redefine(proto, key, $iterators[key], true);
                }
            }
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var addToUnscopables = __w_pdfjs_require__(46);
        var step = __w_pdfjs_require__(86);
        var Iterators = __w_pdfjs_require__(51);
        var toIObject = __w_pdfjs_require__(43);
        module.exports = __w_pdfjs_require__(50)(Array, "Array", function(iterated, kind) {
            this._t = toIObject(iterated);
            this._i = 0;
            this._k = kind;
        }, function() {
            var O = this._t;
            var kind = this._k;
            var index = this._i++;
            if (!O || index >= O.length) {
                this._t = undefined;
                return step(1);
            }
            if (kind == "keys") return step(0, index);
            if (kind == "values") return step(0, O[index]);
            return step(0, [ index, O[index] ]);
        }, "values");
        Iterators.Arguments = Iterators.Array;
        addToUnscopables("keys");
        addToUnscopables("values");
        addToUnscopables("entries");
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(done, value) {
            return {
                value: value,
                done: !!done
            };
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var LIBRARY = __w_pdfjs_require__(25);
        var global = __w_pdfjs_require__(8);
        var ctx = __w_pdfjs_require__(26);
        var classof = __w_pdfjs_require__(68);
        var $export = __w_pdfjs_require__(7);
        var isObject = __w_pdfjs_require__(13);
        var aFunction = __w_pdfjs_require__(27);
        var anInstance = __w_pdfjs_require__(88);
        var forOf = __w_pdfjs_require__(89);
        var speciesConstructor = __w_pdfjs_require__(90);
        var task = __w_pdfjs_require__(91).set;
        var microtask = __w_pdfjs_require__(93)();
        var newPromiseCapabilityModule = __w_pdfjs_require__(94);
        var perform = __w_pdfjs_require__(95);
        var userAgent = __w_pdfjs_require__(96);
        var promiseResolve = __w_pdfjs_require__(97);
        var PROMISE = "Promise";
        var TypeError = global.TypeError;
        var process = global.process;
        var versions = process && process.versions;
        var v8 = versions && versions.v8 || "";
        var $Promise = global[PROMISE];
        var isNode = classof(process) == "process";
        var empty = function empty() {};
        var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
        var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
        var USE_NATIVE = !!function() {
            try {
                var promise = $Promise.resolve(1);
                var FakePromise = (promise.constructor = {})[__w_pdfjs_require__(33)("species")] = function(exec) {
                    exec(empty, empty);
                };
                return (isNode || typeof PromiseRejectionEvent == "function") && promise.then(empty) instanceof FakePromise && v8.indexOf("6.6") !== 0 && userAgent.indexOf("Chrome/66") === -1;
            } catch (e) {}
        }();
        var isThenable = function isThenable(it) {
            var then;
            return isObject(it) && typeof (then = it.then) == "function" ? then : false;
        };
        var notify = function notify(promise, isReject) {
            if (promise._n) return;
            promise._n = true;
            var chain = promise._c;
            microtask(function() {
                var value = promise._v;
                var ok = promise._s == 1;
                var i = 0;
                var run = function run(reaction) {
                    var handler = ok ? reaction.ok : reaction.fail;
                    var resolve = reaction.resolve;
                    var reject = reaction.reject;
                    var domain = reaction.domain;
                    var result, then, exited;
                    try {
                        if (handler) {
                            if (!ok) {
                                if (promise._h == 2) onHandleUnhandled(promise);
                                promise._h = 1;
                            }
                            if (handler === true) result = value; else {
                                if (domain) domain.enter();
                                result = handler(value);
                                if (domain) {
                                    domain.exit();
                                    exited = true;
                                }
                            }
                            if (result === reaction.promise) {
                                reject(TypeError("Promise-chain cycle"));
                            } else if (then = isThenable(result)) {
                                then.call(result, resolve, reject);
                            } else resolve(result);
                        } else reject(value);
                    } catch (e) {
                        if (domain && !exited) domain.exit();
                        reject(e);
                    }
                };
                while (chain.length > i) {
                    run(chain[i++]);
                }
                promise._c = [];
                promise._n = false;
                if (isReject && !promise._h) onUnhandled(promise);
            });
        };
        var onUnhandled = function onUnhandled(promise) {
            task.call(global, function() {
                var value = promise._v;
                var unhandled = isUnhandled(promise);
                var result, handler, console;
                if (unhandled) {
                    result = perform(function() {
                        if (isNode) {
                            process.emit("unhandledRejection", value, promise);
                        } else if (handler = global.onunhandledrejection) {
                            handler({
                                promise: promise,
                                reason: value
                            });
                        } else if ((console = global.console) && console.error) {
                            console.error("Unhandled promise rejection", value);
                        }
                    });
                    promise._h = isNode || isUnhandled(promise) ? 2 : 1;
                }
                promise._a = undefined;
                if (unhandled && result.e) throw result.v;
            });
        };
        var isUnhandled = function isUnhandled(promise) {
            return promise._h !== 1 && (promise._a || promise._c).length === 0;
        };
        var onHandleUnhandled = function onHandleUnhandled(promise) {
            task.call(global, function() {
                var handler;
                if (isNode) {
                    process.emit("rejectionHandled", promise);
                } else if (handler = global.onrejectionhandled) {
                    handler({
                        promise: promise,
                        reason: promise._v
                    });
                }
            });
        };
        var $reject = function $reject(value) {
            var promise = this;
            if (promise._d) return;
            promise._d = true;
            promise = promise._w || promise;
            promise._v = value;
            promise._s = 2;
            if (!promise._a) promise._a = promise._c.slice();
            notify(promise, true);
        };
        var $resolve = function $resolve(value) {
            var promise = this;
            var then;
            if (promise._d) return;
            promise._d = true;
            promise = promise._w || promise;
            try {
                if (promise === value) throw TypeError("Promise can't be resolved itself");
                if (then = isThenable(value)) {
                    microtask(function() {
                        var wrapper = {
                            _w: promise,
                            _d: false
                        };
                        try {
                            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                        } catch (e) {
                            $reject.call(wrapper, e);
                        }
                    });
                } else {
                    promise._v = value;
                    promise._s = 1;
                    notify(promise, false);
                }
            } catch (e) {
                $reject.call({
                    _w: promise,
                    _d: false
                }, e);
            }
        };
        if (!USE_NATIVE) {
            $Promise = function Promise(executor) {
                anInstance(this, $Promise, PROMISE, "_h");
                aFunction(executor);
                Internal.call(this);
                try {
                    executor(ctx($resolve, this, 1), ctx($reject, this, 1));
                } catch (err) {
                    $reject.call(this, err);
                }
            };
            Internal = function Promise(executor) {
                this._c = [];
                this._a = undefined;
                this._s = 0;
                this._d = false;
                this._v = undefined;
                this._h = 0;
                this._n = false;
            };
            Internal.prototype = __w_pdfjs_require__(98)($Promise.prototype, {
                then: function then(onFulfilled, onRejected) {
                    var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                    reaction.ok = typeof onFulfilled == "function" ? onFulfilled : true;
                    reaction.fail = typeof onRejected == "function" && onRejected;
                    reaction.domain = isNode ? process.domain : undefined;
                    this._c.push(reaction);
                    if (this._a) this._a.push(reaction);
                    if (this._s) notify(this, false);
                    return reaction.promise;
                },
                catch: function _catch(onRejected) {
                    return this.then(undefined, onRejected);
                }
            });
            OwnPromiseCapability = function OwnPromiseCapability() {
                var promise = new Internal();
                this.promise = promise;
                this.resolve = ctx($resolve, promise, 1);
                this.reject = ctx($reject, promise, 1);
            };
            newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
                return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
            };
        }
        $export($export.G + $export.W + $export.F * !USE_NATIVE, {
            Promise: $Promise
        });
        __w_pdfjs_require__(60)($Promise, PROMISE);
        __w_pdfjs_require__(99)(PROMISE);
        Wrapper = __w_pdfjs_require__(9)[PROMISE];
        $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
            reject: function reject(r) {
                var capability = newPromiseCapability(this);
                var $$reject = capability.reject;
                $$reject(r);
                return capability.promise;
            }
        });
        $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
            resolve: function resolve(x) {
                return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
            }
        });
        $export($export.S + $export.F * !(USE_NATIVE && __w_pdfjs_require__(69)(function(iter) {
            $Promise.all(iter)["catch"](empty);
        })), PROMISE, {
            all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function() {
                    var values = [];
                    var index = 0;
                    var remaining = 1;
                    forOf(iterable, false, function(promise) {
                        var $index = index++;
                        var alreadyCalled = false;
                        values.push(undefined);
                        remaining++;
                        C.resolve(promise).then(function(value) {
                            if (alreadyCalled) return;
                            alreadyCalled = true;
                            values[$index] = value;
                            --remaining || resolve(values);
                        }, reject);
                    });
                    --remaining || resolve(values);
                });
                if (result.e) reject(result.v);
                return capability.promise;
            },
            race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function() {
                    forOf(iterable, false, function(promise) {
                        C.resolve(promise).then(capability.resolve, reject);
                    });
                });
                if (result.e) reject(result.v);
                return capability.promise;
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(it, Constructor, name, forbiddenField) {
            if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
                throw TypeError(name + ": incorrect invocation!");
            }
            return it;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var ctx = __w_pdfjs_require__(26);
        var call = __w_pdfjs_require__(64);
        var isArrayIter = __w_pdfjs_require__(65);
        var anObject = __w_pdfjs_require__(12);
        var toLength = __w_pdfjs_require__(28);
        var getIterFn = __w_pdfjs_require__(67);
        var BREAK = {};
        var RETURN = {};
        var _exports = module.exports = function(iterable, entries, fn, that, ITERATOR) {
            var iterFn = ITERATOR ? function() {
                return iterable;
            } : getIterFn(iterable);
            var f = ctx(fn, that, entries ? 2 : 1);
            var index = 0;
            var length, step, iterator, result;
            if (typeof iterFn != "function") throw TypeError(iterable + " is not iterable!");
            if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
                result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                if (result === BREAK || result === RETURN) return result;
            } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done; ) {
                result = call(iterator, f, step.value, entries);
                if (result === BREAK || result === RETURN) return result;
            }
        };
        _exports.BREAK = BREAK;
        _exports.RETURN = RETURN;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var anObject = __w_pdfjs_require__(12);
        var aFunction = __w_pdfjs_require__(27);
        var SPECIES = __w_pdfjs_require__(33)("species");
        module.exports = function(O, D) {
            var C = anObject(O).constructor;
            var S;
            return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var ctx = __w_pdfjs_require__(26);
        var invoke = __w_pdfjs_require__(92);
        var html = __w_pdfjs_require__(59);
        var cel = __w_pdfjs_require__(17);
        var global = __w_pdfjs_require__(8);
        var process = global.process;
        var setTask = global.setImmediate;
        var clearTask = global.clearImmediate;
        var MessageChannel = global.MessageChannel;
        var Dispatch = global.Dispatch;
        var counter = 0;
        var queue = {};
        var ONREADYSTATECHANGE = "onreadystatechange";
        var defer, channel, port;
        var run = function run() {
            var id = +this;
            if (queue.hasOwnProperty(id)) {
                var fn = queue[id];
                delete queue[id];
                fn();
            }
        };
        var listener = function listener(event) {
            run.call(event.data);
        };
        if (!setTask || !clearTask) {
            setTask = function setImmediate(fn) {
                var args = [];
                var i = 1;
                while (arguments.length > i) {
                    args.push(arguments[i++]);
                }
                queue[++counter] = function() {
                    invoke(typeof fn == "function" ? fn : Function(fn), args);
                };
                defer(counter);
                return counter;
            };
            clearTask = function clearImmediate(id) {
                delete queue[id];
            };
            if (__w_pdfjs_require__(32)(process) == "process") {
                defer = function defer(id) {
                    process.nextTick(ctx(run, id, 1));
                };
            } else if (Dispatch && Dispatch.now) {
                defer = function defer(id) {
                    Dispatch.now(ctx(run, id, 1));
                };
            } else if (MessageChannel) {
                channel = new MessageChannel();
                port = channel.port2;
                channel.port1.onmessage = listener;
                defer = ctx(port.postMessage, port, 1);
            } else if (global.addEventListener && typeof postMessage == "function" && !global.importScripts) {
                defer = function defer(id) {
                    global.postMessage(id + "", "*");
                };
                global.addEventListener("message", listener, false);
            } else if (ONREADYSTATECHANGE in cel("script")) {
                defer = function defer(id) {
                    html.appendChild(cel("script"))[ONREADYSTATECHANGE] = function() {
                        html.removeChild(this);
                        run.call(id);
                    };
                };
            } else {
                defer = function defer(id) {
                    setTimeout(ctx(run, id, 1), 0);
                };
            }
        }
        module.exports = {
            set: setTask,
            clear: clearTask
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(fn, args, that) {
            var un = that === undefined;
            switch (args.length) {
              case 0:
                return un ? fn() : fn.call(that);

              case 1:
                return un ? fn(args[0]) : fn.call(that, args[0]);

              case 2:
                return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

              case 3:
                return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

              case 4:
                return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
            }
            return fn.apply(that, args);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = __w_pdfjs_require__(8);
        var macrotask = __w_pdfjs_require__(91).set;
        var Observer = global.MutationObserver || global.WebKitMutationObserver;
        var process = global.process;
        var Promise = global.Promise;
        var isNode = __w_pdfjs_require__(32)(process) == "process";
        module.exports = function() {
            var head, last, notify;
            var flush = function flush() {
                var parent, fn;
                if (isNode && (parent = process.domain)) parent.exit();
                while (head) {
                    fn = head.fn;
                    head = head.next;
                    try {
                        fn();
                    } catch (e) {
                        if (head) notify(); else last = undefined;
                        throw e;
                    }
                }
                last = undefined;
                if (parent) parent.enter();
            };
            if (isNode) {
                notify = function notify() {
                    process.nextTick(flush);
                };
            } else if (Observer && !(global.navigator && global.navigator.standalone)) {
                var toggle = true;
                var node = document.createTextNode("");
                new Observer(flush).observe(node, {
                    characterData: true
                });
                notify = function notify() {
                    node.data = toggle = !toggle;
                };
            } else if (Promise && Promise.resolve) {
                var promise = Promise.resolve(undefined);
                notify = function notify() {
                    promise.then(flush);
                };
            } else {
                notify = function notify() {
                    macrotask.call(global, flush);
                };
            }
            return function(fn) {
                var task = {
                    fn: fn,
                    next: undefined
                };
                if (last) last.next = task;
                if (!head) {
                    head = task;
                    notify();
                }
                last = task;
            };
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var aFunction = __w_pdfjs_require__(27);
        function PromiseCapability(C) {
            var resolve, reject;
            this.promise = new C(function($$resolve, $$reject) {
                if (resolve !== undefined || reject !== undefined) throw TypeError("Bad Promise constructor");
                resolve = $$resolve;
                reject = $$reject;
            });
            this.resolve = aFunction(resolve);
            this.reject = aFunction(reject);
        }
        module.exports.f = function(C) {
            return new PromiseCapability(C);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(exec) {
            try {
                return {
                    e: false,
                    v: exec()
                };
            } catch (e) {
                return {
                    e: true,
                    v: e
                };
            }
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = __w_pdfjs_require__(8);
        var navigator = global.navigator;
        module.exports = navigator && navigator.userAgent || "";
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var anObject = __w_pdfjs_require__(12);
        var isObject = __w_pdfjs_require__(13);
        var newPromiseCapability = __w_pdfjs_require__(94);
        module.exports = function(C, x) {
            anObject(C);
            if (isObject(x) && x.constructor === C) return x;
            var promiseCapability = newPromiseCapability.f(C);
            var resolve = promiseCapability.resolve;
            resolve(x);
            return promiseCapability.promise;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var redefine = __w_pdfjs_require__(20);
        module.exports = function(target, src, safe) {
            for (var key in src) {
                redefine(target, key, src[key], safe);
            }
            return target;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = __w_pdfjs_require__(8);
        var dP = __w_pdfjs_require__(11);
        var DESCRIPTORS = __w_pdfjs_require__(15);
        var SPECIES = __w_pdfjs_require__(33)("species");
        module.exports = function(KEY) {
            var C = global[KEY];
            if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
                configurable: true,
                get: function get() {
                    return this;
                }
            });
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var core = __w_pdfjs_require__(9);
        var global = __w_pdfjs_require__(8);
        var speciesConstructor = __w_pdfjs_require__(90);
        var promiseResolve = __w_pdfjs_require__(97);
        $export($export.P + $export.R, "Promise", {
            finally: function _finally(onFinally) {
                var C = speciesConstructor(this, core.Promise || global.Promise);
                var isFunction = typeof onFinally == "function";
                return this.then(isFunction ? function(x) {
                    return promiseResolve(C, onFinally()).then(function() {
                        return x;
                    });
                } : onFinally, isFunction ? function(e) {
                    return promiseResolve(C, onFinally()).then(function() {
                        throw e;
                    });
                } : onFinally);
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var newPromiseCapability = __w_pdfjs_require__(94);
        var perform = __w_pdfjs_require__(95);
        $export($export.S, "Promise", {
            try: function _try(callbackfn) {
                var promiseCapability = newPromiseCapability.f(this);
                var result = perform(callbackfn);
                (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
                return promiseCapability.promise;
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(83);
        __w_pdfjs_require__(84);
        __w_pdfjs_require__(103);
        __w_pdfjs_require__(115);
        __w_pdfjs_require__(117);
        module.exports = __w_pdfjs_require__(9).WeakMap;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = __w_pdfjs_require__(8);
        var each = __w_pdfjs_require__(104)(0);
        var redefine = __w_pdfjs_require__(20);
        var meta = __w_pdfjs_require__(108);
        var assign = __w_pdfjs_require__(72);
        var weak = __w_pdfjs_require__(109);
        var isObject = __w_pdfjs_require__(13);
        var validate = __w_pdfjs_require__(110);
        var NATIVE_WEAK_MAP = __w_pdfjs_require__(110);
        var IS_IE11 = !global.ActiveXObject && "ActiveXObject" in global;
        var WEAK_MAP = "WeakMap";
        var getWeak = meta.getWeak;
        var isExtensible = Object.isExtensible;
        var uncaughtFrozenStore = weak.ufstore;
        var InternalMap;
        var wrapper = function wrapper(get) {
            return function WeakMap() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
        };
        var methods = {
            get: function get(key) {
                if (isObject(key)) {
                    var data = getWeak(key);
                    if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
                    return data ? data[this._i] : undefined;
                }
            },
            set: function set(key, value) {
                return weak.def(validate(this, WEAK_MAP), key, value);
            }
        };
        var $WeakMap = module.exports = __w_pdfjs_require__(111)(WEAK_MAP, wrapper, methods, weak, true, true);
        if (NATIVE_WEAK_MAP && IS_IE11) {
            InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
            assign(InternalMap.prototype, methods);
            meta.NEED = true;
            each([ "delete", "has", "get", "set" ], function(key) {
                var proto = $WeakMap.prototype;
                var method = proto[key];
                redefine(proto, key, function(a, b) {
                    if (isObject(a) && !isExtensible(a)) {
                        if (!this._f) this._f = new InternalMap();
                        var result = this._f[key](a, b);
                        return key == "set" ? this : result;
                    }
                    return method.call(this, a, b);
                });
            });
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var ctx = __w_pdfjs_require__(26);
        var IObject = __w_pdfjs_require__(44);
        var toObject = __w_pdfjs_require__(62);
        var toLength = __w_pdfjs_require__(28);
        var asc = __w_pdfjs_require__(105);
        module.exports = function(TYPE, $create) {
            var IS_MAP = TYPE == 1;
            var IS_FILTER = TYPE == 2;
            var IS_SOME = TYPE == 3;
            var IS_EVERY = TYPE == 4;
            var IS_FIND_INDEX = TYPE == 6;
            var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
            var create = $create || asc;
            return function($this, callbackfn, that) {
                var O = toObject($this);
                var self = IObject(O);
                var f = ctx(callbackfn, that, 3);
                var length = toLength(self.length);
                var index = 0;
                var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
                var val, res;
                for (;length > index; index++) {
                    if (NO_HOLES || index in self) {
                        val = self[index];
                        res = f(val, index, O);
                        if (TYPE) {
                            if (IS_MAP) result[index] = res; else if (res) switch (TYPE) {
                              case 3:
                                return true;

                              case 5:
                                return val;

                              case 6:
                                return index;

                              case 2:
                                result.push(val);
                            } else if (IS_EVERY) return false;
                        }
                    }
                }
                return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
            };
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var speciesConstructor = __w_pdfjs_require__(106);
        module.exports = function(original, length) {
            return new (speciesConstructor(original))(length);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        var isArray = __w_pdfjs_require__(107);
        var SPECIES = __w_pdfjs_require__(33)("species");
        module.exports = function(original) {
            var C;
            if (isArray(original)) {
                C = original.constructor;
                if (typeof C == "function" && (C === Array || isArray(C.prototype))) C = undefined;
                if (isObject(C)) {
                    C = C[SPECIES];
                    if (C === null) C = undefined;
                }
            }
            return C === undefined ? Array : C;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var cof = __w_pdfjs_require__(32);
        module.exports = Array.isArray || function isArray(arg) {
            return cof(arg) == "Array";
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        var META = __w_pdfjs_require__(22)("meta");
        var isObject = __w_pdfjs_require__(13);
        var has = __w_pdfjs_require__(21);
        var setDesc = __w_pdfjs_require__(11).f;
        var id = 0;
        var isExtensible = Object.isExtensible || function() {
            return true;
        };
        var FREEZE = !__w_pdfjs_require__(16)(function() {
            return isExtensible(Object.preventExtensions({}));
        });
        var setMeta = function setMeta(it) {
            setDesc(it, META, {
                value: {
                    i: "O" + ++id,
                    w: {}
                }
            });
        };
        var fastKey = function fastKey(it, create) {
            if (!isObject(it)) return _typeof(it) == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
            if (!has(it, META)) {
                if (!isExtensible(it)) return "F";
                if (!create) return "E";
                setMeta(it);
            }
            return it[META].i;
        };
        var getWeak = function getWeak(it, create) {
            if (!has(it, META)) {
                if (!isExtensible(it)) return true;
                if (!create) return false;
                setMeta(it);
            }
            return it[META].w;
        };
        var onFreeze = function onFreeze(it) {
            if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
            return it;
        };
        var meta = module.exports = {
            KEY: META,
            NEED: false,
            fastKey: fastKey,
            getWeak: getWeak,
            onFreeze: onFreeze
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var redefineAll = __w_pdfjs_require__(98);
        var getWeak = __w_pdfjs_require__(108).getWeak;
        var anObject = __w_pdfjs_require__(12);
        var isObject = __w_pdfjs_require__(13);
        var anInstance = __w_pdfjs_require__(88);
        var forOf = __w_pdfjs_require__(89);
        var createArrayMethod = __w_pdfjs_require__(104);
        var $has = __w_pdfjs_require__(21);
        var validate = __w_pdfjs_require__(110);
        var arrayFind = createArrayMethod(5);
        var arrayFindIndex = createArrayMethod(6);
        var id = 0;
        var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
            return that._l || (that._l = new UncaughtFrozenStore());
        };
        var UncaughtFrozenStore = function UncaughtFrozenStore() {
            this.a = [];
        };
        var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
            return arrayFind(store.a, function(it) {
                return it[0] === key;
            });
        };
        UncaughtFrozenStore.prototype = {
            get: function get(key) {
                var entry = findUncaughtFrozen(this, key);
                if (entry) return entry[1];
            },
            has: function has(key) {
                return !!findUncaughtFrozen(this, key);
            },
            set: function set(key, value) {
                var entry = findUncaughtFrozen(this, key);
                if (entry) entry[1] = value; else this.a.push([ key, value ]);
            },
            delete: function _delete(key) {
                var index = arrayFindIndex(this.a, function(it) {
                    return it[0] === key;
                });
                if (~index) this.a.splice(index, 1);
                return !!~index;
            }
        };
        module.exports = {
            getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function(that, iterable) {
                    anInstance(that, C, NAME, "_i");
                    that._t = NAME;
                    that._i = id++;
                    that._l = undefined;
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                });
                redefineAll(C.prototype, {
                    delete: function _delete(key) {
                        if (!isObject(key)) return false;
                        var data = getWeak(key);
                        if (data === true) return uncaughtFrozenStore(validate(this, NAME))["delete"](key);
                        return data && $has(data, this._i) && delete data[this._i];
                    },
                    has: function has(key) {
                        if (!isObject(key)) return false;
                        var data = getWeak(key);
                        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
                        return data && $has(data, this._i);
                    }
                });
                return C;
            },
            def: function def(that, key, value) {
                var data = getWeak(anObject(key), true);
                if (data === true) uncaughtFrozenStore(that).set(key, value); else data[that._i] = value;
                return that;
            },
            ufstore: uncaughtFrozenStore
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        module.exports = function(it, TYPE) {
            if (!isObject(it) || it._t !== TYPE) throw TypeError("Incompatible receiver, " + TYPE + " required!");
            return it;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = __w_pdfjs_require__(8);
        var $export = __w_pdfjs_require__(7);
        var redefine = __w_pdfjs_require__(20);
        var redefineAll = __w_pdfjs_require__(98);
        var meta = __w_pdfjs_require__(108);
        var forOf = __w_pdfjs_require__(89);
        var anInstance = __w_pdfjs_require__(88);
        var isObject = __w_pdfjs_require__(13);
        var fails = __w_pdfjs_require__(16);
        var $iterDetect = __w_pdfjs_require__(69);
        var setToStringTag = __w_pdfjs_require__(60);
        var inheritIfRequired = __w_pdfjs_require__(112);
        module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
            var Base = global[NAME];
            var C = Base;
            var ADDER = IS_MAP ? "set" : "add";
            var proto = C && C.prototype;
            var O = {};
            var fixMethod = function fixMethod(KEY) {
                var fn = proto[KEY];
                redefine(proto, KEY, KEY == "delete" ? function(a) {
                    return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                } : KEY == "has" ? function has(a) {
                    return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                } : KEY == "get" ? function get(a) {
                    return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
                } : KEY == "add" ? function add(a) {
                    fn.call(this, a === 0 ? 0 : a);
                    return this;
                } : function set(a, b) {
                    fn.call(this, a === 0 ? 0 : a, b);
                    return this;
                });
            };
            if (typeof C != "function" || !(IS_WEAK || proto.forEach && !fails(function() {
                new C().entries().next();
            }))) {
                C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                redefineAll(C.prototype, methods);
                meta.NEED = true;
            } else {
                var instance = new C();
                var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
                var THROWS_ON_PRIMITIVES = fails(function() {
                    instance.has(1);
                });
                var ACCEPT_ITERABLES = $iterDetect(function(iter) {
                    new C(iter);
                });
                var BUGGY_ZERO = !IS_WEAK && fails(function() {
                    var $instance = new C();
                    var index = 5;
                    while (index--) {
                        $instance[ADDER](index, index);
                    }
                    return !$instance.has(-0);
                });
                if (!ACCEPT_ITERABLES) {
                    C = wrapper(function(target, iterable) {
                        anInstance(target, C, NAME);
                        var that = inheritIfRequired(new Base(), target, C);
                        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                        return that;
                    });
                    C.prototype = proto;
                    proto.constructor = C;
                }
                if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                    fixMethod("delete");
                    fixMethod("has");
                    IS_MAP && fixMethod("get");
                }
                if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
                if (IS_WEAK && proto.clear) delete proto.clear;
            }
            setToStringTag(C, NAME);
            O[NAME] = C;
            $export($export.G + $export.W + $export.F * (C != Base), O);
            if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
            return C;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        var setPrototypeOf = __w_pdfjs_require__(113).set;
        module.exports = function(that, target, C) {
            var S = target.constructor;
            var P;
            if (S !== C && typeof S == "function" && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                setPrototypeOf(that, P);
            }
            return that;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var isObject = __w_pdfjs_require__(13);
        var anObject = __w_pdfjs_require__(12);
        var check = function check(O, proto) {
            anObject(O);
            if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
        };
        module.exports = {
            set: Object.setPrototypeOf || ("__proto__" in {} ? function(test, buggy, set) {
                try {
                    set = __w_pdfjs_require__(26)(Function.call, __w_pdfjs_require__(114).f(Object.prototype, "__proto__").set, 2);
                    set(test, []);
                    buggy = !(test instanceof Array);
                } catch (e) {
                    buggy = true;
                }
                return function setPrototypeOf(O, proto) {
                    check(O, proto);
                    if (buggy) O.__proto__ = proto; else set(O, proto);
                    return O;
                };
            }({}, false) : undefined),
            check: check
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var pIE = __w_pdfjs_require__(74);
        var createDesc = __w_pdfjs_require__(19);
        var toIObject = __w_pdfjs_require__(43);
        var toPrimitive = __w_pdfjs_require__(18);
        var has = __w_pdfjs_require__(21);
        var IE8_DOM_DEFINE = __w_pdfjs_require__(14);
        var gOPD = Object.getOwnPropertyDescriptor;
        exports.f = __w_pdfjs_require__(15) ? gOPD : function getOwnPropertyDescriptor(O, P) {
            O = toIObject(O);
            P = toPrimitive(P, true);
            if (IE8_DOM_DEFINE) try {
                return gOPD(O, P);
            } catch (e) {}
            if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(116)("WeakMap");
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        module.exports = function(COLLECTION) {
            $export($export.S, COLLECTION, {
                of: function of() {
                    var length = arguments.length;
                    var A = new Array(length);
                    while (length--) {
                        A[length] = arguments[length];
                    }
                    return new this(A);
                }
            });
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(118)("WeakMap");
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var aFunction = __w_pdfjs_require__(27);
        var ctx = __w_pdfjs_require__(26);
        var forOf = __w_pdfjs_require__(89);
        module.exports = function(COLLECTION) {
            $export($export.S, COLLECTION, {
                from: function from(source) {
                    var mapFn = arguments[1];
                    var mapping, A, n, cb;
                    aFunction(this);
                    mapping = mapFn !== undefined;
                    if (mapping) aFunction(mapFn);
                    if (source == undefined) return new this();
                    A = [];
                    if (mapping) {
                        n = 0;
                        cb = ctx(mapFn, arguments[2], 2);
                        forOf(source, false, function(nextItem) {
                            A.push(cb(nextItem, n++));
                        });
                    } else {
                        forOf(source, false, A.push, A);
                    }
                    return new this(A);
                }
            });
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(83);
        __w_pdfjs_require__(84);
        __w_pdfjs_require__(120);
        __w_pdfjs_require__(121);
        __w_pdfjs_require__(122);
        module.exports = __w_pdfjs_require__(9).WeakSet;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var weak = __w_pdfjs_require__(109);
        var validate = __w_pdfjs_require__(110);
        var WEAK_SET = "WeakSet";
        __w_pdfjs_require__(111)(WEAK_SET, function(get) {
            return function WeakSet() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
        }, {
            add: function add(value) {
                return weak.def(validate(this, WEAK_SET), value, true);
            }
        }, weak, false, true);
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(116)("WeakSet");
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(118)("WeakSet");
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(124);
        module.exports = __w_pdfjs_require__(9).String.codePointAt;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var $at = __w_pdfjs_require__(49)(false);
        $export($export.P, "String", {
            codePointAt: function codePointAt(pos) {
                return $at(this, pos);
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(126);
        module.exports = __w_pdfjs_require__(9).String.fromCodePoint;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var toAbsoluteIndex = __w_pdfjs_require__(45);
        var fromCharCode = String.fromCharCode;
        var $fromCodePoint = String.fromCodePoint;
        $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), "String", {
            fromCodePoint: function fromCodePoint(x) {
                var res = [];
                var aLen = arguments.length;
                var i = 0;
                var code;
                while (aLen > i) {
                    code = +arguments[i++];
                    if (toAbsoluteIndex(code, 1114111) !== code) throw RangeError(code + " is not a valid code point");
                    res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320));
                }
                return res.join("");
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(128);
        __w_pdfjs_require__(83);
        module.exports = __w_pdfjs_require__(9).Symbol;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        var global = __w_pdfjs_require__(8);
        var has = __w_pdfjs_require__(21);
        var DESCRIPTORS = __w_pdfjs_require__(15);
        var $export = __w_pdfjs_require__(7);
        var redefine = __w_pdfjs_require__(20);
        var META = __w_pdfjs_require__(108).KEY;
        var $fails = __w_pdfjs_require__(16);
        var shared = __w_pdfjs_require__(24);
        var setToStringTag = __w_pdfjs_require__(60);
        var uid = __w_pdfjs_require__(22);
        var wks = __w_pdfjs_require__(33);
        var wksExt = __w_pdfjs_require__(129);
        var wksDefine = __w_pdfjs_require__(130);
        var enumKeys = __w_pdfjs_require__(131);
        var isArray = __w_pdfjs_require__(107);
        var anObject = __w_pdfjs_require__(12);
        var isObject = __w_pdfjs_require__(13);
        var toIObject = __w_pdfjs_require__(43);
        var toPrimitive = __w_pdfjs_require__(18);
        var createDesc = __w_pdfjs_require__(19);
        var _create = __w_pdfjs_require__(53);
        var gOPNExt = __w_pdfjs_require__(132);
        var $GOPD = __w_pdfjs_require__(114);
        var $DP = __w_pdfjs_require__(11);
        var $keys = __w_pdfjs_require__(55);
        var gOPD = $GOPD.f;
        var dP = $DP.f;
        var gOPN = gOPNExt.f;
        var $Symbol = global.Symbol;
        var $JSON = global.JSON;
        var _stringify = $JSON && $JSON.stringify;
        var PROTOTYPE = "prototype";
        var HIDDEN = wks("_hidden");
        var TO_PRIMITIVE = wks("toPrimitive");
        var isEnum = {}.propertyIsEnumerable;
        var SymbolRegistry = shared("symbol-registry");
        var AllSymbols = shared("symbols");
        var OPSymbols = shared("op-symbols");
        var ObjectProto = Object[PROTOTYPE];
        var USE_NATIVE = typeof $Symbol == "function";
        var QObject = global.QObject;
        var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
        var setSymbolDesc = DESCRIPTORS && $fails(function() {
            return _create(dP({}, "a", {
                get: function get() {
                    return dP(this, "a", {
                        value: 7
                    }).a;
                }
            })).a != 7;
        }) ? function(it, key, D) {
            var protoDesc = gOPD(ObjectProto, key);
            if (protoDesc) delete ObjectProto[key];
            dP(it, key, D);
            if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
        } : dP;
        var wrap = function wrap(tag) {
            var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
            sym._k = tag;
            return sym;
        };
        var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == "symbol" ? function(it) {
            return _typeof(it) == "symbol";
        } : function(it) {
            return it instanceof $Symbol;
        };
        var $defineProperty = function defineProperty(it, key, D) {
            if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
            anObject(it);
            key = toPrimitive(key, true);
            anObject(D);
            if (has(AllSymbols, key)) {
                if (!D.enumerable) {
                    if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
                    it[HIDDEN][key] = true;
                } else {
                    if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                    D = _create(D, {
                        enumerable: createDesc(0, false)
                    });
                }
                return setSymbolDesc(it, key, D);
            }
            return dP(it, key, D);
        };
        var $defineProperties = function defineProperties(it, P) {
            anObject(it);
            var keys = enumKeys(P = toIObject(P));
            var i = 0;
            var l = keys.length;
            var key;
            while (l > i) {
                $defineProperty(it, key = keys[i++], P[key]);
            }
            return it;
        };
        var $create = function create(it, P) {
            return P === undefined ? _create(it) : $defineProperties(_create(it), P);
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(key) {
            var E = isEnum.call(this, key = toPrimitive(key, true));
            if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
            return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
            it = toIObject(it);
            key = toPrimitive(key, true);
            if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
            var D = gOPD(it, key);
            if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
            return D;
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(it) {
            var names = gOPN(toIObject(it));
            var result = [];
            var i = 0;
            var key;
            while (names.length > i) {
                if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
            }
            return result;
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
            var IS_OP = it === ObjectProto;
            var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
            var result = [];
            var i = 0;
            var key;
            while (names.length > i) {
                if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
            }
            return result;
        };
        if (!USE_NATIVE) {
            $Symbol = function _Symbol() {
                if (this instanceof $Symbol) throw TypeError("Symbol is not a constructor!");
                var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
                var $set = function $set(value) {
                    if (this === ObjectProto) $set.call(OPSymbols, value);
                    if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                    setSymbolDesc(this, tag, createDesc(1, value));
                };
                if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
                    configurable: true,
                    set: $set
                });
                return wrap(tag);
            };
            redefine($Symbol[PROTOTYPE], "toString", function toString() {
                return this._k;
            });
            $GOPD.f = $getOwnPropertyDescriptor;
            $DP.f = $defineProperty;
            __w_pdfjs_require__(133).f = gOPNExt.f = $getOwnPropertyNames;
            __w_pdfjs_require__(74).f = $propertyIsEnumerable;
            __w_pdfjs_require__(73).f = $getOwnPropertySymbols;
            if (DESCRIPTORS && !__w_pdfjs_require__(25)) {
                redefine(ObjectProto, "propertyIsEnumerable", $propertyIsEnumerable, true);
            }
            wksExt.f = function(name) {
                return wrap(wks(name));
            };
        }
        $export($export.G + $export.W + $export.F * !USE_NATIVE, {
            Symbol: $Symbol
        });
        for (var es6Symbols = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), j = 0; es6Symbols.length > j; ) {
            wks(es6Symbols[j++]);
        }
        for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k; ) {
            wksDefine(wellKnownSymbols[k++]);
        }
        $export($export.S + $export.F * !USE_NATIVE, "Symbol", {
            for: function _for(key) {
                return has(SymbolRegistry, key += "") ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
            },
            keyFor: function keyFor(sym) {
                if (!isSymbol(sym)) throw TypeError(sym + " is not a symbol!");
                for (var key in SymbolRegistry) {
                    if (SymbolRegistry[key] === sym) return key;
                }
            },
            useSetter: function useSetter() {
                setter = true;
            },
            useSimple: function useSimple() {
                setter = false;
            }
        });
        $export($export.S + $export.F * !USE_NATIVE, "Object", {
            create: $create,
            defineProperty: $defineProperty,
            defineProperties: $defineProperties,
            getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
            getOwnPropertyNames: $getOwnPropertyNames,
            getOwnPropertySymbols: $getOwnPropertySymbols
        });
        $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
            var S = $Symbol();
            return _stringify([ S ]) != "[null]" || _stringify({
                a: S
            }) != "{}" || _stringify(Object(S)) != "{}";
        })), "JSON", {
            stringify: function stringify(it) {
                var args = [ it ];
                var i = 1;
                var replacer, $replacer;
                while (arguments.length > i) {
                    args.push(arguments[i++]);
                }
                $replacer = replacer = args[1];
                if (!isObject(replacer) && it === undefined || isSymbol(it)) return;
                if (!isArray(replacer)) replacer = function replacer(key, value) {
                    if (typeof $replacer == "function") value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value;
                };
                args[1] = replacer;
                return _stringify.apply($JSON, args);
            }
        });
        $Symbol[PROTOTYPE][TO_PRIMITIVE] || __w_pdfjs_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
        setToStringTag($Symbol, "Symbol");
        setToStringTag(Math, "Math", true);
        setToStringTag(global.JSON, "JSON", true);
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        exports.f = __w_pdfjs_require__(33);
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var global = __w_pdfjs_require__(8);
        var core = __w_pdfjs_require__(9);
        var LIBRARY = __w_pdfjs_require__(25);
        var wksExt = __w_pdfjs_require__(129);
        var defineProperty = __w_pdfjs_require__(11).f;
        module.exports = function(name) {
            var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
            if (name.charAt(0) != "_" && !(name in $Symbol)) defineProperty($Symbol, name, {
                value: wksExt.f(name)
            });
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var getKeys = __w_pdfjs_require__(55);
        var gOPS = __w_pdfjs_require__(73);
        var pIE = __w_pdfjs_require__(74);
        module.exports = function(it) {
            var result = getKeys(it);
            var getSymbols = gOPS.f;
            if (getSymbols) {
                var symbols = getSymbols(it);
                var isEnum = pIE.f;
                var i = 0;
                var key;
                while (symbols.length > i) {
                    if (isEnum.call(it, key = symbols[i++])) result.push(key);
                }
            }
            return result;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        var toIObject = __w_pdfjs_require__(43);
        var gOPN = __w_pdfjs_require__(133).f;
        var toString = {}.toString;
        var windowNames = (typeof window === "undefined" ? "undefined" : _typeof(window)) == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        var getWindowNames = function getWindowNames(it) {
            try {
                return gOPN(it);
            } catch (e) {
                return windowNames.slice();
            }
        };
        module.exports.f = function getOwnPropertyNames(it) {
            return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : gOPN(toIObject(it));
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $keys = __w_pdfjs_require__(56);
        var hiddenKeys = __w_pdfjs_require__(58).concat("length", "prototype");
        exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
            return $keys(O, hiddenKeys);
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(135);
        module.exports = __w_pdfjs_require__(9).String.padStart;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var $pad = __w_pdfjs_require__(136);
        var userAgent = __w_pdfjs_require__(96);
        var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
        $export($export.P + $export.F * WEBKIT_BUG, "String", {
            padStart: function padStart(maxLength) {
                return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var toLength = __w_pdfjs_require__(28);
        var repeat = __w_pdfjs_require__(137);
        var defined = __w_pdfjs_require__(34);
        module.exports = function(that, maxLength, fillString, left) {
            var S = String(defined(that));
            var stringLength = S.length;
            var fillStr = fillString === undefined ? " " : String(fillString);
            var intMaxLength = toLength(maxLength);
            if (intMaxLength <= stringLength || fillStr == "") return S;
            var fillLen = intMaxLength - stringLength;
            var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
            if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
            return left ? stringFiller + S : S + stringFiller;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var toInteger = __w_pdfjs_require__(29);
        var defined = __w_pdfjs_require__(34);
        module.exports = function repeat(count) {
            var str = String(defined(this));
            var res = "";
            var n = toInteger(count);
            if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
            for (;n > 0; (n >>>= 1) && (str += str)) {
                if (n & 1) res += str;
            }
            return res;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(139);
        module.exports = __w_pdfjs_require__(9).String.padEnd;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var $pad = __w_pdfjs_require__(136);
        var userAgent = __w_pdfjs_require__(96);
        var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
        $export($export.P + $export.F * WEBKIT_BUG, "String", {
            padEnd: function padEnd(maxLength) {
                return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        __w_pdfjs_require__(141);
        module.exports = __w_pdfjs_require__(9).Object.values;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var $export = __w_pdfjs_require__(7);
        var $values = __w_pdfjs_require__(142)(false);
        $export($export.S, "Object", {
            values: function values(it) {
                return $values(it);
            }
        });
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var getKeys = __w_pdfjs_require__(55);
        var toIObject = __w_pdfjs_require__(43);
        var isEnum = __w_pdfjs_require__(74).f;
        module.exports = function(isEntries) {
            return function(it) {
                var O = toIObject(it);
                var keys = getKeys(O);
                var length = keys.length;
                var i = 0;
                var result = [];
                var key;
                while (length > i) {
                    if (isEnum.call(O, key = keys[i++])) {
                        result.push(isEntries ? [ key, O[key] ] : O[key]);
                    }
                }
                return result;
            };
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        {
            var isReadableStreamSupported = false;
            if (typeof ReadableStream !== "undefined") {
                try {
                    new ReadableStream({
                        start: function start(controller) {
                            controller.close();
                        }
                    });
                    isReadableStreamSupported = true;
                } catch (e) {}
            }
            if (isReadableStreamSupported) {
                exports.ReadableStream = ReadableStream;
            } else {
                exports.ReadableStream = __w_pdfjs_require__(144).ReadableStream;
            }
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        function _typeof2(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof2 = function _typeof2(obj) {
                    return typeof obj;
                };
            } else {
                _typeof2 = function _typeof2(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof2(obj);
        }
        (function(e, a) {
            for (var i in a) {
                e[i] = a[i];
            }
        })(exports, function(modules) {
            var installedModules = {};
            function __w_pdfjs_require__(moduleId) {
                if (installedModules[moduleId]) return installedModules[moduleId].exports;
                var module = installedModules[moduleId] = {
                    i: moduleId,
                    l: false,
                    exports: {}
                };
                modules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);
                module.l = true;
                return module.exports;
            }
            __w_pdfjs_require__.m = modules;
            __w_pdfjs_require__.c = installedModules;
            __w_pdfjs_require__.i = function(value) {
                return value;
            };
            __w_pdfjs_require__.d = function(exports, name, getter) {
                if (!__w_pdfjs_require__.o(exports, name)) {
                    Object.defineProperty(exports, name, {
                        configurable: false,
                        enumerable: true,
                        get: getter
                    });
                }
            };
            __w_pdfjs_require__.n = function(module) {
                var getter = module && module.__esModule ? function getDefault() {
                    return module["default"];
                } : function getModuleExports() {
                    return module;
                };
                __w_pdfjs_require__.d(getter, "a", getter);
                return getter;
            };
            __w_pdfjs_require__.o = function(object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
            };
            __w_pdfjs_require__.p = "";
            return __w_pdfjs_require__(__w_pdfjs_require__.s = 7);
        }([ function(module, exports, __w_pdfjs_require__) {
            "use strict";
            var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function(obj) {
                return _typeof2(obj);
            } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
            };
            var _require = __w_pdfjs_require__(1), assert = _require.assert;
            function IsPropertyKey(argument) {
                return typeof argument === "string" || (typeof argument === "undefined" ? "undefined" : _typeof(argument)) === "symbol";
            }
            exports.typeIsObject = function(x) {
                return (typeof x === "undefined" ? "undefined" : _typeof(x)) === "object" && x !== null || typeof x === "function";
            };
            exports.createDataProperty = function(o, p, v) {
                assert(exports.typeIsObject(o));
                Object.defineProperty(o, p, {
                    value: v,
                    writable: true,
                    enumerable: true,
                    configurable: true
                });
            };
            exports.createArrayFromList = function(elements) {
                return elements.slice();
            };
            exports.ArrayBufferCopy = function(dest, destOffset, src, srcOffset, n) {
                new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
            };
            exports.CreateIterResultObject = function(value, done) {
                assert(typeof done === "boolean");
                var obj = {};
                Object.defineProperty(obj, "value", {
                    value: value,
                    enumerable: true,
                    writable: true,
                    configurable: true
                });
                Object.defineProperty(obj, "done", {
                    value: done,
                    enumerable: true,
                    writable: true,
                    configurable: true
                });
                return obj;
            };
            exports.IsFiniteNonNegativeNumber = function(v) {
                if (Number.isNaN(v)) {
                    return false;
                }
                if (v === Infinity) {
                    return false;
                }
                if (v < 0) {
                    return false;
                }
                return true;
            };
            function Call(F, V, args) {
                if (typeof F !== "function") {
                    throw new TypeError("Argument is not a function");
                }
                return Function.prototype.apply.call(F, V, args);
            }
            exports.InvokeOrNoop = function(O, P, args) {
                assert(O !== undefined);
                assert(IsPropertyKey(P));
                assert(Array.isArray(args));
                var method = O[P];
                if (method === undefined) {
                    return undefined;
                }
                return Call(method, O, args);
            };
            exports.PromiseInvokeOrNoop = function(O, P, args) {
                assert(O !== undefined);
                assert(IsPropertyKey(P));
                assert(Array.isArray(args));
                try {
                    return Promise.resolve(exports.InvokeOrNoop(O, P, args));
                } catch (returnValueE) {
                    return Promise.reject(returnValueE);
                }
            };
            exports.PromiseInvokeOrPerformFallback = function(O, P, args, F, argsF) {
                assert(O !== undefined);
                assert(IsPropertyKey(P));
                assert(Array.isArray(args));
                assert(Array.isArray(argsF));
                var method = void 0;
                try {
                    method = O[P];
                } catch (methodE) {
                    return Promise.reject(methodE);
                }
                if (method === undefined) {
                    return F.apply(null, argsF);
                }
                try {
                    return Promise.resolve(Call(method, O, args));
                } catch (e) {
                    return Promise.reject(e);
                }
            };
            exports.TransferArrayBuffer = function(O) {
                return O.slice();
            };
            exports.ValidateAndNormalizeHighWaterMark = function(highWaterMark) {
                highWaterMark = Number(highWaterMark);
                if (Number.isNaN(highWaterMark) || highWaterMark < 0) {
                    throw new RangeError("highWaterMark property of a queuing strategy must be non-negative and non-NaN");
                }
                return highWaterMark;
            };
            exports.ValidateAndNormalizeQueuingStrategy = function(size, highWaterMark) {
                if (size !== undefined && typeof size !== "function") {
                    throw new TypeError("size property of a queuing strategy must be a function");
                }
                highWaterMark = exports.ValidateAndNormalizeHighWaterMark(highWaterMark);
                return {
                    size: size,
                    highWaterMark: highWaterMark
                };
            };
        }, function(module, exports, __w_pdfjs_require__) {
            "use strict";
            function rethrowAssertionErrorRejection(e) {
                if (e && e.constructor === AssertionError) {
                    setTimeout(function() {
                        throw e;
                    }, 0);
                }
            }
            function AssertionError(message) {
                this.name = "AssertionError";
                this.message = message || "";
                this.stack = new Error().stack;
            }
            AssertionError.prototype = Object.create(Error.prototype);
            AssertionError.prototype.constructor = AssertionError;
            function assert(value, message) {
                if (!value) {
                    throw new AssertionError(message);
                }
            }
            module.exports = {
                rethrowAssertionErrorRejection: rethrowAssertionErrorRejection,
                AssertionError: AssertionError,
                assert: assert
            };
        }, function(module, exports, __w_pdfjs_require__) {
            "use strict";
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var _require = __w_pdfjs_require__(0), InvokeOrNoop = _require.InvokeOrNoop, PromiseInvokeOrNoop = _require.PromiseInvokeOrNoop, ValidateAndNormalizeQueuingStrategy = _require.ValidateAndNormalizeQueuingStrategy, typeIsObject = _require.typeIsObject;
            var _require2 = __w_pdfjs_require__(1), assert = _require2.assert, rethrowAssertionErrorRejection = _require2.rethrowAssertionErrorRejection;
            var _require3 = __w_pdfjs_require__(3), DequeueValue = _require3.DequeueValue, EnqueueValueWithSize = _require3.EnqueueValueWithSize, PeekQueueValue = _require3.PeekQueueValue, ResetQueue = _require3.ResetQueue;
            var WritableStream = function() {
                function WritableStream() {
                    var underlyingSink = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, size = _ref.size, _ref$highWaterMark = _ref.highWaterMark, highWaterMark = _ref$highWaterMark === undefined ? 1 : _ref$highWaterMark;
                    _classCallCheck(this, WritableStream);
                    this._state = "writable";
                    this._storedError = undefined;
                    this._writer = undefined;
                    this._writableStreamController = undefined;
                    this._writeRequests = [];
                    this._inFlightWriteRequest = undefined;
                    this._closeRequest = undefined;
                    this._inFlightCloseRequest = undefined;
                    this._pendingAbortRequest = undefined;
                    this._backpressure = false;
                    var type = underlyingSink.type;
                    if (type !== undefined) {
                        throw new RangeError("Invalid type is specified");
                    }
                    this._writableStreamController = new WritableStreamDefaultController(this, underlyingSink, size, highWaterMark);
                    this._writableStreamController.__startSteps();
                }
                _createClass(WritableStream, [ {
                    key: "abort",
                    value: function abort(reason) {
                        if (IsWritableStream(this) === false) {
                            return Promise.reject(streamBrandCheckException("abort"));
                        }
                        if (IsWritableStreamLocked(this) === true) {
                            return Promise.reject(new TypeError("Cannot abort a stream that already has a writer"));
                        }
                        return WritableStreamAbort(this, reason);
                    }
                }, {
                    key: "getWriter",
                    value: function getWriter() {
                        if (IsWritableStream(this) === false) {
                            throw streamBrandCheckException("getWriter");
                        }
                        return AcquireWritableStreamDefaultWriter(this);
                    }
                }, {
                    key: "locked",
                    get: function get() {
                        if (IsWritableStream(this) === false) {
                            throw streamBrandCheckException("locked");
                        }
                        return IsWritableStreamLocked(this);
                    }
                } ]);
                return WritableStream;
            }();
            module.exports = {
                AcquireWritableStreamDefaultWriter: AcquireWritableStreamDefaultWriter,
                IsWritableStream: IsWritableStream,
                IsWritableStreamLocked: IsWritableStreamLocked,
                WritableStream: WritableStream,
                WritableStreamAbort: WritableStreamAbort,
                WritableStreamDefaultControllerError: WritableStreamDefaultControllerError,
                WritableStreamDefaultWriterCloseWithErrorPropagation: WritableStreamDefaultWriterCloseWithErrorPropagation,
                WritableStreamDefaultWriterRelease: WritableStreamDefaultWriterRelease,
                WritableStreamDefaultWriterWrite: WritableStreamDefaultWriterWrite,
                WritableStreamCloseQueuedOrInFlight: WritableStreamCloseQueuedOrInFlight
            };
            function AcquireWritableStreamDefaultWriter(stream) {
                return new WritableStreamDefaultWriter(stream);
            }
            function IsWritableStream(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_writableStreamController")) {
                    return false;
                }
                return true;
            }
            function IsWritableStreamLocked(stream) {
                assert(IsWritableStream(stream) === true, "IsWritableStreamLocked should only be used on known writable streams");
                if (stream._writer === undefined) {
                    return false;
                }
                return true;
            }
            function WritableStreamAbort(stream, reason) {
                var state = stream._state;
                if (state === "closed") {
                    return Promise.resolve(undefined);
                }
                if (state === "errored") {
                    return Promise.reject(stream._storedError);
                }
                var error = new TypeError("Requested to abort");
                if (stream._pendingAbortRequest !== undefined) {
                    return Promise.reject(error);
                }
                assert(state === "writable" || state === "erroring", "state must be writable or erroring");
                var wasAlreadyErroring = false;
                if (state === "erroring") {
                    wasAlreadyErroring = true;
                    reason = undefined;
                }
                var promise = new Promise(function(resolve, reject) {
                    stream._pendingAbortRequest = {
                        _resolve: resolve,
                        _reject: reject,
                        _reason: reason,
                        _wasAlreadyErroring: wasAlreadyErroring
                    };
                });
                if (wasAlreadyErroring === false) {
                    WritableStreamStartErroring(stream, error);
                }
                return promise;
            }
            function WritableStreamAddWriteRequest(stream) {
                assert(IsWritableStreamLocked(stream) === true);
                assert(stream._state === "writable");
                var promise = new Promise(function(resolve, reject) {
                    var writeRequest = {
                        _resolve: resolve,
                        _reject: reject
                    };
                    stream._writeRequests.push(writeRequest);
                });
                return promise;
            }
            function WritableStreamDealWithRejection(stream, error) {
                var state = stream._state;
                if (state === "writable") {
                    WritableStreamStartErroring(stream, error);
                    return;
                }
                assert(state === "erroring");
                WritableStreamFinishErroring(stream);
            }
            function WritableStreamStartErroring(stream, reason) {
                assert(stream._storedError === undefined, "stream._storedError === undefined");
                assert(stream._state === "writable", "state must be writable");
                var controller = stream._writableStreamController;
                assert(controller !== undefined, "controller must not be undefined");
                stream._state = "erroring";
                stream._storedError = reason;
                var writer = stream._writer;
                if (writer !== undefined) {
                    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
                }
                if (WritableStreamHasOperationMarkedInFlight(stream) === false && controller._started === true) {
                    WritableStreamFinishErroring(stream);
                }
            }
            function WritableStreamFinishErroring(stream) {
                assert(stream._state === "erroring", "stream._state === erroring");
                assert(WritableStreamHasOperationMarkedInFlight(stream) === false, "WritableStreamHasOperationMarkedInFlight(stream) === false");
                stream._state = "errored";
                stream._writableStreamController.__errorSteps();
                var storedError = stream._storedError;
                for (var i = 0; i < stream._writeRequests.length; i++) {
                    var writeRequest = stream._writeRequests[i];
                    writeRequest._reject(storedError);
                }
                stream._writeRequests = [];
                if (stream._pendingAbortRequest === undefined) {
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                    return;
                }
                var abortRequest = stream._pendingAbortRequest;
                stream._pendingAbortRequest = undefined;
                if (abortRequest._wasAlreadyErroring === true) {
                    abortRequest._reject(storedError);
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                    return;
                }
                var promise = stream._writableStreamController.__abortSteps(abortRequest._reason);
                promise.then(function() {
                    abortRequest._resolve();
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                }, function(reason) {
                    abortRequest._reject(reason);
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                });
            }
            function WritableStreamFinishInFlightWrite(stream) {
                assert(stream._inFlightWriteRequest !== undefined);
                stream._inFlightWriteRequest._resolve(undefined);
                stream._inFlightWriteRequest = undefined;
            }
            function WritableStreamFinishInFlightWriteWithError(stream, error) {
                assert(stream._inFlightWriteRequest !== undefined);
                stream._inFlightWriteRequest._reject(error);
                stream._inFlightWriteRequest = undefined;
                assert(stream._state === "writable" || stream._state === "erroring");
                WritableStreamDealWithRejection(stream, error);
            }
            function WritableStreamFinishInFlightClose(stream) {
                assert(stream._inFlightCloseRequest !== undefined);
                stream._inFlightCloseRequest._resolve(undefined);
                stream._inFlightCloseRequest = undefined;
                var state = stream._state;
                assert(state === "writable" || state === "erroring");
                if (state === "erroring") {
                    stream._storedError = undefined;
                    if (stream._pendingAbortRequest !== undefined) {
                        stream._pendingAbortRequest._resolve();
                        stream._pendingAbortRequest = undefined;
                    }
                }
                stream._state = "closed";
                var writer = stream._writer;
                if (writer !== undefined) {
                    defaultWriterClosedPromiseResolve(writer);
                }
                assert(stream._pendingAbortRequest === undefined, "stream._pendingAbortRequest === undefined");
                assert(stream._storedError === undefined, "stream._storedError === undefined");
            }
            function WritableStreamFinishInFlightCloseWithError(stream, error) {
                assert(stream._inFlightCloseRequest !== undefined);
                stream._inFlightCloseRequest._reject(error);
                stream._inFlightCloseRequest = undefined;
                assert(stream._state === "writable" || stream._state === "erroring");
                if (stream._pendingAbortRequest !== undefined) {
                    stream._pendingAbortRequest._reject(error);
                    stream._pendingAbortRequest = undefined;
                }
                WritableStreamDealWithRejection(stream, error);
            }
            function WritableStreamCloseQueuedOrInFlight(stream) {
                if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {
                    return false;
                }
                return true;
            }
            function WritableStreamHasOperationMarkedInFlight(stream) {
                if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {
                    return false;
                }
                return true;
            }
            function WritableStreamMarkCloseRequestInFlight(stream) {
                assert(stream._inFlightCloseRequest === undefined);
                assert(stream._closeRequest !== undefined);
                stream._inFlightCloseRequest = stream._closeRequest;
                stream._closeRequest = undefined;
            }
            function WritableStreamMarkFirstWriteRequestInFlight(stream) {
                assert(stream._inFlightWriteRequest === undefined, "there must be no pending write request");
                assert(stream._writeRequests.length !== 0, "writeRequests must not be empty");
                stream._inFlightWriteRequest = stream._writeRequests.shift();
            }
            function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
                assert(stream._state === "errored", '_stream_.[[state]] is `"errored"`');
                if (stream._closeRequest !== undefined) {
                    assert(stream._inFlightCloseRequest === undefined);
                    stream._closeRequest._reject(stream._storedError);
                    stream._closeRequest = undefined;
                }
                var writer = stream._writer;
                if (writer !== undefined) {
                    defaultWriterClosedPromiseReject(writer, stream._storedError);
                    writer._closedPromise["catch"](function() {});
                }
            }
            function WritableStreamUpdateBackpressure(stream, backpressure) {
                assert(stream._state === "writable");
                assert(WritableStreamCloseQueuedOrInFlight(stream) === false);
                var writer = stream._writer;
                if (writer !== undefined && backpressure !== stream._backpressure) {
                    if (backpressure === true) {
                        defaultWriterReadyPromiseReset(writer);
                    } else {
                        assert(backpressure === false);
                        defaultWriterReadyPromiseResolve(writer);
                    }
                }
                stream._backpressure = backpressure;
            }
            var WritableStreamDefaultWriter = function() {
                function WritableStreamDefaultWriter(stream) {
                    _classCallCheck(this, WritableStreamDefaultWriter);
                    if (IsWritableStream(stream) === false) {
                        throw new TypeError("WritableStreamDefaultWriter can only be constructed with a WritableStream instance");
                    }
                    if (IsWritableStreamLocked(stream) === true) {
                        throw new TypeError("This stream has already been locked for exclusive writing by another writer");
                    }
                    this._ownerWritableStream = stream;
                    stream._writer = this;
                    var state = stream._state;
                    if (state === "writable") {
                        if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._backpressure === true) {
                            defaultWriterReadyPromiseInitialize(this);
                        } else {
                            defaultWriterReadyPromiseInitializeAsResolved(this);
                        }
                        defaultWriterClosedPromiseInitialize(this);
                    } else if (state === "erroring") {
                        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
                        this._readyPromise["catch"](function() {});
                        defaultWriterClosedPromiseInitialize(this);
                    } else if (state === "closed") {
                        defaultWriterReadyPromiseInitializeAsResolved(this);
                        defaultWriterClosedPromiseInitializeAsResolved(this);
                    } else {
                        assert(state === "errored", "state must be errored");
                        var storedError = stream._storedError;
                        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
                        this._readyPromise["catch"](function() {});
                        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
                        this._closedPromise["catch"](function() {});
                    }
                }
                _createClass(WritableStreamDefaultWriter, [ {
                    key: "abort",
                    value: function abort(reason) {
                        if (IsWritableStreamDefaultWriter(this) === false) {
                            return Promise.reject(defaultWriterBrandCheckException("abort"));
                        }
                        if (this._ownerWritableStream === undefined) {
                            return Promise.reject(defaultWriterLockException("abort"));
                        }
                        return WritableStreamDefaultWriterAbort(this, reason);
                    }
                }, {
                    key: "close",
                    value: function close() {
                        if (IsWritableStreamDefaultWriter(this) === false) {
                            return Promise.reject(defaultWriterBrandCheckException("close"));
                        }
                        var stream = this._ownerWritableStream;
                        if (stream === undefined) {
                            return Promise.reject(defaultWriterLockException("close"));
                        }
                        if (WritableStreamCloseQueuedOrInFlight(stream) === true) {
                            return Promise.reject(new TypeError("cannot close an already-closing stream"));
                        }
                        return WritableStreamDefaultWriterClose(this);
                    }
                }, {
                    key: "releaseLock",
                    value: function releaseLock() {
                        if (IsWritableStreamDefaultWriter(this) === false) {
                            throw defaultWriterBrandCheckException("releaseLock");
                        }
                        var stream = this._ownerWritableStream;
                        if (stream === undefined) {
                            return;
                        }
                        assert(stream._writer !== undefined);
                        WritableStreamDefaultWriterRelease(this);
                    }
                }, {
                    key: "write",
                    value: function write(chunk) {
                        if (IsWritableStreamDefaultWriter(this) === false) {
                            return Promise.reject(defaultWriterBrandCheckException("write"));
                        }
                        if (this._ownerWritableStream === undefined) {
                            return Promise.reject(defaultWriterLockException("write to"));
                        }
                        return WritableStreamDefaultWriterWrite(this, chunk);
                    }
                }, {
                    key: "closed",
                    get: function get() {
                        if (IsWritableStreamDefaultWriter(this) === false) {
                            return Promise.reject(defaultWriterBrandCheckException("closed"));
                        }
                        return this._closedPromise;
                    }
                }, {
                    key: "desiredSize",
                    get: function get() {
                        if (IsWritableStreamDefaultWriter(this) === false) {
                            throw defaultWriterBrandCheckException("desiredSize");
                        }
                        if (this._ownerWritableStream === undefined) {
                            throw defaultWriterLockException("desiredSize");
                        }
                        return WritableStreamDefaultWriterGetDesiredSize(this);
                    }
                }, {
                    key: "ready",
                    get: function get() {
                        if (IsWritableStreamDefaultWriter(this) === false) {
                            return Promise.reject(defaultWriterBrandCheckException("ready"));
                        }
                        return this._readyPromise;
                    }
                } ]);
                return WritableStreamDefaultWriter;
            }();
            function IsWritableStreamDefaultWriter(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_ownerWritableStream")) {
                    return false;
                }
                return true;
            }
            function WritableStreamDefaultWriterAbort(writer, reason) {
                var stream = writer._ownerWritableStream;
                assert(stream !== undefined);
                return WritableStreamAbort(stream, reason);
            }
            function WritableStreamDefaultWriterClose(writer) {
                var stream = writer._ownerWritableStream;
                assert(stream !== undefined);
                var state = stream._state;
                if (state === "closed" || state === "errored") {
                    return Promise.reject(new TypeError("The stream (in " + state + " state) is not in the writable state and cannot be closed"));
                }
                assert(state === "writable" || state === "erroring");
                assert(WritableStreamCloseQueuedOrInFlight(stream) === false);
                var promise = new Promise(function(resolve, reject) {
                    var closeRequest = {
                        _resolve: resolve,
                        _reject: reject
                    };
                    stream._closeRequest = closeRequest;
                });
                if (stream._backpressure === true && state === "writable") {
                    defaultWriterReadyPromiseResolve(writer);
                }
                WritableStreamDefaultControllerClose(stream._writableStreamController);
                return promise;
            }
            function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
                var stream = writer._ownerWritableStream;
                assert(stream !== undefined);
                var state = stream._state;
                if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === "closed") {
                    return Promise.resolve();
                }
                if (state === "errored") {
                    return Promise.reject(stream._storedError);
                }
                assert(state === "writable" || state === "erroring");
                return WritableStreamDefaultWriterClose(writer);
            }
            function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
                if (writer._closedPromiseState === "pending") {
                    defaultWriterClosedPromiseReject(writer, error);
                } else {
                    defaultWriterClosedPromiseResetToRejected(writer, error);
                }
                writer._closedPromise["catch"](function() {});
            }
            function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
                if (writer._readyPromiseState === "pending") {
                    defaultWriterReadyPromiseReject(writer, error);
                } else {
                    defaultWriterReadyPromiseResetToRejected(writer, error);
                }
                writer._readyPromise["catch"](function() {});
            }
            function WritableStreamDefaultWriterGetDesiredSize(writer) {
                var stream = writer._ownerWritableStream;
                var state = stream._state;
                if (state === "errored" || state === "erroring") {
                    return null;
                }
                if (state === "closed") {
                    return 0;
                }
                return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
            }
            function WritableStreamDefaultWriterRelease(writer) {
                var stream = writer._ownerWritableStream;
                assert(stream !== undefined);
                assert(stream._writer === writer);
                var releasedError = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
                WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
                WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
                stream._writer = undefined;
                writer._ownerWritableStream = undefined;
            }
            function WritableStreamDefaultWriterWrite(writer, chunk) {
                var stream = writer._ownerWritableStream;
                assert(stream !== undefined);
                var controller = stream._writableStreamController;
                var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
                if (stream !== writer._ownerWritableStream) {
                    return Promise.reject(defaultWriterLockException("write to"));
                }
                var state = stream._state;
                if (state === "errored") {
                    return Promise.reject(stream._storedError);
                }
                if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === "closed") {
                    return Promise.reject(new TypeError("The stream is closing or closed and cannot be written to"));
                }
                if (state === "erroring") {
                    return Promise.reject(stream._storedError);
                }
                assert(state === "writable");
                var promise = WritableStreamAddWriteRequest(stream);
                WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
                return promise;
            }
            var WritableStreamDefaultController = function() {
                function WritableStreamDefaultController(stream, underlyingSink, size, highWaterMark) {
                    _classCallCheck(this, WritableStreamDefaultController);
                    if (IsWritableStream(stream) === false) {
                        throw new TypeError("WritableStreamDefaultController can only be constructed with a WritableStream instance");
                    }
                    if (stream._writableStreamController !== undefined) {
                        throw new TypeError("WritableStreamDefaultController instances can only be created by the WritableStream constructor");
                    }
                    this._controlledWritableStream = stream;
                    this._underlyingSink = underlyingSink;
                    this._queue = undefined;
                    this._queueTotalSize = undefined;
                    ResetQueue(this);
                    this._started = false;
                    var normalizedStrategy = ValidateAndNormalizeQueuingStrategy(size, highWaterMark);
                    this._strategySize = normalizedStrategy.size;
                    this._strategyHWM = normalizedStrategy.highWaterMark;
                    var backpressure = WritableStreamDefaultControllerGetBackpressure(this);
                    WritableStreamUpdateBackpressure(stream, backpressure);
                }
                _createClass(WritableStreamDefaultController, [ {
                    key: "error",
                    value: function error(e) {
                        if (IsWritableStreamDefaultController(this) === false) {
                            throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");
                        }
                        var state = this._controlledWritableStream._state;
                        if (state !== "writable") {
                            return;
                        }
                        WritableStreamDefaultControllerError(this, e);
                    }
                }, {
                    key: "__abortSteps",
                    value: function __abortSteps(reason) {
                        return PromiseInvokeOrNoop(this._underlyingSink, "abort", [ reason ]);
                    }
                }, {
                    key: "__errorSteps",
                    value: function __errorSteps() {
                        ResetQueue(this);
                    }
                }, {
                    key: "__startSteps",
                    value: function __startSteps() {
                        var _this = this;
                        var startResult = InvokeOrNoop(this._underlyingSink, "start", [ this ]);
                        var stream = this._controlledWritableStream;
                        Promise.resolve(startResult).then(function() {
                            assert(stream._state === "writable" || stream._state === "erroring");
                            _this._started = true;
                            WritableStreamDefaultControllerAdvanceQueueIfNeeded(_this);
                        }, function(r) {
                            assert(stream._state === "writable" || stream._state === "erroring");
                            _this._started = true;
                            WritableStreamDealWithRejection(stream, r);
                        })["catch"](rethrowAssertionErrorRejection);
                    }
                } ]);
                return WritableStreamDefaultController;
            }();
            function WritableStreamDefaultControllerClose(controller) {
                EnqueueValueWithSize(controller, "close", 0);
                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
            }
            function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
                var strategySize = controller._strategySize;
                if (strategySize === undefined) {
                    return 1;
                }
                try {
                    return strategySize(chunk);
                } catch (chunkSizeE) {
                    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
                    return 1;
                }
            }
            function WritableStreamDefaultControllerGetDesiredSize(controller) {
                return controller._strategyHWM - controller._queueTotalSize;
            }
            function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
                var writeRecord = {
                    chunk: chunk
                };
                try {
                    EnqueueValueWithSize(controller, writeRecord, chunkSize);
                } catch (enqueueE) {
                    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
                    return;
                }
                var stream = controller._controlledWritableStream;
                if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._state === "writable") {
                    var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                    WritableStreamUpdateBackpressure(stream, backpressure);
                }
                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
            }
            function IsWritableStreamDefaultController(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_underlyingSink")) {
                    return false;
                }
                return true;
            }
            function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
                var stream = controller._controlledWritableStream;
                if (controller._started === false) {
                    return;
                }
                if (stream._inFlightWriteRequest !== undefined) {
                    return;
                }
                var state = stream._state;
                if (state === "closed" || state === "errored") {
                    return;
                }
                if (state === "erroring") {
                    WritableStreamFinishErroring(stream);
                    return;
                }
                if (controller._queue.length === 0) {
                    return;
                }
                var writeRecord = PeekQueueValue(controller);
                if (writeRecord === "close") {
                    WritableStreamDefaultControllerProcessClose(controller);
                } else {
                    WritableStreamDefaultControllerProcessWrite(controller, writeRecord.chunk);
                }
            }
            function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
                if (controller._controlledWritableStream._state === "writable") {
                    WritableStreamDefaultControllerError(controller, error);
                }
            }
            function WritableStreamDefaultControllerProcessClose(controller) {
                var stream = controller._controlledWritableStream;
                WritableStreamMarkCloseRequestInFlight(stream);
                DequeueValue(controller);
                assert(controller._queue.length === 0, "queue must be empty once the final write record is dequeued");
                var sinkClosePromise = PromiseInvokeOrNoop(controller._underlyingSink, "close", []);
                sinkClosePromise.then(function() {
                    WritableStreamFinishInFlightClose(stream);
                }, function(reason) {
                    WritableStreamFinishInFlightCloseWithError(stream, reason);
                })["catch"](rethrowAssertionErrorRejection);
            }
            function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
                var stream = controller._controlledWritableStream;
                WritableStreamMarkFirstWriteRequestInFlight(stream);
                var sinkWritePromise = PromiseInvokeOrNoop(controller._underlyingSink, "write", [ chunk, controller ]);
                sinkWritePromise.then(function() {
                    WritableStreamFinishInFlightWrite(stream);
                    var state = stream._state;
                    assert(state === "writable" || state === "erroring");
                    DequeueValue(controller);
                    if (WritableStreamCloseQueuedOrInFlight(stream) === false && state === "writable") {
                        var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                        WritableStreamUpdateBackpressure(stream, backpressure);
                    }
                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                }, function(reason) {
                    WritableStreamFinishInFlightWriteWithError(stream, reason);
                })["catch"](rethrowAssertionErrorRejection);
            }
            function WritableStreamDefaultControllerGetBackpressure(controller) {
                var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
                return desiredSize <= 0;
            }
            function WritableStreamDefaultControllerError(controller, error) {
                var stream = controller._controlledWritableStream;
                assert(stream._state === "writable");
                WritableStreamStartErroring(stream, error);
            }
            function streamBrandCheckException(name) {
                return new TypeError("WritableStream.prototype." + name + " can only be used on a WritableStream");
            }
            function defaultWriterBrandCheckException(name) {
                return new TypeError("WritableStreamDefaultWriter.prototype." + name + " can only be used on a WritableStreamDefaultWriter");
            }
            function defaultWriterLockException(name) {
                return new TypeError("Cannot " + name + " a stream using a released writer");
            }
            function defaultWriterClosedPromiseInitialize(writer) {
                writer._closedPromise = new Promise(function(resolve, reject) {
                    writer._closedPromise_resolve = resolve;
                    writer._closedPromise_reject = reject;
                    writer._closedPromiseState = "pending";
                });
            }
            function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
                writer._closedPromise = Promise.reject(reason);
                writer._closedPromise_resolve = undefined;
                writer._closedPromise_reject = undefined;
                writer._closedPromiseState = "rejected";
            }
            function defaultWriterClosedPromiseInitializeAsResolved(writer) {
                writer._closedPromise = Promise.resolve(undefined);
                writer._closedPromise_resolve = undefined;
                writer._closedPromise_reject = undefined;
                writer._closedPromiseState = "resolved";
            }
            function defaultWriterClosedPromiseReject(writer, reason) {
                assert(writer._closedPromise_resolve !== undefined, "writer._closedPromise_resolve !== undefined");
                assert(writer._closedPromise_reject !== undefined, "writer._closedPromise_reject !== undefined");
                assert(writer._closedPromiseState === "pending", "writer._closedPromiseState is pending");
                writer._closedPromise_reject(reason);
                writer._closedPromise_resolve = undefined;
                writer._closedPromise_reject = undefined;
                writer._closedPromiseState = "rejected";
            }
            function defaultWriterClosedPromiseResetToRejected(writer, reason) {
                assert(writer._closedPromise_resolve === undefined, "writer._closedPromise_resolve === undefined");
                assert(writer._closedPromise_reject === undefined, "writer._closedPromise_reject === undefined");
                assert(writer._closedPromiseState !== "pending", "writer._closedPromiseState is not pending");
                writer._closedPromise = Promise.reject(reason);
                writer._closedPromiseState = "rejected";
            }
            function defaultWriterClosedPromiseResolve(writer) {
                assert(writer._closedPromise_resolve !== undefined, "writer._closedPromise_resolve !== undefined");
                assert(writer._closedPromise_reject !== undefined, "writer._closedPromise_reject !== undefined");
                assert(writer._closedPromiseState === "pending", "writer._closedPromiseState is pending");
                writer._closedPromise_resolve(undefined);
                writer._closedPromise_resolve = undefined;
                writer._closedPromise_reject = undefined;
                writer._closedPromiseState = "resolved";
            }
            function defaultWriterReadyPromiseInitialize(writer) {
                writer._readyPromise = new Promise(function(resolve, reject) {
                    writer._readyPromise_resolve = resolve;
                    writer._readyPromise_reject = reject;
                });
                writer._readyPromiseState = "pending";
            }
            function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
                writer._readyPromise = Promise.reject(reason);
                writer._readyPromise_resolve = undefined;
                writer._readyPromise_reject = undefined;
                writer._readyPromiseState = "rejected";
            }
            function defaultWriterReadyPromiseInitializeAsResolved(writer) {
                writer._readyPromise = Promise.resolve(undefined);
                writer._readyPromise_resolve = undefined;
                writer._readyPromise_reject = undefined;
                writer._readyPromiseState = "fulfilled";
            }
            function defaultWriterReadyPromiseReject(writer, reason) {
                assert(writer._readyPromise_resolve !== undefined, "writer._readyPromise_resolve !== undefined");
                assert(writer._readyPromise_reject !== undefined, "writer._readyPromise_reject !== undefined");
                writer._readyPromise_reject(reason);
                writer._readyPromise_resolve = undefined;
                writer._readyPromise_reject = undefined;
                writer._readyPromiseState = "rejected";
            }
            function defaultWriterReadyPromiseReset(writer) {
                assert(writer._readyPromise_resolve === undefined, "writer._readyPromise_resolve === undefined");
                assert(writer._readyPromise_reject === undefined, "writer._readyPromise_reject === undefined");
                writer._readyPromise = new Promise(function(resolve, reject) {
                    writer._readyPromise_resolve = resolve;
                    writer._readyPromise_reject = reject;
                });
                writer._readyPromiseState = "pending";
            }
            function defaultWriterReadyPromiseResetToRejected(writer, reason) {
                assert(writer._readyPromise_resolve === undefined, "writer._readyPromise_resolve === undefined");
                assert(writer._readyPromise_reject === undefined, "writer._readyPromise_reject === undefined");
                writer._readyPromise = Promise.reject(reason);
                writer._readyPromiseState = "rejected";
            }
            function defaultWriterReadyPromiseResolve(writer) {
                assert(writer._readyPromise_resolve !== undefined, "writer._readyPromise_resolve !== undefined");
                assert(writer._readyPromise_reject !== undefined, "writer._readyPromise_reject !== undefined");
                writer._readyPromise_resolve(undefined);
                writer._readyPromise_resolve = undefined;
                writer._readyPromise_reject = undefined;
                writer._readyPromiseState = "fulfilled";
            }
        }, function(module, exports, __w_pdfjs_require__) {
            "use strict";
            var _require = __w_pdfjs_require__(0), IsFiniteNonNegativeNumber = _require.IsFiniteNonNegativeNumber;
            var _require2 = __w_pdfjs_require__(1), assert = _require2.assert;
            exports.DequeueValue = function(container) {
                assert("_queue" in container && "_queueTotalSize" in container, "Spec-level failure: DequeueValue should only be used on containers with [[queue]] and [[queueTotalSize]].");
                assert(container._queue.length > 0, "Spec-level failure: should never dequeue from an empty queue.");
                var pair = container._queue.shift();
                container._queueTotalSize -= pair.size;
                if (container._queueTotalSize < 0) {
                    container._queueTotalSize = 0;
                }
                return pair.value;
            };
            exports.EnqueueValueWithSize = function(container, value, size) {
                assert("_queue" in container && "_queueTotalSize" in container, "Spec-level failure: EnqueueValueWithSize should only be used on containers with [[queue]] and " + "[[queueTotalSize]].");
                size = Number(size);
                if (!IsFiniteNonNegativeNumber(size)) {
                    throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
                }
                container._queue.push({
                    value: value,
                    size: size
                });
                container._queueTotalSize += size;
            };
            exports.PeekQueueValue = function(container) {
                assert("_queue" in container && "_queueTotalSize" in container, "Spec-level failure: PeekQueueValue should only be used on containers with [[queue]] and [[queueTotalSize]].");
                assert(container._queue.length > 0, "Spec-level failure: should never peek at an empty queue.");
                var pair = container._queue[0];
                return pair.value;
            };
            exports.ResetQueue = function(container) {
                assert("_queue" in container && "_queueTotalSize" in container, "Spec-level failure: ResetQueue should only be used on containers with [[queue]] and [[queueTotalSize]].");
                container._queue = [];
                container._queueTotalSize = 0;
            };
        }, function(module, exports, __w_pdfjs_require__) {
            "use strict";
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var _require = __w_pdfjs_require__(0), ArrayBufferCopy = _require.ArrayBufferCopy, CreateIterResultObject = _require.CreateIterResultObject, IsFiniteNonNegativeNumber = _require.IsFiniteNonNegativeNumber, InvokeOrNoop = _require.InvokeOrNoop, PromiseInvokeOrNoop = _require.PromiseInvokeOrNoop, TransferArrayBuffer = _require.TransferArrayBuffer, ValidateAndNormalizeQueuingStrategy = _require.ValidateAndNormalizeQueuingStrategy, ValidateAndNormalizeHighWaterMark = _require.ValidateAndNormalizeHighWaterMark;
            var _require2 = __w_pdfjs_require__(0), createArrayFromList = _require2.createArrayFromList, createDataProperty = _require2.createDataProperty, typeIsObject = _require2.typeIsObject;
            var _require3 = __w_pdfjs_require__(1), assert = _require3.assert, rethrowAssertionErrorRejection = _require3.rethrowAssertionErrorRejection;
            var _require4 = __w_pdfjs_require__(3), DequeueValue = _require4.DequeueValue, EnqueueValueWithSize = _require4.EnqueueValueWithSize, ResetQueue = _require4.ResetQueue;
            var _require5 = __w_pdfjs_require__(2), AcquireWritableStreamDefaultWriter = _require5.AcquireWritableStreamDefaultWriter, IsWritableStream = _require5.IsWritableStream, IsWritableStreamLocked = _require5.IsWritableStreamLocked, WritableStreamAbort = _require5.WritableStreamAbort, WritableStreamDefaultWriterCloseWithErrorPropagation = _require5.WritableStreamDefaultWriterCloseWithErrorPropagation, WritableStreamDefaultWriterRelease = _require5.WritableStreamDefaultWriterRelease, WritableStreamDefaultWriterWrite = _require5.WritableStreamDefaultWriterWrite, WritableStreamCloseQueuedOrInFlight = _require5.WritableStreamCloseQueuedOrInFlight;
            var ReadableStream = function() {
                function ReadableStream() {
                    var underlyingSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, size = _ref.size, highWaterMark = _ref.highWaterMark;
                    _classCallCheck(this, ReadableStream);
                    this._state = "readable";
                    this._reader = undefined;
                    this._storedError = undefined;
                    this._disturbed = false;
                    this._readableStreamController = undefined;
                    var type = underlyingSource.type;
                    var typeString = String(type);
                    if (typeString === "bytes") {
                        if (highWaterMark === undefined) {
                            highWaterMark = 0;
                        }
                        this._readableStreamController = new ReadableByteStreamController(this, underlyingSource, highWaterMark);
                    } else if (type === undefined) {
                        if (highWaterMark === undefined) {
                            highWaterMark = 1;
                        }
                        this._readableStreamController = new ReadableStreamDefaultController(this, underlyingSource, size, highWaterMark);
                    } else {
                        throw new RangeError("Invalid type is specified");
                    }
                }
                _createClass(ReadableStream, [ {
                    key: "cancel",
                    value: function cancel(reason) {
                        if (IsReadableStream(this) === false) {
                            return Promise.reject(streamBrandCheckException("cancel"));
                        }
                        if (IsReadableStreamLocked(this) === true) {
                            return Promise.reject(new TypeError("Cannot cancel a stream that already has a reader"));
                        }
                        return ReadableStreamCancel(this, reason);
                    }
                }, {
                    key: "getReader",
                    value: function getReader() {
                        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, mode = _ref2.mode;
                        if (IsReadableStream(this) === false) {
                            throw streamBrandCheckException("getReader");
                        }
                        if (mode === undefined) {
                            return AcquireReadableStreamDefaultReader(this);
                        }
                        mode = String(mode);
                        if (mode === "byob") {
                            return AcquireReadableStreamBYOBReader(this);
                        }
                        throw new RangeError("Invalid mode is specified");
                    }
                }, {
                    key: "pipeThrough",
                    value: function pipeThrough(_ref3, options) {
                        var writable = _ref3.writable, readable = _ref3.readable;
                        var promise = this.pipeTo(writable, options);
                        ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(promise);
                        return readable;
                    }
                }, {
                    key: "pipeTo",
                    value: function pipeTo(dest) {
                        var _this = this;
                        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, preventClose = _ref4.preventClose, preventAbort = _ref4.preventAbort, preventCancel = _ref4.preventCancel;
                        if (IsReadableStream(this) === false) {
                            return Promise.reject(streamBrandCheckException("pipeTo"));
                        }
                        if (IsWritableStream(dest) === false) {
                            return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
                        }
                        preventClose = Boolean(preventClose);
                        preventAbort = Boolean(preventAbort);
                        preventCancel = Boolean(preventCancel);
                        if (IsReadableStreamLocked(this) === true) {
                            return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
                        }
                        if (IsWritableStreamLocked(dest) === true) {
                            return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
                        }
                        var reader = AcquireReadableStreamDefaultReader(this);
                        var writer = AcquireWritableStreamDefaultWriter(dest);
                        var shuttingDown = false;
                        var currentWrite = Promise.resolve();
                        return new Promise(function(resolve, reject) {
                            function pipeLoop() {
                                currentWrite = Promise.resolve();
                                if (shuttingDown === true) {
                                    return Promise.resolve();
                                }
                                return writer._readyPromise.then(function() {
                                    return ReadableStreamDefaultReaderRead(reader).then(function(_ref5) {
                                        var value = _ref5.value, done = _ref5.done;
                                        if (done === true) {
                                            return;
                                        }
                                        currentWrite = WritableStreamDefaultWriterWrite(writer, value)["catch"](function() {});
                                    });
                                }).then(pipeLoop);
                            }
                            isOrBecomesErrored(_this, reader._closedPromise, function(storedError) {
                                if (preventAbort === false) {
                                    shutdownWithAction(function() {
                                        return WritableStreamAbort(dest, storedError);
                                    }, true, storedError);
                                } else {
                                    shutdown(true, storedError);
                                }
                            });
                            isOrBecomesErrored(dest, writer._closedPromise, function(storedError) {
                                if (preventCancel === false) {
                                    shutdownWithAction(function() {
                                        return ReadableStreamCancel(_this, storedError);
                                    }, true, storedError);
                                } else {
                                    shutdown(true, storedError);
                                }
                            });
                            isOrBecomesClosed(_this, reader._closedPromise, function() {
                                if (preventClose === false) {
                                    shutdownWithAction(function() {
                                        return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);
                                    });
                                } else {
                                    shutdown();
                                }
                            });
                            if (WritableStreamCloseQueuedOrInFlight(dest) === true || dest._state === "closed") {
                                var destClosed = new TypeError("the destination writable stream closed before all data could be piped to it");
                                if (preventCancel === false) {
                                    shutdownWithAction(function() {
                                        return ReadableStreamCancel(_this, destClosed);
                                    }, true, destClosed);
                                } else {
                                    shutdown(true, destClosed);
                                }
                            }
                            pipeLoop()["catch"](function(err) {
                                currentWrite = Promise.resolve();
                                rethrowAssertionErrorRejection(err);
                            });
                            function waitForWritesToFinish() {
                                var oldCurrentWrite = currentWrite;
                                return currentWrite.then(function() {
                                    return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined;
                                });
                            }
                            function isOrBecomesErrored(stream, promise, action) {
                                if (stream._state === "errored") {
                                    action(stream._storedError);
                                } else {
                                    promise["catch"](action)["catch"](rethrowAssertionErrorRejection);
                                }
                            }
                            function isOrBecomesClosed(stream, promise, action) {
                                if (stream._state === "closed") {
                                    action();
                                } else {
                                    promise.then(action)["catch"](rethrowAssertionErrorRejection);
                                }
                            }
                            function shutdownWithAction(action, originalIsError, originalError) {
                                if (shuttingDown === true) {
                                    return;
                                }
                                shuttingDown = true;
                                if (dest._state === "writable" && WritableStreamCloseQueuedOrInFlight(dest) === false) {
                                    waitForWritesToFinish().then(doTheRest);
                                } else {
                                    doTheRest();
                                }
                                function doTheRest() {
                                    action().then(function() {
                                        return finalize(originalIsError, originalError);
                                    }, function(newError) {
                                        return finalize(true, newError);
                                    })["catch"](rethrowAssertionErrorRejection);
                                }
                            }
                            function shutdown(isError, error) {
                                if (shuttingDown === true) {
                                    return;
                                }
                                shuttingDown = true;
                                if (dest._state === "writable" && WritableStreamCloseQueuedOrInFlight(dest) === false) {
                                    waitForWritesToFinish().then(function() {
                                        return finalize(isError, error);
                                    })["catch"](rethrowAssertionErrorRejection);
                                } else {
                                    finalize(isError, error);
                                }
                            }
                            function finalize(isError, error) {
                                WritableStreamDefaultWriterRelease(writer);
                                ReadableStreamReaderGenericRelease(reader);
                                if (isError) {
                                    reject(error);
                                } else {
                                    resolve(undefined);
                                }
                            }
                        });
                    }
                }, {
                    key: "tee",
                    value: function tee() {
                        if (IsReadableStream(this) === false) {
                            throw streamBrandCheckException("tee");
                        }
                        var branches = ReadableStreamTee(this, false);
                        return createArrayFromList(branches);
                    }
                }, {
                    key: "locked",
                    get: function get() {
                        if (IsReadableStream(this) === false) {
                            throw streamBrandCheckException("locked");
                        }
                        return IsReadableStreamLocked(this);
                    }
                } ]);
                return ReadableStream;
            }();
            module.exports = {
                ReadableStream: ReadableStream,
                IsReadableStreamDisturbed: IsReadableStreamDisturbed,
                ReadableStreamDefaultControllerClose: ReadableStreamDefaultControllerClose,
                ReadableStreamDefaultControllerEnqueue: ReadableStreamDefaultControllerEnqueue,
                ReadableStreamDefaultControllerError: ReadableStreamDefaultControllerError,
                ReadableStreamDefaultControllerGetDesiredSize: ReadableStreamDefaultControllerGetDesiredSize
            };
            function AcquireReadableStreamBYOBReader(stream) {
                return new ReadableStreamBYOBReader(stream);
            }
            function AcquireReadableStreamDefaultReader(stream) {
                return new ReadableStreamDefaultReader(stream);
            }
            function IsReadableStream(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_readableStreamController")) {
                    return false;
                }
                return true;
            }
            function IsReadableStreamDisturbed(stream) {
                assert(IsReadableStream(stream) === true, "IsReadableStreamDisturbed should only be used on known readable streams");
                return stream._disturbed;
            }
            function IsReadableStreamLocked(stream) {
                assert(IsReadableStream(stream) === true, "IsReadableStreamLocked should only be used on known readable streams");
                if (stream._reader === undefined) {
                    return false;
                }
                return true;
            }
            function ReadableStreamTee(stream, cloneForBranch2) {
                assert(IsReadableStream(stream) === true);
                assert(typeof cloneForBranch2 === "boolean");
                var reader = AcquireReadableStreamDefaultReader(stream);
                var teeState = {
                    closedOrErrored: false,
                    canceled1: false,
                    canceled2: false,
                    reason1: undefined,
                    reason2: undefined
                };
                teeState.promise = new Promise(function(resolve) {
                    teeState._resolve = resolve;
                });
                var pull = create_ReadableStreamTeePullFunction();
                pull._reader = reader;
                pull._teeState = teeState;
                pull._cloneForBranch2 = cloneForBranch2;
                var cancel1 = create_ReadableStreamTeeBranch1CancelFunction();
                cancel1._stream = stream;
                cancel1._teeState = teeState;
                var cancel2 = create_ReadableStreamTeeBranch2CancelFunction();
                cancel2._stream = stream;
                cancel2._teeState = teeState;
                var underlyingSource1 = Object.create(Object.prototype);
                createDataProperty(underlyingSource1, "pull", pull);
                createDataProperty(underlyingSource1, "cancel", cancel1);
                var branch1Stream = new ReadableStream(underlyingSource1);
                var underlyingSource2 = Object.create(Object.prototype);
                createDataProperty(underlyingSource2, "pull", pull);
                createDataProperty(underlyingSource2, "cancel", cancel2);
                var branch2Stream = new ReadableStream(underlyingSource2);
                pull._branch1 = branch1Stream._readableStreamController;
                pull._branch2 = branch2Stream._readableStreamController;
                reader._closedPromise["catch"](function(r) {
                    if (teeState.closedOrErrored === true) {
                        return;
                    }
                    ReadableStreamDefaultControllerError(pull._branch1, r);
                    ReadableStreamDefaultControllerError(pull._branch2, r);
                    teeState.closedOrErrored = true;
                });
                return [ branch1Stream, branch2Stream ];
            }
            function create_ReadableStreamTeePullFunction() {
                function f() {
                    var reader = f._reader, branch1 = f._branch1, branch2 = f._branch2, teeState = f._teeState;
                    return ReadableStreamDefaultReaderRead(reader).then(function(result) {
                        assert(typeIsObject(result));
                        var value = result.value;
                        var done = result.done;
                        assert(typeof done === "boolean");
                        if (done === true && teeState.closedOrErrored === false) {
                            if (teeState.canceled1 === false) {
                                ReadableStreamDefaultControllerClose(branch1);
                            }
                            if (teeState.canceled2 === false) {
                                ReadableStreamDefaultControllerClose(branch2);
                            }
                            teeState.closedOrErrored = true;
                        }
                        if (teeState.closedOrErrored === true) {
                            return;
                        }
                        var value1 = value;
                        var value2 = value;
                        if (teeState.canceled1 === false) {
                            ReadableStreamDefaultControllerEnqueue(branch1, value1);
                        }
                        if (teeState.canceled2 === false) {
                            ReadableStreamDefaultControllerEnqueue(branch2, value2);
                        }
                    });
                }
                return f;
            }
            function create_ReadableStreamTeeBranch1CancelFunction() {
                function f(reason) {
                    var stream = f._stream, teeState = f._teeState;
                    teeState.canceled1 = true;
                    teeState.reason1 = reason;
                    if (teeState.canceled2 === true) {
                        var compositeReason = createArrayFromList([ teeState.reason1, teeState.reason2 ]);
                        var cancelResult = ReadableStreamCancel(stream, compositeReason);
                        teeState._resolve(cancelResult);
                    }
                    return teeState.promise;
                }
                return f;
            }
            function create_ReadableStreamTeeBranch2CancelFunction() {
                function f(reason) {
                    var stream = f._stream, teeState = f._teeState;
                    teeState.canceled2 = true;
                    teeState.reason2 = reason;
                    if (teeState.canceled1 === true) {
                        var compositeReason = createArrayFromList([ teeState.reason1, teeState.reason2 ]);
                        var cancelResult = ReadableStreamCancel(stream, compositeReason);
                        teeState._resolve(cancelResult);
                    }
                    return teeState.promise;
                }
                return f;
            }
            function ReadableStreamAddReadIntoRequest(stream) {
                assert(IsReadableStreamBYOBReader(stream._reader) === true);
                assert(stream._state === "readable" || stream._state === "closed");
                var promise = new Promise(function(resolve, reject) {
                    var readIntoRequest = {
                        _resolve: resolve,
                        _reject: reject
                    };
                    stream._reader._readIntoRequests.push(readIntoRequest);
                });
                return promise;
            }
            function ReadableStreamAddReadRequest(stream) {
                assert(IsReadableStreamDefaultReader(stream._reader) === true);
                assert(stream._state === "readable");
                var promise = new Promise(function(resolve, reject) {
                    var readRequest = {
                        _resolve: resolve,
                        _reject: reject
                    };
                    stream._reader._readRequests.push(readRequest);
                });
                return promise;
            }
            function ReadableStreamCancel(stream, reason) {
                stream._disturbed = true;
                if (stream._state === "closed") {
                    return Promise.resolve(undefined);
                }
                if (stream._state === "errored") {
                    return Promise.reject(stream._storedError);
                }
                ReadableStreamClose(stream);
                var sourceCancelPromise = stream._readableStreamController.__cancelSteps(reason);
                return sourceCancelPromise.then(function() {
                    return undefined;
                });
            }
            function ReadableStreamClose(stream) {
                assert(stream._state === "readable");
                stream._state = "closed";
                var reader = stream._reader;
                if (reader === undefined) {
                    return undefined;
                }
                if (IsReadableStreamDefaultReader(reader) === true) {
                    for (var i = 0; i < reader._readRequests.length; i++) {
                        var _resolve = reader._readRequests[i]._resolve;
                        _resolve(CreateIterResultObject(undefined, true));
                    }
                    reader._readRequests = [];
                }
                defaultReaderClosedPromiseResolve(reader);
                return undefined;
            }
            function ReadableStreamError(stream, e) {
                assert(IsReadableStream(stream) === true, "stream must be ReadableStream");
                assert(stream._state === "readable", "state must be readable");
                stream._state = "errored";
                stream._storedError = e;
                var reader = stream._reader;
                if (reader === undefined) {
                    return undefined;
                }
                if (IsReadableStreamDefaultReader(reader) === true) {
                    for (var i = 0; i < reader._readRequests.length; i++) {
                        var readRequest = reader._readRequests[i];
                        readRequest._reject(e);
                    }
                    reader._readRequests = [];
                } else {
                    assert(IsReadableStreamBYOBReader(reader), "reader must be ReadableStreamBYOBReader");
                    for (var _i = 0; _i < reader._readIntoRequests.length; _i++) {
                        var readIntoRequest = reader._readIntoRequests[_i];
                        readIntoRequest._reject(e);
                    }
                    reader._readIntoRequests = [];
                }
                defaultReaderClosedPromiseReject(reader, e);
                reader._closedPromise["catch"](function() {});
            }
            function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
                var reader = stream._reader;
                assert(reader._readIntoRequests.length > 0);
                var readIntoRequest = reader._readIntoRequests.shift();
                readIntoRequest._resolve(CreateIterResultObject(chunk, done));
            }
            function ReadableStreamFulfillReadRequest(stream, chunk, done) {
                var reader = stream._reader;
                assert(reader._readRequests.length > 0);
                var readRequest = reader._readRequests.shift();
                readRequest._resolve(CreateIterResultObject(chunk, done));
            }
            function ReadableStreamGetNumReadIntoRequests(stream) {
                return stream._reader._readIntoRequests.length;
            }
            function ReadableStreamGetNumReadRequests(stream) {
                return stream._reader._readRequests.length;
            }
            function ReadableStreamHasBYOBReader(stream) {
                var reader = stream._reader;
                if (reader === undefined) {
                    return false;
                }
                if (IsReadableStreamBYOBReader(reader) === false) {
                    return false;
                }
                return true;
            }
            function ReadableStreamHasDefaultReader(stream) {
                var reader = stream._reader;
                if (reader === undefined) {
                    return false;
                }
                if (IsReadableStreamDefaultReader(reader) === false) {
                    return false;
                }
                return true;
            }
            var ReadableStreamDefaultReader = function() {
                function ReadableStreamDefaultReader(stream) {
                    _classCallCheck(this, ReadableStreamDefaultReader);
                    if (IsReadableStream(stream) === false) {
                        throw new TypeError("ReadableStreamDefaultReader can only be constructed with a ReadableStream instance");
                    }
                    if (IsReadableStreamLocked(stream) === true) {
                        throw new TypeError("This stream has already been locked for exclusive reading by another reader");
                    }
                    ReadableStreamReaderGenericInitialize(this, stream);
                    this._readRequests = [];
                }
                _createClass(ReadableStreamDefaultReader, [ {
                    key: "cancel",
                    value: function cancel(reason) {
                        if (IsReadableStreamDefaultReader(this) === false) {
                            return Promise.reject(defaultReaderBrandCheckException("cancel"));
                        }
                        if (this._ownerReadableStream === undefined) {
                            return Promise.reject(readerLockException("cancel"));
                        }
                        return ReadableStreamReaderGenericCancel(this, reason);
                    }
                }, {
                    key: "read",
                    value: function read() {
                        if (IsReadableStreamDefaultReader(this) === false) {
                            return Promise.reject(defaultReaderBrandCheckException("read"));
                        }
                        if (this._ownerReadableStream === undefined) {
                            return Promise.reject(readerLockException("read from"));
                        }
                        return ReadableStreamDefaultReaderRead(this);
                    }
                }, {
                    key: "releaseLock",
                    value: function releaseLock() {
                        if (IsReadableStreamDefaultReader(this) === false) {
                            throw defaultReaderBrandCheckException("releaseLock");
                        }
                        if (this._ownerReadableStream === undefined) {
                            return;
                        }
                        if (this._readRequests.length > 0) {
                            throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
                        }
                        ReadableStreamReaderGenericRelease(this);
                    }
                }, {
                    key: "closed",
                    get: function get() {
                        if (IsReadableStreamDefaultReader(this) === false) {
                            return Promise.reject(defaultReaderBrandCheckException("closed"));
                        }
                        return this._closedPromise;
                    }
                } ]);
                return ReadableStreamDefaultReader;
            }();
            var ReadableStreamBYOBReader = function() {
                function ReadableStreamBYOBReader(stream) {
                    _classCallCheck(this, ReadableStreamBYOBReader);
                    if (!IsReadableStream(stream)) {
                        throw new TypeError("ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a " + "byte source");
                    }
                    if (IsReadableByteStreamController(stream._readableStreamController) === false) {
                        throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte " + "source");
                    }
                    if (IsReadableStreamLocked(stream)) {
                        throw new TypeError("This stream has already been locked for exclusive reading by another reader");
                    }
                    ReadableStreamReaderGenericInitialize(this, stream);
                    this._readIntoRequests = [];
                }
                _createClass(ReadableStreamBYOBReader, [ {
                    key: "cancel",
                    value: function cancel(reason) {
                        if (!IsReadableStreamBYOBReader(this)) {
                            return Promise.reject(byobReaderBrandCheckException("cancel"));
                        }
                        if (this._ownerReadableStream === undefined) {
                            return Promise.reject(readerLockException("cancel"));
                        }
                        return ReadableStreamReaderGenericCancel(this, reason);
                    }
                }, {
                    key: "read",
                    value: function read(view) {
                        if (!IsReadableStreamBYOBReader(this)) {
                            return Promise.reject(byobReaderBrandCheckException("read"));
                        }
                        if (this._ownerReadableStream === undefined) {
                            return Promise.reject(readerLockException("read from"));
                        }
                        if (!ArrayBuffer.isView(view)) {
                            return Promise.reject(new TypeError("view must be an array buffer view"));
                        }
                        if (view.byteLength === 0) {
                            return Promise.reject(new TypeError("view must have non-zero byteLength"));
                        }
                        return ReadableStreamBYOBReaderRead(this, view);
                    }
                }, {
                    key: "releaseLock",
                    value: function releaseLock() {
                        if (!IsReadableStreamBYOBReader(this)) {
                            throw byobReaderBrandCheckException("releaseLock");
                        }
                        if (this._ownerReadableStream === undefined) {
                            return;
                        }
                        if (this._readIntoRequests.length > 0) {
                            throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
                        }
                        ReadableStreamReaderGenericRelease(this);
                    }
                }, {
                    key: "closed",
                    get: function get() {
                        if (!IsReadableStreamBYOBReader(this)) {
                            return Promise.reject(byobReaderBrandCheckException("closed"));
                        }
                        return this._closedPromise;
                    }
                } ]);
                return ReadableStreamBYOBReader;
            }();
            function IsReadableStreamBYOBReader(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_readIntoRequests")) {
                    return false;
                }
                return true;
            }
            function IsReadableStreamDefaultReader(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_readRequests")) {
                    return false;
                }
                return true;
            }
            function ReadableStreamReaderGenericInitialize(reader, stream) {
                reader._ownerReadableStream = stream;
                stream._reader = reader;
                if (stream._state === "readable") {
                    defaultReaderClosedPromiseInitialize(reader);
                } else if (stream._state === "closed") {
                    defaultReaderClosedPromiseInitializeAsResolved(reader);
                } else {
                    assert(stream._state === "errored", "state must be errored");
                    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
                    reader._closedPromise["catch"](function() {});
                }
            }
            function ReadableStreamReaderGenericCancel(reader, reason) {
                var stream = reader._ownerReadableStream;
                assert(stream !== undefined);
                return ReadableStreamCancel(stream, reason);
            }
            function ReadableStreamReaderGenericRelease(reader) {
                assert(reader._ownerReadableStream !== undefined);
                assert(reader._ownerReadableStream._reader === reader);
                if (reader._ownerReadableStream._state === "readable") {
                    defaultReaderClosedPromiseReject(reader, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"));
                } else {
                    defaultReaderClosedPromiseResetToRejected(reader, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"));
                }
                reader._closedPromise["catch"](function() {});
                reader._ownerReadableStream._reader = undefined;
                reader._ownerReadableStream = undefined;
            }
            function ReadableStreamBYOBReaderRead(reader, view) {
                var stream = reader._ownerReadableStream;
                assert(stream !== undefined);
                stream._disturbed = true;
                if (stream._state === "errored") {
                    return Promise.reject(stream._storedError);
                }
                return ReadableByteStreamControllerPullInto(stream._readableStreamController, view);
            }
            function ReadableStreamDefaultReaderRead(reader) {
                var stream = reader._ownerReadableStream;
                assert(stream !== undefined);
                stream._disturbed = true;
                if (stream._state === "closed") {
                    return Promise.resolve(CreateIterResultObject(undefined, true));
                }
                if (stream._state === "errored") {
                    return Promise.reject(stream._storedError);
                }
                assert(stream._state === "readable");
                return stream._readableStreamController.__pullSteps();
            }
            var ReadableStreamDefaultController = function() {
                function ReadableStreamDefaultController(stream, underlyingSource, size, highWaterMark) {
                    _classCallCheck(this, ReadableStreamDefaultController);
                    if (IsReadableStream(stream) === false) {
                        throw new TypeError("ReadableStreamDefaultController can only be constructed with a ReadableStream instance");
                    }
                    if (stream._readableStreamController !== undefined) {
                        throw new TypeError("ReadableStreamDefaultController instances can only be created by the ReadableStream constructor");
                    }
                    this._controlledReadableStream = stream;
                    this._underlyingSource = underlyingSource;
                    this._queue = undefined;
                    this._queueTotalSize = undefined;
                    ResetQueue(this);
                    this._started = false;
                    this._closeRequested = false;
                    this._pullAgain = false;
                    this._pulling = false;
                    var normalizedStrategy = ValidateAndNormalizeQueuingStrategy(size, highWaterMark);
                    this._strategySize = normalizedStrategy.size;
                    this._strategyHWM = normalizedStrategy.highWaterMark;
                    var controller = this;
                    var startResult = InvokeOrNoop(underlyingSource, "start", [ this ]);
                    Promise.resolve(startResult).then(function() {
                        controller._started = true;
                        assert(controller._pulling === false);
                        assert(controller._pullAgain === false);
                        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                    }, function(r) {
                        ReadableStreamDefaultControllerErrorIfNeeded(controller, r);
                    })["catch"](rethrowAssertionErrorRejection);
                }
                _createClass(ReadableStreamDefaultController, [ {
                    key: "close",
                    value: function close() {
                        if (IsReadableStreamDefaultController(this) === false) {
                            throw defaultControllerBrandCheckException("close");
                        }
                        if (this._closeRequested === true) {
                            throw new TypeError("The stream has already been closed; do not close it again!");
                        }
                        var state = this._controlledReadableStream._state;
                        if (state !== "readable") {
                            throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be closed");
                        }
                        ReadableStreamDefaultControllerClose(this);
                    }
                }, {
                    key: "enqueue",
                    value: function enqueue(chunk) {
                        if (IsReadableStreamDefaultController(this) === false) {
                            throw defaultControllerBrandCheckException("enqueue");
                        }
                        if (this._closeRequested === true) {
                            throw new TypeError("stream is closed or draining");
                        }
                        var state = this._controlledReadableStream._state;
                        if (state !== "readable") {
                            throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be enqueued to");
                        }
                        return ReadableStreamDefaultControllerEnqueue(this, chunk);
                    }
                }, {
                    key: "error",
                    value: function error(e) {
                        if (IsReadableStreamDefaultController(this) === false) {
                            throw defaultControllerBrandCheckException("error");
                        }
                        var stream = this._controlledReadableStream;
                        if (stream._state !== "readable") {
                            throw new TypeError("The stream is " + stream._state + " and so cannot be errored");
                        }
                        ReadableStreamDefaultControllerError(this, e);
                    }
                }, {
                    key: "__cancelSteps",
                    value: function __cancelSteps(reason) {
                        ResetQueue(this);
                        return PromiseInvokeOrNoop(this._underlyingSource, "cancel", [ reason ]);
                    }
                }, {
                    key: "__pullSteps",
                    value: function __pullSteps() {
                        var stream = this._controlledReadableStream;
                        if (this._queue.length > 0) {
                            var chunk = DequeueValue(this);
                            if (this._closeRequested === true && this._queue.length === 0) {
                                ReadableStreamClose(stream);
                            } else {
                                ReadableStreamDefaultControllerCallPullIfNeeded(this);
                            }
                            return Promise.resolve(CreateIterResultObject(chunk, false));
                        }
                        var pendingPromise = ReadableStreamAddReadRequest(stream);
                        ReadableStreamDefaultControllerCallPullIfNeeded(this);
                        return pendingPromise;
                    }
                }, {
                    key: "desiredSize",
                    get: function get() {
                        if (IsReadableStreamDefaultController(this) === false) {
                            throw defaultControllerBrandCheckException("desiredSize");
                        }
                        return ReadableStreamDefaultControllerGetDesiredSize(this);
                    }
                } ]);
                return ReadableStreamDefaultController;
            }();
            function IsReadableStreamDefaultController(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_underlyingSource")) {
                    return false;
                }
                return true;
            }
            function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
                var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
                if (shouldPull === false) {
                    return undefined;
                }
                if (controller._pulling === true) {
                    controller._pullAgain = true;
                    return undefined;
                }
                assert(controller._pullAgain === false);
                controller._pulling = true;
                var pullPromise = PromiseInvokeOrNoop(controller._underlyingSource, "pull", [ controller ]);
                pullPromise.then(function() {
                    controller._pulling = false;
                    if (controller._pullAgain === true) {
                        controller._pullAgain = false;
                        return ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                    }
                    return undefined;
                }, function(e) {
                    ReadableStreamDefaultControllerErrorIfNeeded(controller, e);
                })["catch"](rethrowAssertionErrorRejection);
                return undefined;
            }
            function ReadableStreamDefaultControllerShouldCallPull(controller) {
                var stream = controller._controlledReadableStream;
                if (stream._state === "closed" || stream._state === "errored") {
                    return false;
                }
                if (controller._closeRequested === true) {
                    return false;
                }
                if (controller._started === false) {
                    return false;
                }
                if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {
                    return true;
                }
                var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
                if (desiredSize > 0) {
                    return true;
                }
                return false;
            }
            function ReadableStreamDefaultControllerClose(controller) {
                var stream = controller._controlledReadableStream;
                assert(controller._closeRequested === false);
                assert(stream._state === "readable");
                controller._closeRequested = true;
                if (controller._queue.length === 0) {
                    ReadableStreamClose(stream);
                }
            }
            function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
                var stream = controller._controlledReadableStream;
                assert(controller._closeRequested === false);
                assert(stream._state === "readable");
                if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {
                    ReadableStreamFulfillReadRequest(stream, chunk, false);
                } else {
                    var chunkSize = 1;
                    if (controller._strategySize !== undefined) {
                        var strategySize = controller._strategySize;
                        try {
                            chunkSize = strategySize(chunk);
                        } catch (chunkSizeE) {
                            ReadableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
                            throw chunkSizeE;
                        }
                    }
                    try {
                        EnqueueValueWithSize(controller, chunk, chunkSize);
                    } catch (enqueueE) {
                        ReadableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
                        throw enqueueE;
                    }
                }
                ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                return undefined;
            }
            function ReadableStreamDefaultControllerError(controller, e) {
                var stream = controller._controlledReadableStream;
                assert(stream._state === "readable");
                ResetQueue(controller);
                ReadableStreamError(stream, e);
            }
            function ReadableStreamDefaultControllerErrorIfNeeded(controller, e) {
                if (controller._controlledReadableStream._state === "readable") {
                    ReadableStreamDefaultControllerError(controller, e);
                }
            }
            function ReadableStreamDefaultControllerGetDesiredSize(controller) {
                var stream = controller._controlledReadableStream;
                var state = stream._state;
                if (state === "errored") {
                    return null;
                }
                if (state === "closed") {
                    return 0;
                }
                return controller._strategyHWM - controller._queueTotalSize;
            }
            var ReadableStreamBYOBRequest = function() {
                function ReadableStreamBYOBRequest(controller, view) {
                    _classCallCheck(this, ReadableStreamBYOBRequest);
                    this._associatedReadableByteStreamController = controller;
                    this._view = view;
                }
                _createClass(ReadableStreamBYOBRequest, [ {
                    key: "respond",
                    value: function respond(bytesWritten) {
                        if (IsReadableStreamBYOBRequest(this) === false) {
                            throw byobRequestBrandCheckException("respond");
                        }
                        if (this._associatedReadableByteStreamController === undefined) {
                            throw new TypeError("This BYOB request has been invalidated");
                        }
                        ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
                    }
                }, {
                    key: "respondWithNewView",
                    value: function respondWithNewView(view) {
                        if (IsReadableStreamBYOBRequest(this) === false) {
                            throw byobRequestBrandCheckException("respond");
                        }
                        if (this._associatedReadableByteStreamController === undefined) {
                            throw new TypeError("This BYOB request has been invalidated");
                        }
                        if (!ArrayBuffer.isView(view)) {
                            throw new TypeError("You can only respond with array buffer views");
                        }
                        ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
                    }
                }, {
                    key: "view",
                    get: function get() {
                        return this._view;
                    }
                } ]);
                return ReadableStreamBYOBRequest;
            }();
            var ReadableByteStreamController = function() {
                function ReadableByteStreamController(stream, underlyingByteSource, highWaterMark) {
                    _classCallCheck(this, ReadableByteStreamController);
                    if (IsReadableStream(stream) === false) {
                        throw new TypeError("ReadableByteStreamController can only be constructed with a ReadableStream instance given " + "a byte source");
                    }
                    if (stream._readableStreamController !== undefined) {
                        throw new TypeError("ReadableByteStreamController instances can only be created by the ReadableStream constructor given a byte " + "source");
                    }
                    this._controlledReadableStream = stream;
                    this._underlyingByteSource = underlyingByteSource;
                    this._pullAgain = false;
                    this._pulling = false;
                    ReadableByteStreamControllerClearPendingPullIntos(this);
                    this._queue = this._queueTotalSize = undefined;
                    ResetQueue(this);
                    this._closeRequested = false;
                    this._started = false;
                    this._strategyHWM = ValidateAndNormalizeHighWaterMark(highWaterMark);
                    var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
                    if (autoAllocateChunkSize !== undefined) {
                        if (Number.isInteger(autoAllocateChunkSize) === false || autoAllocateChunkSize <= 0) {
                            throw new RangeError("autoAllocateChunkSize must be a positive integer");
                        }
                    }
                    this._autoAllocateChunkSize = autoAllocateChunkSize;
                    this._pendingPullIntos = [];
                    var controller = this;
                    var startResult = InvokeOrNoop(underlyingByteSource, "start", [ this ]);
                    Promise.resolve(startResult).then(function() {
                        controller._started = true;
                        assert(controller._pulling === false);
                        assert(controller._pullAgain === false);
                        ReadableByteStreamControllerCallPullIfNeeded(controller);
                    }, function(r) {
                        if (stream._state === "readable") {
                            ReadableByteStreamControllerError(controller, r);
                        }
                    })["catch"](rethrowAssertionErrorRejection);
                }
                _createClass(ReadableByteStreamController, [ {
                    key: "close",
                    value: function close() {
                        if (IsReadableByteStreamController(this) === false) {
                            throw byteStreamControllerBrandCheckException("close");
                        }
                        if (this._closeRequested === true) {
                            throw new TypeError("The stream has already been closed; do not close it again!");
                        }
                        var state = this._controlledReadableStream._state;
                        if (state !== "readable") {
                            throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be closed");
                        }
                        ReadableByteStreamControllerClose(this);
                    }
                }, {
                    key: "enqueue",
                    value: function enqueue(chunk) {
                        if (IsReadableByteStreamController(this) === false) {
                            throw byteStreamControllerBrandCheckException("enqueue");
                        }
                        if (this._closeRequested === true) {
                            throw new TypeError("stream is closed or draining");
                        }
                        var state = this._controlledReadableStream._state;
                        if (state !== "readable") {
                            throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be enqueued to");
                        }
                        if (!ArrayBuffer.isView(chunk)) {
                            throw new TypeError("You can only enqueue array buffer views when using a ReadableByteStreamController");
                        }
                        ReadableByteStreamControllerEnqueue(this, chunk);
                    }
                }, {
                    key: "error",
                    value: function error(e) {
                        if (IsReadableByteStreamController(this) === false) {
                            throw byteStreamControllerBrandCheckException("error");
                        }
                        var stream = this._controlledReadableStream;
                        if (stream._state !== "readable") {
                            throw new TypeError("The stream is " + stream._state + " and so cannot be errored");
                        }
                        ReadableByteStreamControllerError(this, e);
                    }
                }, {
                    key: "__cancelSteps",
                    value: function __cancelSteps(reason) {
                        if (this._pendingPullIntos.length > 0) {
                            var firstDescriptor = this._pendingPullIntos[0];
                            firstDescriptor.bytesFilled = 0;
                        }
                        ResetQueue(this);
                        return PromiseInvokeOrNoop(this._underlyingByteSource, "cancel", [ reason ]);
                    }
                }, {
                    key: "__pullSteps",
                    value: function __pullSteps() {
                        var stream = this._controlledReadableStream;
                        assert(ReadableStreamHasDefaultReader(stream) === true);
                        if (this._queueTotalSize > 0) {
                            assert(ReadableStreamGetNumReadRequests(stream) === 0);
                            var entry = this._queue.shift();
                            this._queueTotalSize -= entry.byteLength;
                            ReadableByteStreamControllerHandleQueueDrain(this);
                            var view = void 0;
                            try {
                                view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
                            } catch (viewE) {
                                return Promise.reject(viewE);
                            }
                            return Promise.resolve(CreateIterResultObject(view, false));
                        }
                        var autoAllocateChunkSize = this._autoAllocateChunkSize;
                        if (autoAllocateChunkSize !== undefined) {
                            var buffer = void 0;
                            try {
                                buffer = new ArrayBuffer(autoAllocateChunkSize);
                            } catch (bufferE) {
                                return Promise.reject(bufferE);
                            }
                            var pullIntoDescriptor = {
                                buffer: buffer,
                                byteOffset: 0,
                                byteLength: autoAllocateChunkSize,
                                bytesFilled: 0,
                                elementSize: 1,
                                ctor: Uint8Array,
                                readerType: "default"
                            };
                            this._pendingPullIntos.push(pullIntoDescriptor);
                        }
                        var promise = ReadableStreamAddReadRequest(stream);
                        ReadableByteStreamControllerCallPullIfNeeded(this);
                        return promise;
                    }
                }, {
                    key: "byobRequest",
                    get: function get() {
                        if (IsReadableByteStreamController(this) === false) {
                            throw byteStreamControllerBrandCheckException("byobRequest");
                        }
                        if (this._byobRequest === undefined && this._pendingPullIntos.length > 0) {
                            var firstDescriptor = this._pendingPullIntos[0];
                            var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
                            this._byobRequest = new ReadableStreamBYOBRequest(this, view);
                        }
                        return this._byobRequest;
                    }
                }, {
                    key: "desiredSize",
                    get: function get() {
                        if (IsReadableByteStreamController(this) === false) {
                            throw byteStreamControllerBrandCheckException("desiredSize");
                        }
                        return ReadableByteStreamControllerGetDesiredSize(this);
                    }
                } ]);
                return ReadableByteStreamController;
            }();
            function IsReadableByteStreamController(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_underlyingByteSource")) {
                    return false;
                }
                return true;
            }
            function IsReadableStreamBYOBRequest(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_associatedReadableByteStreamController")) {
                    return false;
                }
                return true;
            }
            function ReadableByteStreamControllerCallPullIfNeeded(controller) {
                var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
                if (shouldPull === false) {
                    return undefined;
                }
                if (controller._pulling === true) {
                    controller._pullAgain = true;
                    return undefined;
                }
                assert(controller._pullAgain === false);
                controller._pulling = true;
                var pullPromise = PromiseInvokeOrNoop(controller._underlyingByteSource, "pull", [ controller ]);
                pullPromise.then(function() {
                    controller._pulling = false;
                    if (controller._pullAgain === true) {
                        controller._pullAgain = false;
                        ReadableByteStreamControllerCallPullIfNeeded(controller);
                    }
                }, function(e) {
                    if (controller._controlledReadableStream._state === "readable") {
                        ReadableByteStreamControllerError(controller, e);
                    }
                })["catch"](rethrowAssertionErrorRejection);
                return undefined;
            }
            function ReadableByteStreamControllerClearPendingPullIntos(controller) {
                ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                controller._pendingPullIntos = [];
            }
            function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
                assert(stream._state !== "errored", "state must not be errored");
                var done = false;
                if (stream._state === "closed") {
                    assert(pullIntoDescriptor.bytesFilled === 0);
                    done = true;
                }
                var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                if (pullIntoDescriptor.readerType === "default") {
                    ReadableStreamFulfillReadRequest(stream, filledView, done);
                } else {
                    assert(pullIntoDescriptor.readerType === "byob");
                    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
                }
            }
            function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
                var bytesFilled = pullIntoDescriptor.bytesFilled;
                var elementSize = pullIntoDescriptor.elementSize;
                assert(bytesFilled <= pullIntoDescriptor.byteLength);
                assert(bytesFilled % elementSize === 0);
                return new pullIntoDescriptor.ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
            }
            function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
                controller._queue.push({
                    buffer: buffer,
                    byteOffset: byteOffset,
                    byteLength: byteLength
                });
                controller._queueTotalSize += byteLength;
            }
            function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
                var elementSize = pullIntoDescriptor.elementSize;
                var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
                var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
                var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
                var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
                var totalBytesToCopyRemaining = maxBytesToCopy;
                var ready = false;
                if (maxAlignedBytes > currentAlignedBytes) {
                    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
                    ready = true;
                }
                var queue = controller._queue;
                while (totalBytesToCopyRemaining > 0) {
                    var headOfQueue = queue[0];
                    var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
                    var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
                    ArrayBufferCopy(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
                    if (headOfQueue.byteLength === bytesToCopy) {
                        queue.shift();
                    } else {
                        headOfQueue.byteOffset += bytesToCopy;
                        headOfQueue.byteLength -= bytesToCopy;
                    }
                    controller._queueTotalSize -= bytesToCopy;
                    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
                    totalBytesToCopyRemaining -= bytesToCopy;
                }
                if (ready === false) {
                    assert(controller._queueTotalSize === 0, "queue must be empty");
                    assert(pullIntoDescriptor.bytesFilled > 0);
                    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);
                }
                return ready;
            }
            function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
                assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos[0] === pullIntoDescriptor);
                ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                pullIntoDescriptor.bytesFilled += size;
            }
            function ReadableByteStreamControllerHandleQueueDrain(controller) {
                assert(controller._controlledReadableStream._state === "readable");
                if (controller._queueTotalSize === 0 && controller._closeRequested === true) {
                    ReadableStreamClose(controller._controlledReadableStream);
                } else {
                    ReadableByteStreamControllerCallPullIfNeeded(controller);
                }
            }
            function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
                if (controller._byobRequest === undefined) {
                    return;
                }
                controller._byobRequest._associatedReadableByteStreamController = undefined;
                controller._byobRequest._view = undefined;
                controller._byobRequest = undefined;
            }
            function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
                assert(controller._closeRequested === false);
                while (controller._pendingPullIntos.length > 0) {
                    if (controller._queueTotalSize === 0) {
                        return;
                    }
                    var pullIntoDescriptor = controller._pendingPullIntos[0];
                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {
                        ReadableByteStreamControllerShiftPendingPullInto(controller);
                        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableStream, pullIntoDescriptor);
                    }
                }
            }
            function ReadableByteStreamControllerPullInto(controller, view) {
                var stream = controller._controlledReadableStream;
                var elementSize = 1;
                if (view.constructor !== DataView) {
                    elementSize = view.constructor.BYTES_PER_ELEMENT;
                }
                var ctor = view.constructor;
                var pullIntoDescriptor = {
                    buffer: view.buffer,
                    byteOffset: view.byteOffset,
                    byteLength: view.byteLength,
                    bytesFilled: 0,
                    elementSize: elementSize,
                    ctor: ctor,
                    readerType: "byob"
                };
                if (controller._pendingPullIntos.length > 0) {
                    pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);
                    controller._pendingPullIntos.push(pullIntoDescriptor);
                    return ReadableStreamAddReadIntoRequest(stream);
                }
                if (stream._state === "closed") {
                    var emptyView = new view.constructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
                    return Promise.resolve(CreateIterResultObject(emptyView, true));
                }
                if (controller._queueTotalSize > 0) {
                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {
                        var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                        ReadableByteStreamControllerHandleQueueDrain(controller);
                        return Promise.resolve(CreateIterResultObject(filledView, false));
                    }
                    if (controller._closeRequested === true) {
                        var e = new TypeError("Insufficient bytes to fill elements in the given buffer");
                        ReadableByteStreamControllerError(controller, e);
                        return Promise.reject(e);
                    }
                }
                pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);
                controller._pendingPullIntos.push(pullIntoDescriptor);
                var promise = ReadableStreamAddReadIntoRequest(stream);
                ReadableByteStreamControllerCallPullIfNeeded(controller);
                return promise;
            }
            function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
                firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
                assert(firstDescriptor.bytesFilled === 0, "bytesFilled must be 0");
                var stream = controller._controlledReadableStream;
                if (ReadableStreamHasBYOBReader(stream) === true) {
                    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                        var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
                        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
                    }
                }
            }
            function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
                if (pullIntoDescriptor.bytesFilled + bytesWritten > pullIntoDescriptor.byteLength) {
                    throw new RangeError("bytesWritten out of range");
                }
                ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
                if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
                    return;
                }
                ReadableByteStreamControllerShiftPendingPullInto(controller);
                var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
                if (remainderSize > 0) {
                    var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
                    var remainder = pullIntoDescriptor.buffer.slice(end - remainderSize, end);
                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
                }
                pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);
                pullIntoDescriptor.bytesFilled -= remainderSize;
                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableStream, pullIntoDescriptor);
                ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
            }
            function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
                var firstDescriptor = controller._pendingPullIntos[0];
                var stream = controller._controlledReadableStream;
                if (stream._state === "closed") {
                    if (bytesWritten !== 0) {
                        throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
                    }
                    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);
                } else {
                    assert(stream._state === "readable");
                    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
                }
            }
            function ReadableByteStreamControllerShiftPendingPullInto(controller) {
                var descriptor = controller._pendingPullIntos.shift();
                ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                return descriptor;
            }
            function ReadableByteStreamControllerShouldCallPull(controller) {
                var stream = controller._controlledReadableStream;
                if (stream._state !== "readable") {
                    return false;
                }
                if (controller._closeRequested === true) {
                    return false;
                }
                if (controller._started === false) {
                    return false;
                }
                if (ReadableStreamHasDefaultReader(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {
                    return true;
                }
                if (ReadableStreamHasBYOBReader(stream) === true && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                    return true;
                }
                if (ReadableByteStreamControllerGetDesiredSize(controller) > 0) {
                    return true;
                }
                return false;
            }
            function ReadableByteStreamControllerClose(controller) {
                var stream = controller._controlledReadableStream;
                assert(controller._closeRequested === false);
                assert(stream._state === "readable");
                if (controller._queueTotalSize > 0) {
                    controller._closeRequested = true;
                    return;
                }
                if (controller._pendingPullIntos.length > 0) {
                    var firstPendingPullInto = controller._pendingPullIntos[0];
                    if (firstPendingPullInto.bytesFilled > 0) {
                        var e = new TypeError("Insufficient bytes to fill elements in the given buffer");
                        ReadableByteStreamControllerError(controller, e);
                        throw e;
                    }
                }
                ReadableStreamClose(stream);
            }
            function ReadableByteStreamControllerEnqueue(controller, chunk) {
                var stream = controller._controlledReadableStream;
                assert(controller._closeRequested === false);
                assert(stream._state === "readable");
                var buffer = chunk.buffer;
                var byteOffset = chunk.byteOffset;
                var byteLength = chunk.byteLength;
                var transferredBuffer = TransferArrayBuffer(buffer);
                if (ReadableStreamHasDefaultReader(stream) === true) {
                    if (ReadableStreamGetNumReadRequests(stream) === 0) {
                        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                    } else {
                        assert(controller._queue.length === 0);
                        var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
                        ReadableStreamFulfillReadRequest(stream, transferredView, false);
                    }
                } else if (ReadableStreamHasBYOBReader(stream) === true) {
                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
                } else {
                    assert(IsReadableStreamLocked(stream) === false, "stream must not be locked");
                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                }
            }
            function ReadableByteStreamControllerError(controller, e) {
                var stream = controller._controlledReadableStream;
                assert(stream._state === "readable");
                ReadableByteStreamControllerClearPendingPullIntos(controller);
                ResetQueue(controller);
                ReadableStreamError(stream, e);
            }
            function ReadableByteStreamControllerGetDesiredSize(controller) {
                var stream = controller._controlledReadableStream;
                var state = stream._state;
                if (state === "errored") {
                    return null;
                }
                if (state === "closed") {
                    return 0;
                }
                return controller._strategyHWM - controller._queueTotalSize;
            }
            function ReadableByteStreamControllerRespond(controller, bytesWritten) {
                bytesWritten = Number(bytesWritten);
                if (IsFiniteNonNegativeNumber(bytesWritten) === false) {
                    throw new RangeError("bytesWritten must be a finite");
                }
                assert(controller._pendingPullIntos.length > 0);
                ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
            }
            function ReadableByteStreamControllerRespondWithNewView(controller, view) {
                assert(controller._pendingPullIntos.length > 0);
                var firstDescriptor = controller._pendingPullIntos[0];
                if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
                    throw new RangeError("The region specified by view does not match byobRequest");
                }
                if (firstDescriptor.byteLength !== view.byteLength) {
                    throw new RangeError("The buffer of view has different capacity than byobRequest");
                }
                firstDescriptor.buffer = view.buffer;
                ReadableByteStreamControllerRespondInternal(controller, view.byteLength);
            }
            function streamBrandCheckException(name) {
                return new TypeError("ReadableStream.prototype." + name + " can only be used on a ReadableStream");
            }
            function readerLockException(name) {
                return new TypeError("Cannot " + name + " a stream using a released reader");
            }
            function defaultReaderBrandCheckException(name) {
                return new TypeError("ReadableStreamDefaultReader.prototype." + name + " can only be used on a ReadableStreamDefaultReader");
            }
            function defaultReaderClosedPromiseInitialize(reader) {
                reader._closedPromise = new Promise(function(resolve, reject) {
                    reader._closedPromise_resolve = resolve;
                    reader._closedPromise_reject = reject;
                });
            }
            function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
                reader._closedPromise = Promise.reject(reason);
                reader._closedPromise_resolve = undefined;
                reader._closedPromise_reject = undefined;
            }
            function defaultReaderClosedPromiseInitializeAsResolved(reader) {
                reader._closedPromise = Promise.resolve(undefined);
                reader._closedPromise_resolve = undefined;
                reader._closedPromise_reject = undefined;
            }
            function defaultReaderClosedPromiseReject(reader, reason) {
                assert(reader._closedPromise_resolve !== undefined);
                assert(reader._closedPromise_reject !== undefined);
                reader._closedPromise_reject(reason);
                reader._closedPromise_resolve = undefined;
                reader._closedPromise_reject = undefined;
            }
            function defaultReaderClosedPromiseResetToRejected(reader, reason) {
                assert(reader._closedPromise_resolve === undefined);
                assert(reader._closedPromise_reject === undefined);
                reader._closedPromise = Promise.reject(reason);
            }
            function defaultReaderClosedPromiseResolve(reader) {
                assert(reader._closedPromise_resolve !== undefined);
                assert(reader._closedPromise_reject !== undefined);
                reader._closedPromise_resolve(undefined);
                reader._closedPromise_resolve = undefined;
                reader._closedPromise_reject = undefined;
            }
            function byobReaderBrandCheckException(name) {
                return new TypeError("ReadableStreamBYOBReader.prototype." + name + " can only be used on a ReadableStreamBYOBReader");
            }
            function defaultControllerBrandCheckException(name) {
                return new TypeError("ReadableStreamDefaultController.prototype." + name + " can only be used on a ReadableStreamDefaultController");
            }
            function byobRequestBrandCheckException(name) {
                return new TypeError("ReadableStreamBYOBRequest.prototype." + name + " can only be used on a ReadableStreamBYOBRequest");
            }
            function byteStreamControllerBrandCheckException(name) {
                return new TypeError("ReadableByteStreamController.prototype." + name + " can only be used on a ReadableByteStreamController");
            }
            function ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(promise) {
                try {
                    Promise.prototype.then.call(promise, undefined, function() {});
                } catch (e) {}
            }
        }, function(module, exports, __w_pdfjs_require__) {
            "use strict";
            var transformStream = __w_pdfjs_require__(6);
            var readableStream = __w_pdfjs_require__(4);
            var writableStream = __w_pdfjs_require__(2);
            exports.TransformStream = transformStream.TransformStream;
            exports.ReadableStream = readableStream.ReadableStream;
            exports.IsReadableStreamDisturbed = readableStream.IsReadableStreamDisturbed;
            exports.ReadableStreamDefaultControllerClose = readableStream.ReadableStreamDefaultControllerClose;
            exports.ReadableStreamDefaultControllerEnqueue = readableStream.ReadableStreamDefaultControllerEnqueue;
            exports.ReadableStreamDefaultControllerError = readableStream.ReadableStreamDefaultControllerError;
            exports.ReadableStreamDefaultControllerGetDesiredSize = readableStream.ReadableStreamDefaultControllerGetDesiredSize;
            exports.AcquireWritableStreamDefaultWriter = writableStream.AcquireWritableStreamDefaultWriter;
            exports.IsWritableStream = writableStream.IsWritableStream;
            exports.IsWritableStreamLocked = writableStream.IsWritableStreamLocked;
            exports.WritableStream = writableStream.WritableStream;
            exports.WritableStreamAbort = writableStream.WritableStreamAbort;
            exports.WritableStreamDefaultControllerError = writableStream.WritableStreamDefaultControllerError;
            exports.WritableStreamDefaultWriterCloseWithErrorPropagation = writableStream.WritableStreamDefaultWriterCloseWithErrorPropagation;
            exports.WritableStreamDefaultWriterRelease = writableStream.WritableStreamDefaultWriterRelease;
            exports.WritableStreamDefaultWriterWrite = writableStream.WritableStreamDefaultWriterWrite;
        }, function(module, exports, __w_pdfjs_require__) {
            "use strict";
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var _require = __w_pdfjs_require__(1), assert = _require.assert;
            var _require2 = __w_pdfjs_require__(0), InvokeOrNoop = _require2.InvokeOrNoop, PromiseInvokeOrPerformFallback = _require2.PromiseInvokeOrPerformFallback, PromiseInvokeOrNoop = _require2.PromiseInvokeOrNoop, typeIsObject = _require2.typeIsObject;
            var _require3 = __w_pdfjs_require__(4), ReadableStream = _require3.ReadableStream, ReadableStreamDefaultControllerClose = _require3.ReadableStreamDefaultControllerClose, ReadableStreamDefaultControllerEnqueue = _require3.ReadableStreamDefaultControllerEnqueue, ReadableStreamDefaultControllerError = _require3.ReadableStreamDefaultControllerError, ReadableStreamDefaultControllerGetDesiredSize = _require3.ReadableStreamDefaultControllerGetDesiredSize;
            var _require4 = __w_pdfjs_require__(2), WritableStream = _require4.WritableStream, WritableStreamDefaultControllerError = _require4.WritableStreamDefaultControllerError;
            function TransformStreamCloseReadable(transformStream) {
                if (transformStream._errored === true) {
                    throw new TypeError("TransformStream is already errored");
                }
                if (transformStream._readableClosed === true) {
                    throw new TypeError("Readable side is already closed");
                }
                TransformStreamCloseReadableInternal(transformStream);
            }
            function TransformStreamEnqueueToReadable(transformStream, chunk) {
                if (transformStream._errored === true) {
                    throw new TypeError("TransformStream is already errored");
                }
                if (transformStream._readableClosed === true) {
                    throw new TypeError("Readable side is already closed");
                }
                var controller = transformStream._readableController;
                try {
                    ReadableStreamDefaultControllerEnqueue(controller, chunk);
                } catch (e) {
                    transformStream._readableClosed = true;
                    TransformStreamErrorIfNeeded(transformStream, e);
                    throw transformStream._storedError;
                }
                var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
                var maybeBackpressure = desiredSize <= 0;
                if (maybeBackpressure === true && transformStream._backpressure === false) {
                    TransformStreamSetBackpressure(transformStream, true);
                }
            }
            function TransformStreamError(transformStream, e) {
                if (transformStream._errored === true) {
                    throw new TypeError("TransformStream is already errored");
                }
                TransformStreamErrorInternal(transformStream, e);
            }
            function TransformStreamCloseReadableInternal(transformStream) {
                assert(transformStream._errored === false);
                assert(transformStream._readableClosed === false);
                try {
                    ReadableStreamDefaultControllerClose(transformStream._readableController);
                } catch (e) {
                    assert(false);
                }
                transformStream._readableClosed = true;
            }
            function TransformStreamErrorIfNeeded(transformStream, e) {
                if (transformStream._errored === false) {
                    TransformStreamErrorInternal(transformStream, e);
                }
            }
            function TransformStreamErrorInternal(transformStream, e) {
                assert(transformStream._errored === false);
                transformStream._errored = true;
                transformStream._storedError = e;
                if (transformStream._writableDone === false) {
                    WritableStreamDefaultControllerError(transformStream._writableController, e);
                }
                if (transformStream._readableClosed === false) {
                    ReadableStreamDefaultControllerError(transformStream._readableController, e);
                }
            }
            function TransformStreamReadableReadyPromise(transformStream) {
                assert(transformStream._backpressureChangePromise !== undefined, "_backpressureChangePromise should have been initialized");
                if (transformStream._backpressure === false) {
                    return Promise.resolve();
                }
                assert(transformStream._backpressure === true, "_backpressure should have been initialized");
                return transformStream._backpressureChangePromise;
            }
            function TransformStreamSetBackpressure(transformStream, backpressure) {
                assert(transformStream._backpressure !== backpressure, "TransformStreamSetBackpressure() should be called only when backpressure is changed");
                if (transformStream._backpressureChangePromise !== undefined) {
                    transformStream._backpressureChangePromise_resolve(backpressure);
                }
                transformStream._backpressureChangePromise = new Promise(function(resolve) {
                    transformStream._backpressureChangePromise_resolve = resolve;
                });
                transformStream._backpressureChangePromise.then(function(resolution) {
                    assert(resolution !== backpressure, "_backpressureChangePromise should be fulfilled only when backpressure is changed");
                });
                transformStream._backpressure = backpressure;
            }
            function TransformStreamDefaultTransform(chunk, transformStreamController) {
                var transformStream = transformStreamController._controlledTransformStream;
                TransformStreamEnqueueToReadable(transformStream, chunk);
                return Promise.resolve();
            }
            function TransformStreamTransform(transformStream, chunk) {
                assert(transformStream._errored === false);
                assert(transformStream._transforming === false);
                assert(transformStream._backpressure === false);
                transformStream._transforming = true;
                var transformer = transformStream._transformer;
                var controller = transformStream._transformStreamController;
                var transformPromise = PromiseInvokeOrPerformFallback(transformer, "transform", [ chunk, controller ], TransformStreamDefaultTransform, [ chunk, controller ]);
                return transformPromise.then(function() {
                    transformStream._transforming = false;
                    return TransformStreamReadableReadyPromise(transformStream);
                }, function(e) {
                    TransformStreamErrorIfNeeded(transformStream, e);
                    return Promise.reject(e);
                });
            }
            function IsTransformStreamDefaultController(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_controlledTransformStream")) {
                    return false;
                }
                return true;
            }
            function IsTransformStream(x) {
                if (!typeIsObject(x)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_transformStreamController")) {
                    return false;
                }
                return true;
            }
            var TransformStreamSink = function() {
                function TransformStreamSink(transformStream, startPromise) {
                    _classCallCheck(this, TransformStreamSink);
                    this._transformStream = transformStream;
                    this._startPromise = startPromise;
                }
                _createClass(TransformStreamSink, [ {
                    key: "start",
                    value: function start(c) {
                        var transformStream = this._transformStream;
                        transformStream._writableController = c;
                        return this._startPromise.then(function() {
                            return TransformStreamReadableReadyPromise(transformStream);
                        });
                    }
                }, {
                    key: "write",
                    value: function write(chunk) {
                        var transformStream = this._transformStream;
                        return TransformStreamTransform(transformStream, chunk);
                    }
                }, {
                    key: "abort",
                    value: function abort() {
                        var transformStream = this._transformStream;
                        transformStream._writableDone = true;
                        TransformStreamErrorInternal(transformStream, new TypeError("Writable side aborted"));
                    }
                }, {
                    key: "close",
                    value: function close() {
                        var transformStream = this._transformStream;
                        assert(transformStream._transforming === false);
                        transformStream._writableDone = true;
                        var flushPromise = PromiseInvokeOrNoop(transformStream._transformer, "flush", [ transformStream._transformStreamController ]);
                        return flushPromise.then(function() {
                            if (transformStream._errored === true) {
                                return Promise.reject(transformStream._storedError);
                            }
                            if (transformStream._readableClosed === false) {
                                TransformStreamCloseReadableInternal(transformStream);
                            }
                            return Promise.resolve();
                        })["catch"](function(r) {
                            TransformStreamErrorIfNeeded(transformStream, r);
                            return Promise.reject(transformStream._storedError);
                        });
                    }
                } ]);
                return TransformStreamSink;
            }();
            var TransformStreamSource = function() {
                function TransformStreamSource(transformStream, startPromise) {
                    _classCallCheck(this, TransformStreamSource);
                    this._transformStream = transformStream;
                    this._startPromise = startPromise;
                }
                _createClass(TransformStreamSource, [ {
                    key: "start",
                    value: function start(c) {
                        var transformStream = this._transformStream;
                        transformStream._readableController = c;
                        return this._startPromise.then(function() {
                            assert(transformStream._backpressureChangePromise !== undefined, "_backpressureChangePromise should have been initialized");
                            if (transformStream._backpressure === true) {
                                return Promise.resolve();
                            }
                            assert(transformStream._backpressure === false, "_backpressure should have been initialized");
                            return transformStream._backpressureChangePromise;
                        });
                    }
                }, {
                    key: "pull",
                    value: function pull() {
                        var transformStream = this._transformStream;
                        assert(transformStream._backpressure === true, "pull() should be never called while _backpressure is false");
                        assert(transformStream._backpressureChangePromise !== undefined, "_backpressureChangePromise should have been initialized");
                        TransformStreamSetBackpressure(transformStream, false);
                        return transformStream._backpressureChangePromise;
                    }
                }, {
                    key: "cancel",
                    value: function cancel() {
                        var transformStream = this._transformStream;
                        transformStream._readableClosed = true;
                        TransformStreamErrorInternal(transformStream, new TypeError("Readable side canceled"));
                    }
                } ]);
                return TransformStreamSource;
            }();
            var TransformStreamDefaultController = function() {
                function TransformStreamDefaultController(transformStream) {
                    _classCallCheck(this, TransformStreamDefaultController);
                    if (IsTransformStream(transformStream) === false) {
                        throw new TypeError("TransformStreamDefaultController can only be " + "constructed with a TransformStream instance");
                    }
                    if (transformStream._transformStreamController !== undefined) {
                        throw new TypeError("TransformStreamDefaultController instances can " + "only be created by the TransformStream constructor");
                    }
                    this._controlledTransformStream = transformStream;
                }
                _createClass(TransformStreamDefaultController, [ {
                    key: "enqueue",
                    value: function enqueue(chunk) {
                        if (IsTransformStreamDefaultController(this) === false) {
                            throw defaultControllerBrandCheckException("enqueue");
                        }
                        TransformStreamEnqueueToReadable(this._controlledTransformStream, chunk);
                    }
                }, {
                    key: "close",
                    value: function close() {
                        if (IsTransformStreamDefaultController(this) === false) {
                            throw defaultControllerBrandCheckException("close");
                        }
                        TransformStreamCloseReadable(this._controlledTransformStream);
                    }
                }, {
                    key: "error",
                    value: function error(reason) {
                        if (IsTransformStreamDefaultController(this) === false) {
                            throw defaultControllerBrandCheckException("error");
                        }
                        TransformStreamError(this._controlledTransformStream, reason);
                    }
                }, {
                    key: "desiredSize",
                    get: function get() {
                        if (IsTransformStreamDefaultController(this) === false) {
                            throw defaultControllerBrandCheckException("desiredSize");
                        }
                        var transformStream = this._controlledTransformStream;
                        var readableController = transformStream._readableController;
                        return ReadableStreamDefaultControllerGetDesiredSize(readableController);
                    }
                } ]);
                return TransformStreamDefaultController;
            }();
            var TransformStream = function() {
                function TransformStream() {
                    var transformer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    _classCallCheck(this, TransformStream);
                    this._transformer = transformer;
                    var readableStrategy = transformer.readableStrategy, writableStrategy = transformer.writableStrategy;
                    this._transforming = false;
                    this._errored = false;
                    this._storedError = undefined;
                    this._writableController = undefined;
                    this._readableController = undefined;
                    this._transformStreamController = undefined;
                    this._writableDone = false;
                    this._readableClosed = false;
                    this._backpressure = undefined;
                    this._backpressureChangePromise = undefined;
                    this._backpressureChangePromise_resolve = undefined;
                    this._transformStreamController = new TransformStreamDefaultController(this);
                    var startPromise_resolve = void 0;
                    var startPromise = new Promise(function(resolve) {
                        startPromise_resolve = resolve;
                    });
                    var source = new TransformStreamSource(this, startPromise);
                    this._readable = new ReadableStream(source, readableStrategy);
                    var sink = new TransformStreamSink(this, startPromise);
                    this._writable = new WritableStream(sink, writableStrategy);
                    assert(this._writableController !== undefined);
                    assert(this._readableController !== undefined);
                    var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(this._readableController);
                    TransformStreamSetBackpressure(this, desiredSize <= 0);
                    var transformStream = this;
                    var startResult = InvokeOrNoop(transformer, "start", [ transformStream._transformStreamController ]);
                    startPromise_resolve(startResult);
                    startPromise["catch"](function(e) {
                        if (transformStream._errored === false) {
                            transformStream._errored = true;
                            transformStream._storedError = e;
                        }
                    });
                }
                _createClass(TransformStream, [ {
                    key: "readable",
                    get: function get() {
                        if (IsTransformStream(this) === false) {
                            throw streamBrandCheckException("readable");
                        }
                        return this._readable;
                    }
                }, {
                    key: "writable",
                    get: function get() {
                        if (IsTransformStream(this) === false) {
                            throw streamBrandCheckException("writable");
                        }
                        return this._writable;
                    }
                } ]);
                return TransformStream;
            }();
            module.exports = {
                TransformStream: TransformStream
            };
            function defaultControllerBrandCheckException(name) {
                return new TypeError("TransformStreamDefaultController.prototype." + name + " can only be used on a TransformStreamDefaultController");
            }
            function streamBrandCheckException(name) {
                return new TypeError("TransformStream.prototype." + name + " can only be used on a TransformStream");
            }
        }, function(module, exports, __w_pdfjs_require__) {
            module.exports = __w_pdfjs_require__(5);
        } ]));
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        {
            var isURLSupported = false;
            try {
                if (typeof URL === "function" && _typeof(URL.prototype) === "object" && "origin" in URL.prototype) {
                    var u = new URL("b", "http://a");
                    u.pathname = "c%20d";
                    isURLSupported = u.href === "http://a/c%20d";
                }
            } catch (ex) {}
            if (isURLSupported) {
                exports.URL = URL;
            } else {
                var PolyfillURL = __w_pdfjs_require__(146).URL;
                var OriginalURL = __w_pdfjs_require__(3).URL;
                if (OriginalURL) {
                    PolyfillURL.createObjectURL = function(blob) {
                        return OriginalURL.createObjectURL.apply(OriginalURL, arguments);
                    };
                    PolyfillURL.revokeObjectURL = function(url) {
                        OriginalURL.revokeObjectURL(url);
                    };
                }
                exports.URL = PolyfillURL;
            }
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        (function URLConstructorClosure() {
            "use strict";
            var relative = Object.create(null);
            relative["ftp"] = 21;
            relative["file"] = 0;
            relative["gopher"] = 70;
            relative["http"] = 80;
            relative["https"] = 443;
            relative["ws"] = 80;
            relative["wss"] = 443;
            var relativePathDotMapping = Object.create(null);
            relativePathDotMapping["%2e"] = ".";
            relativePathDotMapping[".%2e"] = "..";
            relativePathDotMapping["%2e."] = "..";
            relativePathDotMapping["%2e%2e"] = "..";
            function isRelativeScheme(scheme) {
                return relative[scheme] !== undefined;
            }
            function invalid() {
                clear.call(this);
                this._isInvalid = true;
            }
            function IDNAToASCII(h) {
                if (h === "") {
                    invalid.call(this);
                }
                return h.toLowerCase();
            }
            function percentEscape(c) {
                var unicode = c.charCodeAt(0);
                if (unicode > 32 && unicode < 127 && [ 34, 35, 60, 62, 63, 96 ].indexOf(unicode) === -1) {
                    return c;
                }
                return encodeURIComponent(c);
            }
            function percentEscapeQuery(c) {
                var unicode = c.charCodeAt(0);
                if (unicode > 32 && unicode < 127 && [ 34, 35, 60, 62, 96 ].indexOf(unicode) === -1) {
                    return c;
                }
                return encodeURIComponent(c);
            }
            var EOF, ALPHA = /[a-zA-Z]/, ALPHANUMERIC = /[a-zA-Z0-9\+\-\.]/;
            function parse(input, stateOverride, base) {
                function err(message) {
                    errors.push(message);
                }
                var state = stateOverride || "scheme start", cursor = 0, buffer = "", seenAt = false, seenBracket = false, errors = [];
                loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {
                    var c = input[cursor];
                    switch (state) {
                      case "scheme start":
                        if (c && ALPHA.test(c)) {
                            buffer += c.toLowerCase();
                            state = "scheme";
                        } else if (!stateOverride) {
                            buffer = "";
                            state = "no scheme";
                            continue;
                        } else {
                            err("Invalid scheme.");
                            break loop;
                        }
                        break;

                      case "scheme":
                        if (c && ALPHANUMERIC.test(c)) {
                            buffer += c.toLowerCase();
                        } else if (c === ":") {
                            this._scheme = buffer;
                            buffer = "";
                            if (stateOverride) {
                                break loop;
                            }
                            if (isRelativeScheme(this._scheme)) {
                                this._isRelative = true;
                            }
                            if (this._scheme === "file") {
                                state = "relative";
                            } else if (this._isRelative && base && base._scheme === this._scheme) {
                                state = "relative or authority";
                            } else if (this._isRelative) {
                                state = "authority first slash";
                            } else {
                                state = "scheme data";
                            }
                        } else if (!stateOverride) {
                            buffer = "";
                            cursor = 0;
                            state = "no scheme";
                            continue;
                        } else if (c === EOF) {
                            break loop;
                        } else {
                            err("Code point not allowed in scheme: " + c);
                            break loop;
                        }
                        break;

                      case "scheme data":
                        if (c === "?") {
                            this._query = "?";
                            state = "query";
                        } else if (c === "#") {
                            this._fragment = "#";
                            state = "fragment";
                        } else {
                            if (c !== EOF && c !== "\t" && c !== "\n" && c !== "\r") {
                                this._schemeData += percentEscape(c);
                            }
                        }
                        break;

                      case "no scheme":
                        if (!base || !isRelativeScheme(base._scheme)) {
                            err("Missing scheme.");
                            invalid.call(this);
                        } else {
                            state = "relative";
                            continue;
                        }
                        break;

                      case "relative or authority":
                        if (c === "/" && input[cursor + 1] === "/") {
                            state = "authority ignore slashes";
                        } else {
                            err("Expected /, got: " + c);
                            state = "relative";
                            continue;
                        }
                        break;

                      case "relative":
                        this._isRelative = true;
                        if (this._scheme !== "file") {
                            this._scheme = base._scheme;
                        }
                        if (c === EOF) {
                            this._host = base._host;
                            this._port = base._port;
                            this._path = base._path.slice();
                            this._query = base._query;
                            this._username = base._username;
                            this._password = base._password;
                            break loop;
                        } else if (c === "/" || c === "\\") {
                            if (c === "\\") {
                                err("\\ is an invalid code point.");
                            }
                            state = "relative slash";
                        } else if (c === "?") {
                            this._host = base._host;
                            this._port = base._port;
                            this._path = base._path.slice();
                            this._query = "?";
                            this._username = base._username;
                            this._password = base._password;
                            state = "query";
                        } else if (c === "#") {
                            this._host = base._host;
                            this._port = base._port;
                            this._path = base._path.slice();
                            this._query = base._query;
                            this._fragment = "#";
                            this._username = base._username;
                            this._password = base._password;
                            state = "fragment";
                        } else {
                            var nextC = input[cursor + 1];
                            var nextNextC = input[cursor + 2];
                            if (this._scheme !== "file" || !ALPHA.test(c) || nextC !== ":" && nextC !== "|" || nextNextC !== EOF && nextNextC !== "/" && nextNextC !== "\\" && nextNextC !== "?" && nextNextC !== "#") {
                                this._host = base._host;
                                this._port = base._port;
                                this._username = base._username;
                                this._password = base._password;
                                this._path = base._path.slice();
                                this._path.pop();
                            }
                            state = "relative path";
                            continue;
                        }
                        break;

                      case "relative slash":
                        if (c === "/" || c === "\\") {
                            if (c === "\\") {
                                err("\\ is an invalid code point.");
                            }
                            if (this._scheme === "file") {
                                state = "file host";
                            } else {
                                state = "authority ignore slashes";
                            }
                        } else {
                            if (this._scheme !== "file") {
                                this._host = base._host;
                                this._port = base._port;
                                this._username = base._username;
                                this._password = base._password;
                            }
                            state = "relative path";
                            continue;
                        }
                        break;

                      case "authority first slash":
                        if (c === "/") {
                            state = "authority second slash";
                        } else {
                            err("Expected '/', got: " + c);
                            state = "authority ignore slashes";
                            continue;
                        }
                        break;

                      case "authority second slash":
                        state = "authority ignore slashes";
                        if (c !== "/") {
                            err("Expected '/', got: " + c);
                            continue;
                        }
                        break;

                      case "authority ignore slashes":
                        if (c !== "/" && c !== "\\") {
                            state = "authority";
                            continue;
                        } else {
                            err("Expected authority, got: " + c);
                        }
                        break;

                      case "authority":
                        if (c === "@") {
                            if (seenAt) {
                                err("@ already seen.");
                                buffer += "%40";
                            }
                            seenAt = true;
                            for (var i = 0; i < buffer.length; i++) {
                                var cp = buffer[i];
                                if (cp === "\t" || cp === "\n" || cp === "\r") {
                                    err("Invalid whitespace in authority.");
                                    continue;
                                }
                                if (cp === ":" && this._password === null) {
                                    this._password = "";
                                    continue;
                                }
                                var tempC = percentEscape(cp);
                                if (this._password !== null) {
                                    this._password += tempC;
                                } else {
                                    this._username += tempC;
                                }
                            }
                            buffer = "";
                        } else if (c === EOF || c === "/" || c === "\\" || c === "?" || c === "#") {
                            cursor -= buffer.length;
                            buffer = "";
                            state = "host";
                            continue;
                        } else {
                            buffer += c;
                        }
                        break;

                      case "file host":
                        if (c === EOF || c === "/" || c === "\\" || c === "?" || c === "#") {
                            if (buffer.length === 2 && ALPHA.test(buffer[0]) && (buffer[1] === ":" || buffer[1] === "|")) {
                                state = "relative path";
                            } else if (buffer.length === 0) {
                                state = "relative path start";
                            } else {
                                this._host = IDNAToASCII.call(this, buffer);
                                buffer = "";
                                state = "relative path start";
                            }
                            continue;
                        } else if (c === "\t" || c === "\n" || c === "\r") {
                            err("Invalid whitespace in file host.");
                        } else {
                            buffer += c;
                        }
                        break;

                      case "host":
                      case "hostname":
                        if (c === ":" && !seenBracket) {
                            this._host = IDNAToASCII.call(this, buffer);
                            buffer = "";
                            state = "port";
                            if (stateOverride === "hostname") {
                                break loop;
                            }
                        } else if (c === EOF || c === "/" || c === "\\" || c === "?" || c === "#") {
                            this._host = IDNAToASCII.call(this, buffer);
                            buffer = "";
                            state = "relative path start";
                            if (stateOverride) {
                                break loop;
                            }
                            continue;
                        } else if (c !== "\t" && c !== "\n" && c !== "\r") {
                            if (c === "[") {
                                seenBracket = true;
                            } else if (c === "]") {
                                seenBracket = false;
                            }
                            buffer += c;
                        } else {
                            err("Invalid code point in host/hostname: " + c);
                        }
                        break;

                      case "port":
                        if (/[0-9]/.test(c)) {
                            buffer += c;
                        } else if (c === EOF || c === "/" || c === "\\" || c === "?" || c === "#" || stateOverride) {
                            if (buffer !== "") {
                                var temp = parseInt(buffer, 10);
                                if (temp !== relative[this._scheme]) {
                                    this._port = temp + "";
                                }
                                buffer = "";
                            }
                            if (stateOverride) {
                                break loop;
                            }
                            state = "relative path start";
                            continue;
                        } else if (c === "\t" || c === "\n" || c === "\r") {
                            err("Invalid code point in port: " + c);
                        } else {
                            invalid.call(this);
                        }
                        break;

                      case "relative path start":
                        if (c === "\\") {
                            err("'\\' not allowed in path.");
                        }
                        state = "relative path";
                        if (c !== "/" && c !== "\\") {
                            continue;
                        }
                        break;

                      case "relative path":
                        if (c === EOF || c === "/" || c === "\\" || !stateOverride && (c === "?" || c === "#")) {
                            if (c === "\\") {
                                err("\\ not allowed in relative path.");
                            }
                            var tmp;
                            if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {
                                buffer = tmp;
                            }
                            if (buffer === "..") {
                                this._path.pop();
                                if (c !== "/" && c !== "\\") {
                                    this._path.push("");
                                }
                            } else if (buffer === "." && c !== "/" && c !== "\\") {
                                this._path.push("");
                            } else if (buffer !== ".") {
                                if (this._scheme === "file" && this._path.length === 0 && buffer.length === 2 && ALPHA.test(buffer[0]) && buffer[1] === "|") {
                                    buffer = buffer[0] + ":";
                                }
                                this._path.push(buffer);
                            }
                            buffer = "";
                            if (c === "?") {
                                this._query = "?";
                                state = "query";
                            } else if (c === "#") {
                                this._fragment = "#";
                                state = "fragment";
                            }
                        } else if (c !== "\t" && c !== "\n" && c !== "\r") {
                            buffer += percentEscape(c);
                        }
                        break;

                      case "query":
                        if (!stateOverride && c === "#") {
                            this._fragment = "#";
                            state = "fragment";
                        } else if (c !== EOF && c !== "\t" && c !== "\n" && c !== "\r") {
                            this._query += percentEscapeQuery(c);
                        }
                        break;

                      case "fragment":
                        if (c !== EOF && c !== "\t" && c !== "\n" && c !== "\r") {
                            this._fragment += c;
                        }
                        break;
                    }
                    cursor++;
                }
            }
            function clear() {
                this._scheme = "";
                this._schemeData = "";
                this._username = "";
                this._password = null;
                this._host = "";
                this._port = "";
                this._path = [];
                this._query = "";
                this._fragment = "";
                this._isInvalid = false;
                this._isRelative = false;
            }
            function JURL(url, base) {
                if (base !== undefined && !(base instanceof JURL)) {
                    base = new JURL(String(base));
                }
                this._url = url;
                clear.call(this);
                var input = url.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, "");
                parse.call(this, input, null, base);
            }
            JURL.prototype = {
                toString: function toString() {
                    return this.href;
                },
                get href() {
                    if (this._isInvalid) {
                        return this._url;
                    }
                    var authority = "";
                    if (this._username !== "" || this._password !== null) {
                        authority = this._username + (this._password !== null ? ":" + this._password : "") + "@";
                    }
                    return this.protocol + (this._isRelative ? "//" + authority + this.host : "") + this.pathname + this._query + this._fragment;
                },
                set href(value) {
                    clear.call(this);
                    parse.call(this, value);
                },
                get protocol() {
                    return this._scheme + ":";
                },
                set protocol(value) {
                    if (this._isInvalid) {
                        return;
                    }
                    parse.call(this, value + ":", "scheme start");
                },
                get host() {
                    return this._isInvalid ? "" : this._port ? this._host + ":" + this._port : this._host;
                },
                set host(value) {
                    if (this._isInvalid || !this._isRelative) {
                        return;
                    }
                    parse.call(this, value, "host");
                },
                get hostname() {
                    return this._host;
                },
                set hostname(value) {
                    if (this._isInvalid || !this._isRelative) {
                        return;
                    }
                    parse.call(this, value, "hostname");
                },
                get port() {
                    return this._port;
                },
                set port(value) {
                    if (this._isInvalid || !this._isRelative) {
                        return;
                    }
                    parse.call(this, value, "port");
                },
                get pathname() {
                    return this._isInvalid ? "" : this._isRelative ? "/" + this._path.join("/") : this._schemeData;
                },
                set pathname(value) {
                    if (this._isInvalid || !this._isRelative) {
                        return;
                    }
                    this._path = [];
                    parse.call(this, value, "relative path start");
                },
                get search() {
                    return this._isInvalid || !this._query || this._query === "?" ? "" : this._query;
                },
                set search(value) {
                    if (this._isInvalid || !this._isRelative) {
                        return;
                    }
                    this._query = "?";
                    if (value[0] === "?") {
                        value = value.slice(1);
                    }
                    parse.call(this, value, "query");
                },
                get hash() {
                    return this._isInvalid || !this._fragment || this._fragment === "#" ? "" : this._fragment;
                },
                set hash(value) {
                    if (this._isInvalid) {
                        return;
                    }
                    this._fragment = "#";
                    if (value[0] === "#") {
                        value = value.slice(1);
                    }
                    parse.call(this, value, "fragment");
                },
                get origin() {
                    var host;
                    if (this._isInvalid || !this._scheme) {
                        return "";
                    }
                    switch (this._scheme) {
                      case "data":
                      case "file":
                      case "javascript":
                      case "mailto":
                        return "null";

                      case "blob":
                        try {
                            return new JURL(this._schemeData).origin || "null";
                        } catch (_) {}
                        return "null";
                    }
                    host = this.host;
                    if (!host) {
                        return "";
                    }
                    return this._scheme + "://" + host;
                }
            };
            exports.URL = JURL;
        })();
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getDocument = getDocument;
        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;
        exports.build = exports.version = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFWorker = exports.PDFDataRangeTransport = exports.LoopbackPort = void 0;
        var _regenerator = _interopRequireDefault(__w_pdfjs_require__(148));
        var _util = __w_pdfjs_require__(1);
        var _display_utils = __w_pdfjs_require__(151);
        var _font_loader = __w_pdfjs_require__(152);
        var _api_compatibility = __w_pdfjs_require__(153);
        var _canvas = __w_pdfjs_require__(154);
        var _global_scope = _interopRequireDefault(__w_pdfjs_require__(3));
        var _worker_options = __w_pdfjs_require__(156);
        var _message_handler = __w_pdfjs_require__(157);
        var _metadata = __w_pdfjs_require__(158);
        var _transport_stream = __w_pdfjs_require__(160);
        var _webgl = __w_pdfjs_require__(161);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
        }
        function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
        function _iterableToArrayLimit(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
        function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }
        function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
        }
        function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance");
        }
        function _iterableToArray(iter) {
            if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
        }
        function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                }
                return arr2;
            }
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        var DEFAULT_RANGE_CHUNK_SIZE = 65536;
        var isWorkerDisabled = false;
        var fallbackWorkerSrc;
        var fakeWorkerFilesLoader = null;
        {
            var useRequireEnsure = false;
            if (typeof window === "undefined") {
                isWorkerDisabled = true;
                if (typeof require.ensure === "undefined") {
                    require.ensure = require("node-ensure");
                }
                useRequireEnsure = true;
            } else if (typeof require !== "undefined" && typeof require.ensure === "function") {
                useRequireEnsure = true;
            }
            if (typeof requirejs !== "undefined" && requirejs.toUrl) {
                fallbackWorkerSrc = requirejs.toUrl("pdfjs-dist/build/pdf.worker.js");
            }
            var dynamicLoaderSupported = typeof requirejs !== "undefined" && requirejs.load;
            fakeWorkerFilesLoader = useRequireEnsure ? function() {
                return new Promise(function(resolve, reject) {
                    require.ensure([], function() {
                        try {
                            var worker;
                            worker = require("./pdf.worker.js");
                            resolve(worker.WorkerMessageHandler);
                        } catch (ex) {
                            reject(ex);
                        }
                    }, reject, "pdfjsWorker");
                });
            } : dynamicLoaderSupported ? function() {
                return new Promise(function(resolve, reject) {
                    requirejs([ "pdfjs-dist/build/pdf.worker" ], function(worker) {
                        try {
                            resolve(worker.WorkerMessageHandler);
                        } catch (ex) {
                            reject(ex);
                        }
                    }, reject);
                });
            } : null;
            if (!fallbackWorkerSrc && (typeof document === "undefined" ? "undefined" : _typeof(document)) === "object" && "currentScript" in document) {
                var pdfjsFilePath = document.currentScript && document.currentScript.src;
                if (pdfjsFilePath) {
                    fallbackWorkerSrc = pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2");
                }
            }
        }
        var createPDFNetworkStream;
        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {
            createPDFNetworkStream = pdfNetworkStreamFactory;
        }
        function getDocument(src) {
            var task = new PDFDocumentLoadingTask();
            var source;
            if (typeof src === "string") {
                source = {
                    url: src
                };
            } else if ((0, _util.isArrayBuffer)(src)) {
                source = {
                    data: src
                };
            } else if (src instanceof PDFDataRangeTransport) {
                source = {
                    range: src
                };
            } else {
                if (_typeof(src) !== "object") {
                    throw new Error("Invalid parameter in getDocument, " + "need either Uint8Array, string or a parameter object");
                }
                if (!src.url && !src.data && !src.range) {
                    throw new Error("Invalid parameter object: need either .data, .range or .url");
                }
                source = src;
            }
            var params = Object.create(null);
            var rangeTransport = null, worker = null;
            for (var key in source) {
                if (key === "url" && typeof window !== "undefined") {
                    params[key] = new _util.URL(source[key], window.location).href;
                    continue;
                } else if (key === "range") {
                    rangeTransport = source[key];
                    continue;
                } else if (key === "worker") {
                    worker = source[key];
                    continue;
                } else if (key === "data" && !(source[key] instanceof Uint8Array)) {
                    var pdfBytes = source[key];
                    if (typeof pdfBytes === "string") {
                        params[key] = (0, _util.stringToBytes)(pdfBytes);
                    } else if (_typeof(pdfBytes) === "object" && pdfBytes !== null && !isNaN(pdfBytes.length)) {
                        params[key] = new Uint8Array(pdfBytes);
                    } else if ((0, _util.isArrayBuffer)(pdfBytes)) {
                        params[key] = new Uint8Array(pdfBytes);
                    } else {
                        throw new Error("Invalid PDF binary data: either typed array, " + "string or array-like object is expected in the " + "data property.");
                    }
                    continue;
                }
                params[key] = source[key];
            }
            params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;
            params.CMapReaderFactory = params.CMapReaderFactory || _display_utils.DOMCMapReaderFactory;
            params.ignoreErrors = params.stopAtErrors !== true;
            params.pdfBug = params.pdfBug === true;
            var NativeImageDecoderValues = Object.values(_util.NativeImageDecoding);
            if (params.nativeImageDecoderSupport === undefined || !NativeImageDecoderValues.includes(params.nativeImageDecoderSupport)) {
                params.nativeImageDecoderSupport = _api_compatibility.apiCompatibilityParams.nativeImageDecoderSupport || _util.NativeImageDecoding.DECODE;
            }
            if (!Number.isInteger(params.maxImageSize)) {
                params.maxImageSize = -1;
            }
            if (typeof params.isEvalSupported !== "boolean") {
                params.isEvalSupported = true;
            }
            if (typeof params.disableFontFace !== "boolean") {
                params.disableFontFace = _api_compatibility.apiCompatibilityParams.disableFontFace || false;
            }
            if (typeof params.disableRange !== "boolean") {
                params.disableRange = false;
            }
            if (typeof params.disableStream !== "boolean") {
                params.disableStream = false;
            }
            if (typeof params.disableAutoFetch !== "boolean") {
                params.disableAutoFetch = false;
            }
            if (typeof params.disableCreateObjectURL !== "boolean") {
                params.disableCreateObjectURL = _api_compatibility.apiCompatibilityParams.disableCreateObjectURL || false;
            }
            (0, _util.setVerbosityLevel)(params.verbosity);
            if (!worker) {
                var workerParams = {
                    postMessageTransfers: params.postMessageTransfers,
                    verbosity: params.verbosity,
                    port: _worker_options.GlobalWorkerOptions.workerPort
                };
                worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);
                task._worker = worker;
            }
            var docId = task.docId;
            worker.promise.then(function() {
                if (task.destroyed) {
                    throw new Error("Loading aborted");
                }
                return _fetchDocument(worker, params, rangeTransport, docId).then(function(workerId) {
                    if (task.destroyed) {
                        throw new Error("Loading aborted");
                    }
                    var networkStream;
                    if (rangeTransport) {
                        networkStream = new _transport_stream.PDFDataTransportStream({
                            length: params.length,
                            initialData: params.initialData,
                            progressiveDone: params.progressiveDone,
                            disableRange: params.disableRange,
                            disableStream: params.disableStream
                        }, rangeTransport);
                    } else if (!params.data) {
                        networkStream = createPDFNetworkStream({
                            url: params.url,
                            length: params.length,
                            httpHeaders: params.httpHeaders,
                            withCredentials: params.withCredentials,
                            rangeChunkSize: params.rangeChunkSize,
                            disableRange: params.disableRange,
                            disableStream: params.disableStream
                        });
                    }
                    var messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);
                    messageHandler.postMessageTransfers = worker.postMessageTransfers;
                    var transport = new WorkerTransport(messageHandler, task, networkStream, params);
                    task._transport = transport;
                    messageHandler.send("Ready", null);
                });
            })["catch"](task._capability.reject);
            return task;
        }
        function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {
            if (worker.destroyed) {
                return Promise.reject(new Error("Worker was destroyed"));
            }
            if (pdfDataRangeTransport) {
                source.length = pdfDataRangeTransport.length;
                source.initialData = pdfDataRangeTransport.initialData;
                source.progressiveDone = pdfDataRangeTransport.progressiveDone;
            }
            return worker.messageHandler.sendWithPromise("GetDocRequest", {
                docId: docId,
                apiVersion: "2.2.154",
                source: {
                    data: source.data,
                    url: source.url,
                    password: source.password,
                    disableAutoFetch: source.disableAutoFetch,
                    rangeChunkSize: source.rangeChunkSize,
                    length: source.length
                },
                maxImageSize: source.maxImageSize,
                disableFontFace: source.disableFontFace,
                disableCreateObjectURL: source.disableCreateObjectURL,
                postMessageTransfers: worker.postMessageTransfers,
                docBaseUrl: source.docBaseUrl,
                nativeImageDecoderSupport: source.nativeImageDecoderSupport,
                ignoreErrors: source.ignoreErrors,
                isEvalSupported: source.isEvalSupported
            }).then(function(workerId) {
                if (worker.destroyed) {
                    throw new Error("Worker was destroyed");
                }
                return workerId;
            });
        }
        var PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {
            var nextDocumentId = 0;
            var PDFDocumentLoadingTask = function() {
                function PDFDocumentLoadingTask() {
                    _classCallCheck(this, PDFDocumentLoadingTask);
                    this._capability = (0, _util.createPromiseCapability)();
                    this._transport = null;
                    this._worker = null;
                    this.docId = "d" + nextDocumentId++;
                    this.destroyed = false;
                    this.onPassword = null;
                    this.onProgress = null;
                    this.onUnsupportedFeature = null;
                }
                _createClass(PDFDocumentLoadingTask, [ {
                    key: "destroy",
                    value: function destroy() {
                        var _this = this;
                        this.destroyed = true;
                        var transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();
                        return transportDestroyed.then(function() {
                            _this._transport = null;
                            if (_this._worker) {
                                _this._worker.destroy();
                                _this._worker = null;
                            }
                        });
                    }
                }, {
                    key: "then",
                    value: function then(onFulfilled, onRejected) {
                        (0, _display_utils.deprecated)("PDFDocumentLoadingTask.then method, " + "use the `promise` getter instead.");
                        return this.promise.then.apply(this.promise, arguments);
                    }
                }, {
                    key: "promise",
                    get: function get() {
                        return this._capability.promise;
                    }
                } ]);
                return PDFDocumentLoadingTask;
            }();
            return PDFDocumentLoadingTask;
        }();
        var PDFDataRangeTransport = function() {
            function PDFDataRangeTransport(length, initialData) {
                var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                _classCallCheck(this, PDFDataRangeTransport);
                this.length = length;
                this.initialData = initialData;
                this.progressiveDone = progressiveDone;
                this._rangeListeners = [];
                this._progressListeners = [];
                this._progressiveReadListeners = [];
                this._progressiveDoneListeners = [];
                this._readyCapability = (0, _util.createPromiseCapability)();
            }
            _createClass(PDFDataRangeTransport, [ {
                key: "addRangeListener",
                value: function addRangeListener(listener) {
                    this._rangeListeners.push(listener);
                }
            }, {
                key: "addProgressListener",
                value: function addProgressListener(listener) {
                    this._progressListeners.push(listener);
                }
            }, {
                key: "addProgressiveReadListener",
                value: function addProgressiveReadListener(listener) {
                    this._progressiveReadListeners.push(listener);
                }
            }, {
                key: "addProgressiveDoneListener",
                value: function addProgressiveDoneListener(listener) {
                    this._progressiveDoneListeners.push(listener);
                }
            }, {
                key: "onDataRange",
                value: function onDataRange(begin, chunk) {
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = this._rangeListeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var listener = _step.value;
                            listener(begin, chunk);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                                _iterator["return"]();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
            }, {
                key: "onDataProgress",
                value: function onDataProgress(loaded, total) {
                    var _this2 = this;
                    this._readyCapability.promise.then(function() {
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;
                        try {
                            for (var _iterator2 = _this2._progressListeners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var listener = _step2.value;
                                listener(loaded, total);
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                                    _iterator2["return"]();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    });
                }
            }, {
                key: "onDataProgressiveRead",
                value: function onDataProgressiveRead(chunk) {
                    var _this3 = this;
                    this._readyCapability.promise.then(function() {
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;
                        try {
                            for (var _iterator3 = _this3._progressiveReadListeners[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                var listener = _step3.value;
                                listener(chunk);
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                                    _iterator3["return"]();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }
                    });
                }
            }, {
                key: "onDataProgressiveDone",
                value: function onDataProgressiveDone() {
                    var _this4 = this;
                    this._readyCapability.promise.then(function() {
                        var _iteratorNormalCompletion4 = true;
                        var _didIteratorError4 = false;
                        var _iteratorError4 = undefined;
                        try {
                            for (var _iterator4 = _this4._progressiveDoneListeners[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                var listener = _step4.value;
                                listener();
                            }
                        } catch (err) {
                            _didIteratorError4 = true;
                            _iteratorError4 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                                    _iterator4["return"]();
                                }
                            } finally {
                                if (_didIteratorError4) {
                                    throw _iteratorError4;
                                }
                            }
                        }
                    });
                }
            }, {
                key: "transportReady",
                value: function transportReady() {
                    this._readyCapability.resolve();
                }
            }, {
                key: "requestDataRange",
                value: function requestDataRange(begin, end) {
                    (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");
                }
            }, {
                key: "abort",
                value: function abort() {}
            } ]);
            return PDFDataRangeTransport;
        }();
        exports.PDFDataRangeTransport = PDFDataRangeTransport;
        var PDFDocumentProxy = function() {
            function PDFDocumentProxy(pdfInfo, transport) {
                _classCallCheck(this, PDFDocumentProxy);
                this._pdfInfo = pdfInfo;
                this._transport = transport;
            }
            _createClass(PDFDocumentProxy, [ {
                key: "getPage",
                value: function getPage(pageNumber) {
                    return this._transport.getPage(pageNumber);
                }
            }, {
                key: "getPageIndex",
                value: function getPageIndex(ref) {
                    return this._transport.getPageIndex(ref);
                }
            }, {
                key: "getDestinations",
                value: function getDestinations() {
                    return this._transport.getDestinations();
                }
            }, {
                key: "getDestination",
                value: function getDestination(id) {
                    return this._transport.getDestination(id);
                }
            }, {
                key: "getPageLabels",
                value: function getPageLabels() {
                    return this._transport.getPageLabels();
                }
            }, {
                key: "getPageLayout",
                value: function getPageLayout() {
                    return this._transport.getPageLayout();
                }
            }, {
                key: "getPageMode",
                value: function getPageMode() {
                    return this._transport.getPageMode();
                }
            }, {
                key: "getViewerPreferences",
                value: function getViewerPreferences() {
                    return this._transport.getViewerPreferences();
                }
            }, {
                key: "getOpenActionDestination",
                value: function getOpenActionDestination() {
                    return this._transport.getOpenActionDestination();
                }
            }, {
                key: "getAttachments",
                value: function getAttachments() {
                    return this._transport.getAttachments();
                }
            }, {
                key: "getJavaScript",
                value: function getJavaScript() {
                    return this._transport.getJavaScript();
                }
            }, {
                key: "getOutline",
                value: function getOutline() {
                    return this._transport.getOutline();
                }
            }, {
                key: "getPermissions",
                value: function getPermissions() {
                    return this._transport.getPermissions();
                }
            }, {
                key: "getMetadata",
                value: function getMetadata() {
                    return this._transport.getMetadata();
                }
            }, {
                key: "getData",
                value: function getData() {
                    return this._transport.getData();
                }
            }, {
                key: "getDownloadInfo",
                value: function getDownloadInfo() {
                    return this._transport.downloadInfoCapability.promise;
                }
            }, {
                key: "getStats",
                value: function getStats() {
                    return this._transport.getStats();
                }
            }, {
                key: "cleanup",
                value: function cleanup() {
                    this._transport.startCleanup();
                }
            }, {
                key: "destroy",
                value: function destroy() {
                    return this.loadingTask.destroy();
                }
            }, {
                key: "numPages",
                get: function get() {
                    return this._pdfInfo.numPages;
                }
            }, {
                key: "fingerprint",
                get: function get() {
                    return this._pdfInfo.fingerprint;
                }
            }, {
                key: "loadingParams",
                get: function get() {
                    return this._transport.loadingParams;
                }
            }, {
                key: "loadingTask",
                get: function get() {
                    return this._transport.loadingTask;
                }
            } ]);
            return PDFDocumentProxy;
        }();
        exports.PDFDocumentProxy = PDFDocumentProxy;
        var PDFPageProxy = function() {
            function PDFPageProxy(pageIndex, pageInfo, transport) {
                var pdfBug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                _classCallCheck(this, PDFPageProxy);
                this.pageIndex = pageIndex;
                this._pageInfo = pageInfo;
                this._transport = transport;
                this._stats = pdfBug ? new _display_utils.StatTimer() : _display_utils.DummyStatTimer;
                this._pdfBug = pdfBug;
                this.commonObjs = transport.commonObjs;
                this.objs = new PDFObjects();
                this.cleanupAfterRender = false;
                this.pendingCleanup = false;
                this.intentStates = Object.create(null);
                this.destroyed = false;
            }
            _createClass(PDFPageProxy, [ {
                key: "getViewport",
                value: function getViewport() {
                    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, scale = _ref.scale, _ref$rotation = _ref.rotation, rotation = _ref$rotation === void 0 ? this.rotate : _ref$rotation, _ref$dontFlip = _ref.dontFlip, dontFlip = _ref$dontFlip === void 0 ? false : _ref$dontFlip;
                    if (arguments.length > 1 || typeof arguments[0] === "number") {
                        (0, _display_utils.deprecated)("getViewport is called with obsolete arguments.");
                        scale = arguments[0];
                        rotation = typeof arguments[1] === "number" ? arguments[1] : this.rotate;
                        dontFlip = typeof arguments[2] === "boolean" ? arguments[2] : false;
                    }
                    return new _display_utils.PageViewport({
                        viewBox: this.view,
                        scale: scale,
                        rotation: rotation,
                        dontFlip: dontFlip
                    });
                }
            }, {
                key: "getAnnotations",
                value: function getAnnotations() {
                    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref2$intent = _ref2.intent, intent = _ref2$intent === void 0 ? null : _ref2$intent;
                    if (!this.annotationsPromise || this.annotationsIntent !== intent) {
                        this.annotationsPromise = this._transport.getAnnotations(this.pageIndex, intent);
                        this.annotationsIntent = intent;
                    }
                    return this.annotationsPromise;
                }
            }, {
                key: "render",
                value: function render(_ref3) {
                    var _this5 = this;
                    var canvasContext = _ref3.canvasContext, viewport = _ref3.viewport, _ref3$intent = _ref3.intent, intent = _ref3$intent === void 0 ? "display" : _ref3$intent, _ref3$enableWebGL = _ref3.enableWebGL, enableWebGL = _ref3$enableWebGL === void 0 ? false : _ref3$enableWebGL, _ref3$renderInteracti = _ref3.renderInteractiveForms, renderInteractiveForms = _ref3$renderInteracti === void 0 ? false : _ref3$renderInteracti, _ref3$transform = _ref3.transform, transform = _ref3$transform === void 0 ? null : _ref3$transform, _ref3$imageLayer = _ref3.imageLayer, imageLayer = _ref3$imageLayer === void 0 ? null : _ref3$imageLayer, _ref3$canvasFactory = _ref3.canvasFactory, canvasFactory = _ref3$canvasFactory === void 0 ? null : _ref3$canvasFactory, _ref3$background = _ref3.background, background = _ref3$background === void 0 ? null : _ref3$background;
                    var stats = this._stats;
                    stats.time("Overall");
                    this.pendingCleanup = false;
                    var renderingIntent = intent === "print" ? "print" : "display";
                    var canvasFactoryInstance = canvasFactory || new _display_utils.DOMCanvasFactory();
                    var webGLContext = new _webgl.WebGLContext({
                        enable: enableWebGL
                    });
                    if (!this.intentStates[renderingIntent]) {
                        this.intentStates[renderingIntent] = Object.create(null);
                    }
                    var intentState = this.intentStates[renderingIntent];
                    if (!intentState.displayReadyCapability) {
                        intentState.receivingOperatorList = true;
                        intentState.displayReadyCapability = (0, _util.createPromiseCapability)();
                        intentState.operatorList = {
                            fnArray: [],
                            argsArray: [],
                            lastChunk: false
                        };
                        stats.time("Page Request");
                        this._transport.messageHandler.send("RenderPageRequest", {
                            pageIndex: this.pageNumber - 1,
                            intent: renderingIntent,
                            renderInteractiveForms: renderInteractiveForms === true
                        });
                    }
                    var complete = function complete(error) {
                        var i = intentState.renderTasks.indexOf(internalRenderTask);
                        if (i >= 0) {
                            intentState.renderTasks.splice(i, 1);
                        }
                        if (_this5.cleanupAfterRender) {
                            _this5.pendingCleanup = true;
                        }
                        _this5._tryCleanup();
                        if (error) {
                            internalRenderTask.capability.reject(error);
                        } else {
                            internalRenderTask.capability.resolve();
                        }
                        stats.timeEnd("Rendering");
                        stats.timeEnd("Overall");
                    };
                    var internalRenderTask = new InternalRenderTask({
                        callback: complete,
                        params: {
                            canvasContext: canvasContext,
                            viewport: viewport,
                            transform: transform,
                            imageLayer: imageLayer,
                            background: background
                        },
                        objs: this.objs,
                        commonObjs: this.commonObjs,
                        operatorList: intentState.operatorList,
                        pageNumber: this.pageNumber,
                        canvasFactory: canvasFactoryInstance,
                        webGLContext: webGLContext,
                        useRequestAnimationFrame: renderingIntent !== "print",
                        pdfBug: this._pdfBug
                    });
                    if (!intentState.renderTasks) {
                        intentState.renderTasks = [];
                    }
                    intentState.renderTasks.push(internalRenderTask);
                    var renderTask = internalRenderTask.task;
                    intentState.displayReadyCapability.promise.then(function(transparency) {
                        if (_this5.pendingCleanup) {
                            complete();
                            return;
                        }
                        stats.time("Rendering");
                        internalRenderTask.initializeGraphics(transparency);
                        internalRenderTask.operatorListChanged();
                    })["catch"](complete);
                    return renderTask;
                }
            }, {
                key: "getOperatorList",
                value: function getOperatorList() {
                    function operatorListChanged() {
                        if (intentState.operatorList.lastChunk) {
                            intentState.opListReadCapability.resolve(intentState.operatorList);
                            var i = intentState.renderTasks.indexOf(opListTask);
                            if (i >= 0) {
                                intentState.renderTasks.splice(i, 1);
                            }
                        }
                    }
                    var renderingIntent = "oplist";
                    if (!this.intentStates[renderingIntent]) {
                        this.intentStates[renderingIntent] = Object.create(null);
                    }
                    var intentState = this.intentStates[renderingIntent];
                    var opListTask;
                    if (!intentState.opListReadCapability) {
                        opListTask = {};
                        opListTask.operatorListChanged = operatorListChanged;
                        intentState.receivingOperatorList = true;
                        intentState.opListReadCapability = (0, _util.createPromiseCapability)();
                        intentState.renderTasks = [];
                        intentState.renderTasks.push(opListTask);
                        intentState.operatorList = {
                            fnArray: [],
                            argsArray: [],
                            lastChunk: false
                        };
                        this._stats.time("Page Request");
                        this._transport.messageHandler.send("RenderPageRequest", {
                            pageIndex: this.pageIndex,
                            intent: renderingIntent
                        });
                    }
                    return intentState.opListReadCapability.promise;
                }
            }, {
                key: "streamTextContent",
                value: function streamTextContent() {
                    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref4$normalizeWhites = _ref4.normalizeWhitespace, normalizeWhitespace = _ref4$normalizeWhites === void 0 ? false : _ref4$normalizeWhites, _ref4$disableCombineT = _ref4.disableCombineTextItems, disableCombineTextItems = _ref4$disableCombineT === void 0 ? false : _ref4$disableCombineT;
                    var TEXT_CONTENT_CHUNK_SIZE = 100;
                    return this._transport.messageHandler.sendWithStream("GetTextContent", {
                        pageIndex: this.pageNumber - 1,
                        normalizeWhitespace: normalizeWhitespace === true,
                        combineTextItems: disableCombineTextItems !== true
                    }, {
                        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,
                        size: function size(textContent) {
                            return textContent.items.length;
                        }
                    });
                }
            }, {
                key: "getTextContent",
                value: function getTextContent() {
                    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var readableStream = this.streamTextContent(params);
                    return new Promise(function(resolve, reject) {
                        function pump() {
                            reader.read().then(function(_ref5) {
                                var _textContent$items;
                                var value = _ref5.value, done = _ref5.done;
                                if (done) {
                                    resolve(textContent);
                                    return;
                                }
                                Object.assign(textContent.styles, value.styles);
                                (_textContent$items = textContent.items).push.apply(_textContent$items, _toConsumableArray(value.items));
                                pump();
                            }, reject);
                        }
                        var reader = readableStream.getReader();
                        var textContent = {
                            items: [],
                            styles: Object.create(null)
                        };
                        pump();
                    });
                }
            }, {
                key: "_destroy",
                value: function _destroy() {
                    this.destroyed = true;
                    this._transport.pageCache[this.pageIndex] = null;
                    var waitOn = [];
                    Object.keys(this.intentStates).forEach(function(intent) {
                        if (intent === "oplist") {
                            return;
                        }
                        var intentState = this.intentStates[intent];
                        intentState.renderTasks.forEach(function(renderTask) {
                            var renderCompleted = renderTask.capability.promise["catch"](function() {});
                            waitOn.push(renderCompleted);
                            renderTask.cancel();
                        });
                    }, this);
                    this.objs.clear();
                    this.annotationsPromise = null;
                    this.pendingCleanup = false;
                    return Promise.all(waitOn);
                }
            }, {
                key: "cleanup",
                value: function cleanup() {
                    var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                    this.pendingCleanup = true;
                    this._tryCleanup(resetStats);
                }
            }, {
                key: "_tryCleanup",
                value: function _tryCleanup() {
                    var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                    if (!this.pendingCleanup || Object.keys(this.intentStates).some(function(intent) {
                        var intentState = this.intentStates[intent];
                        return intentState.renderTasks.length !== 0 || intentState.receivingOperatorList;
                    }, this)) {
                        return;
                    }
                    Object.keys(this.intentStates).forEach(function(intent) {
                        delete this.intentStates[intent];
                    }, this);
                    this.objs.clear();
                    this.annotationsPromise = null;
                    if (resetStats && this._stats instanceof _display_utils.StatTimer) {
                        this._stats = new _display_utils.StatTimer();
                    }
                    this.pendingCleanup = false;
                }
            }, {
                key: "_startRenderPage",
                value: function _startRenderPage(transparency, intent) {
                    var intentState = this.intentStates[intent];
                    if (intentState.displayReadyCapability) {
                        intentState.displayReadyCapability.resolve(transparency);
                    }
                }
            }, {
                key: "_renderPageChunk",
                value: function _renderPageChunk(operatorListChunk, intent) {
                    var intentState = this.intentStates[intent];
                    for (var i = 0, ii = operatorListChunk.length; i < ii; i++) {
                        intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
                        intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
                    }
                    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;
                    for (var _i = 0; _i < intentState.renderTasks.length; _i++) {
                        intentState.renderTasks[_i].operatorListChanged();
                    }
                    if (operatorListChunk.lastChunk) {
                        intentState.receivingOperatorList = false;
                        this._tryCleanup();
                    }
                }
            }, {
                key: "pageNumber",
                get: function get() {
                    return this.pageIndex + 1;
                }
            }, {
                key: "rotate",
                get: function get() {
                    return this._pageInfo.rotate;
                }
            }, {
                key: "ref",
                get: function get() {
                    return this._pageInfo.ref;
                }
            }, {
                key: "userUnit",
                get: function get() {
                    return this._pageInfo.userUnit;
                }
            }, {
                key: "view",
                get: function get() {
                    return this._pageInfo.view;
                }
            }, {
                key: "stats",
                get: function get() {
                    return this._stats instanceof _display_utils.StatTimer ? this._stats : null;
                }
            } ]);
            return PDFPageProxy;
        }();
        exports.PDFPageProxy = PDFPageProxy;
        var LoopbackPort = function() {
            function LoopbackPort() {
                var defer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                _classCallCheck(this, LoopbackPort);
                this._listeners = [];
                this._defer = defer;
                this._deferred = Promise.resolve(undefined);
            }
            _createClass(LoopbackPort, [ {
                key: "postMessage",
                value: function postMessage(obj, transfers) {
                    var _this6 = this;
                    function cloneValue(value) {
                        if (_typeof(value) !== "object" || value === null) {
                            return value;
                        }
                        if (cloned.has(value)) {
                            return cloned.get(value);
                        }
                        var buffer, result;
                        if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {
                            var transferable = transfers && transfers.includes(buffer);
                            if (value === buffer) {
                                result = value;
                            } else if (transferable) {
                                result = new value.constructor(buffer, value.byteOffset, value.byteLength);
                            } else {
                                result = new value.constructor(value);
                            }
                            cloned.set(value, result);
                            return result;
                        }
                        result = Array.isArray(value) ? [] : {};
                        cloned.set(value, result);
                        for (var i in value) {
                            var desc = void 0, p = value;
                            while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {
                                p = Object.getPrototypeOf(p);
                            }
                            if (typeof desc.value === "undefined" || typeof desc.value === "function") {
                                continue;
                            }
                            result[i] = cloneValue(desc.value);
                        }
                        return result;
                    }
                    if (!this._defer) {
                        this._listeners.forEach(function(listener) {
                            listener.call(this, {
                                data: obj
                            });
                        }, this);
                        return;
                    }
                    var cloned = new WeakMap();
                    var e = {
                        data: cloneValue(obj)
                    };
                    this._deferred.then(function() {
                        _this6._listeners.forEach(function(listener) {
                            listener.call(this, e);
                        }, _this6);
                    });
                }
            }, {
                key: "addEventListener",
                value: function addEventListener(name, listener) {
                    this._listeners.push(listener);
                }
            }, {
                key: "removeEventListener",
                value: function removeEventListener(name, listener) {
                    var i = this._listeners.indexOf(listener);
                    this._listeners.splice(i, 1);
                }
            }, {
                key: "terminate",
                value: function terminate() {
                    this._listeners = [];
                }
            } ]);
            return LoopbackPort;
        }();
        exports.LoopbackPort = LoopbackPort;
        var PDFWorker = function PDFWorkerClosure() {
            var pdfWorkerPorts = new WeakMap();
            var nextFakeWorkerId = 0;
            var fakeWorkerFilesLoadedCapability;
            function _getWorkerSrc() {
                if (_worker_options.GlobalWorkerOptions.workerSrc) {
                    return _worker_options.GlobalWorkerOptions.workerSrc;
                }
                if (typeof fallbackWorkerSrc !== "undefined") {
                    return fallbackWorkerSrc;
                }
                throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
            }
            function getMainThreadWorkerMessageHandler() {
                try {
                    if (typeof window !== "undefined") {
                        return window.pdfjsWorker && window.pdfjsWorker.WorkerMessageHandler;
                    }
                } catch (ex) {}
                return null;
            }
            function setupFakeWorkerGlobal() {
                if (fakeWorkerFilesLoadedCapability) {
                    return fakeWorkerFilesLoadedCapability.promise;
                }
                fakeWorkerFilesLoadedCapability = (0, _util.createPromiseCapability)();
                var mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();
                if (mainWorkerMessageHandler) {
                    fakeWorkerFilesLoadedCapability.resolve(mainWorkerMessageHandler);
                    return fakeWorkerFilesLoadedCapability.promise;
                }
                var loader = fakeWorkerFilesLoader || function() {
                    return (0, _display_utils.loadScript)(_getWorkerSrc()).then(function() {
                        return window.pdfjsWorker.WorkerMessageHandler;
                    });
                };
                loader().then(fakeWorkerFilesLoadedCapability.resolve, fakeWorkerFilesLoadedCapability.reject);
                return fakeWorkerFilesLoadedCapability.promise;
            }
            function createCDNWrapper(url) {
                var wrapper = "importScripts('" + url + "');";
                return _util.URL.createObjectURL(new Blob([ wrapper ]));
            }
            var PDFWorker = function() {
                function PDFWorker() {
                    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref6$name = _ref6.name, name = _ref6$name === void 0 ? null : _ref6$name, _ref6$port = _ref6.port, port = _ref6$port === void 0 ? null : _ref6$port, _ref6$postMessageTran = _ref6.postMessageTransfers, postMessageTransfers = _ref6$postMessageTran === void 0 ? true : _ref6$postMessageTran, _ref6$verbosity = _ref6.verbosity, verbosity = _ref6$verbosity === void 0 ? (0, 
                    _util.getVerbosityLevel)() : _ref6$verbosity;
                    _classCallCheck(this, PDFWorker);
                    if (port && pdfWorkerPorts.has(port)) {
                        throw new Error("Cannot use more than one PDFWorker per port");
                    }
                    this.name = name;
                    this.destroyed = false;
                    this.postMessageTransfers = postMessageTransfers !== false;
                    this.verbosity = verbosity;
                    this._readyCapability = (0, _util.createPromiseCapability)();
                    this._port = null;
                    this._webWorker = null;
                    this._messageHandler = null;
                    if (port) {
                        pdfWorkerPorts.set(port, this);
                        this._initializeFromPort(port);
                        return;
                    }
                    this._initialize();
                }
                _createClass(PDFWorker, [ {
                    key: "_initializeFromPort",
                    value: function _initializeFromPort(port) {
                        this._port = port;
                        this._messageHandler = new _message_handler.MessageHandler("main", "worker", port);
                        this._messageHandler.on("ready", function() {});
                        this._readyCapability.resolve();
                    }
                }, {
                    key: "_initialize",
                    value: function _initialize() {
                        var _this7 = this;
                        if (typeof Worker !== "undefined" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {
                            var workerSrc = _getWorkerSrc();
                            try {
                                if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {
                                    workerSrc = createCDNWrapper(new _util.URL(workerSrc, window.location).href);
                                }
                                var worker = new Worker(workerSrc);
                                var messageHandler = new _message_handler.MessageHandler("main", "worker", worker);
                                var terminateEarly = function terminateEarly() {
                                    worker.removeEventListener("error", onWorkerError);
                                    messageHandler.destroy();
                                    worker.terminate();
                                    if (_this7.destroyed) {
                                        _this7._readyCapability.reject(new Error("Worker was destroyed"));
                                    } else {
                                        _this7._setupFakeWorker();
                                    }
                                };
                                var onWorkerError = function onWorkerError() {
                                    if (!_this7._webWorker) {
                                        terminateEarly();
                                    }
                                };
                                worker.addEventListener("error", onWorkerError);
                                messageHandler.on("test", function(data) {
                                    worker.removeEventListener("error", onWorkerError);
                                    if (_this7.destroyed) {
                                        terminateEarly();
                                        return;
                                    }
                                    if (data && data.supportTypedArray) {
                                        _this7._messageHandler = messageHandler;
                                        _this7._port = worker;
                                        _this7._webWorker = worker;
                                        if (!data.supportTransfers) {
                                            _this7.postMessageTransfers = false;
                                        }
                                        _this7._readyCapability.resolve();
                                        messageHandler.send("configure", {
                                            verbosity: _this7.verbosity
                                        });
                                    } else {
                                        _this7._setupFakeWorker();
                                        messageHandler.destroy();
                                        worker.terminate();
                                    }
                                });
                                messageHandler.on("ready", function(data) {
                                    worker.removeEventListener("error", onWorkerError);
                                    if (_this7.destroyed) {
                                        terminateEarly();
                                        return;
                                    }
                                    try {
                                        sendTest();
                                    } catch (e) {
                                        _this7._setupFakeWorker();
                                    }
                                });
                                var sendTest = function sendTest() {
                                    var testObj = new Uint8Array([ _this7.postMessageTransfers ? 255 : 0 ]);
                                    try {
                                        messageHandler.send("test", testObj, [ testObj.buffer ]);
                                    } catch (ex) {
                                        (0, _util.info)("Cannot use postMessage transfers");
                                        testObj[0] = 0;
                                        messageHandler.send("test", testObj);
                                    }
                                };
                                sendTest();
                                return;
                            } catch (e) {
                                (0, _util.info)("The worker has been disabled.");
                            }
                        }
                        this._setupFakeWorker();
                    }
                }, {
                    key: "_setupFakeWorker",
                    value: function _setupFakeWorker() {
                        var _this8 = this;
                        if (!isWorkerDisabled) {
                            (0, _util.warn)("Setting up fake worker.");
                            isWorkerDisabled = true;
                        }
                        setupFakeWorkerGlobal().then(function(WorkerMessageHandler) {
                            if (_this8.destroyed) {
                                _this8._readyCapability.reject(new Error("Worker was destroyed"));
                                return;
                            }
                            var port = new LoopbackPort();
                            _this8._port = port;
                            var id = "fake" + nextFakeWorkerId++;
                            var workerHandler = new _message_handler.MessageHandler(id + "_worker", id, port);
                            WorkerMessageHandler.setup(workerHandler, port);
                            var messageHandler = new _message_handler.MessageHandler(id, id + "_worker", port);
                            _this8._messageHandler = messageHandler;
                            _this8._readyCapability.resolve();
                        })["catch"](function(reason) {
                            _this8._readyCapability.reject(new Error('Setting up fake worker failed: "'.concat(reason.message, '".')));
                        });
                    }
                }, {
                    key: "destroy",
                    value: function destroy() {
                        this.destroyed = true;
                        if (this._webWorker) {
                            this._webWorker.terminate();
                            this._webWorker = null;
                        }
                        pdfWorkerPorts["delete"](this._port);
                        this._port = null;
                        if (this._messageHandler) {
                            this._messageHandler.destroy();
                            this._messageHandler = null;
                        }
                    }
                }, {
                    key: "promise",
                    get: function get() {
                        return this._readyCapability.promise;
                    }
                }, {
                    key: "port",
                    get: function get() {
                        return this._port;
                    }
                }, {
                    key: "messageHandler",
                    get: function get() {
                        return this._messageHandler;
                    }
                } ], [ {
                    key: "fromPort",
                    value: function fromPort(params) {
                        if (!params || !params.port) {
                            throw new Error("PDFWorker.fromPort - invalid method signature.");
                        }
                        if (pdfWorkerPorts.has(params.port)) {
                            return pdfWorkerPorts.get(params.port);
                        }
                        return new PDFWorker(params);
                    }
                }, {
                    key: "getWorkerSrc",
                    value: function getWorkerSrc() {
                        return _getWorkerSrc();
                    }
                } ]);
                return PDFWorker;
            }();
            return PDFWorker;
        }();
        exports.PDFWorker = PDFWorker;
        var WorkerTransport = function() {
            function WorkerTransport(messageHandler, loadingTask, networkStream, params) {
                _classCallCheck(this, WorkerTransport);
                this.messageHandler = messageHandler;
                this.loadingTask = loadingTask;
                this.commonObjs = new PDFObjects();
                this.fontLoader = new _font_loader.FontLoader({
                    docId: loadingTask.docId,
                    onUnsupportedFeature: this._onUnsupportedFeature.bind(this)
                });
                this._params = params;
                this.CMapReaderFactory = new params.CMapReaderFactory({
                    baseUrl: params.cMapUrl,
                    isCompressed: params.cMapPacked
                });
                this.destroyed = false;
                this.destroyCapability = null;
                this._passwordCapability = null;
                this._networkStream = networkStream;
                this._fullReader = null;
                this._lastProgress = null;
                this.pageCache = [];
                this.pagePromises = [];
                this.downloadInfoCapability = (0, _util.createPromiseCapability)();
                this.setupMessageHandler();
            }
            _createClass(WorkerTransport, [ {
                key: "destroy",
                value: function destroy() {
                    var _this9 = this;
                    if (this.destroyCapability) {
                        return this.destroyCapability.promise;
                    }
                    this.destroyed = true;
                    this.destroyCapability = (0, _util.createPromiseCapability)();
                    if (this._passwordCapability) {
                        this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));
                    }
                    var waitOn = [];
                    this.pageCache.forEach(function(page) {
                        if (page) {
                            waitOn.push(page._destroy());
                        }
                    });
                    this.pageCache = [];
                    this.pagePromises = [];
                    var terminated = this.messageHandler.sendWithPromise("Terminate", null);
                    waitOn.push(terminated);
                    Promise.all(waitOn).then(function() {
                        _this9.fontLoader.clear();
                        if (_this9._networkStream) {
                            _this9._networkStream.cancelAllRequests();
                        }
                        if (_this9.messageHandler) {
                            _this9.messageHandler.destroy();
                            _this9.messageHandler = null;
                        }
                        _this9.destroyCapability.resolve();
                    }, this.destroyCapability.reject);
                    return this.destroyCapability.promise;
                }
            }, {
                key: "setupMessageHandler",
                value: function setupMessageHandler() {
                    var messageHandler = this.messageHandler, loadingTask = this.loadingTask;
                    messageHandler.on("GetReader", function(data, sink) {
                        var _this10 = this;
                        (0, _util.assert)(this._networkStream);
                        this._fullReader = this._networkStream.getFullReader();
                        this._fullReader.onProgress = function(evt) {
                            _this10._lastProgress = {
                                loaded: evt.loaded,
                                total: evt.total
                            };
                        };
                        sink.onPull = function() {
                            _this10._fullReader.read().then(function(_ref7) {
                                var value = _ref7.value, done = _ref7.done;
                                if (done) {
                                    sink.close();
                                    return;
                                }
                                (0, _util.assert)((0, _util.isArrayBuffer)(value));
                                sink.enqueue(new Uint8Array(value), 1, [ value ]);
                            })["catch"](function(reason) {
                                sink.error(reason);
                            });
                        };
                        sink.onCancel = function(reason) {
                            _this10._fullReader.cancel(reason);
                        };
                    }, this);
                    messageHandler.on("ReaderHeadersReady", function(data) {
                        var _this11 = this;
                        var headersCapability = (0, _util.createPromiseCapability)();
                        var fullReader = this._fullReader;
                        fullReader.headersReady.then(function() {
                            if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
                                if (_this11._lastProgress && loadingTask.onProgress) {
                                    loadingTask.onProgress(_this11._lastProgress);
                                }
                                fullReader.onProgress = function(evt) {
                                    if (loadingTask.onProgress) {
                                        loadingTask.onProgress({
                                            loaded: evt.loaded,
                                            total: evt.total
                                        });
                                    }
                                };
                            }
                            headersCapability.resolve({
                                isStreamingSupported: fullReader.isStreamingSupported,
                                isRangeSupported: fullReader.isRangeSupported,
                                contentLength: fullReader.contentLength
                            });
                        }, headersCapability.reject);
                        return headersCapability.promise;
                    }, this);
                    messageHandler.on("GetRangeReader", function(data, sink) {
                        (0, _util.assert)(this._networkStream);
                        var rangeReader = this._networkStream.getRangeReader(data.begin, data.end);
                        if (!rangeReader) {
                            sink.close();
                            return;
                        }
                        sink.onPull = function() {
                            rangeReader.read().then(function(_ref8) {
                                var value = _ref8.value, done = _ref8.done;
                                if (done) {
                                    sink.close();
                                    return;
                                }
                                (0, _util.assert)((0, _util.isArrayBuffer)(value));
                                sink.enqueue(new Uint8Array(value), 1, [ value ]);
                            })["catch"](function(reason) {
                                sink.error(reason);
                            });
                        };
                        sink.onCancel = function(reason) {
                            rangeReader.cancel(reason);
                        };
                    }, this);
                    messageHandler.on("GetDoc", function(_ref9) {
                        var pdfInfo = _ref9.pdfInfo;
                        this._numPages = pdfInfo.numPages;
                        loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));
                    }, this);
                    messageHandler.on("PasswordRequest", function(exception) {
                        var _this12 = this;
                        this._passwordCapability = (0, _util.createPromiseCapability)();
                        if (loadingTask.onPassword) {
                            var updatePassword = function updatePassword(password) {
                                _this12._passwordCapability.resolve({
                                    password: password
                                });
                            };
                            try {
                                loadingTask.onPassword(updatePassword, exception.code);
                            } catch (ex) {
                                this._passwordCapability.reject(ex);
                            }
                        } else {
                            this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
                        }
                        return this._passwordCapability.promise;
                    }, this);
                    messageHandler.on("PasswordException", function(exception) {
                        loadingTask._capability.reject(new _util.PasswordException(exception.message, exception.code));
                    }, this);
                    messageHandler.on("InvalidPDF", function(exception) {
                        loadingTask._capability.reject(new _util.InvalidPDFException(exception.message));
                    }, this);
                    messageHandler.on("MissingPDF", function(exception) {
                        loadingTask._capability.reject(new _util.MissingPDFException(exception.message));
                    }, this);
                    messageHandler.on("UnexpectedResponse", function(exception) {
                        loadingTask._capability.reject(new _util.UnexpectedResponseException(exception.message, exception.status));
                    }, this);
                    messageHandler.on("UnknownError", function(exception) {
                        loadingTask._capability.reject(new _util.UnknownErrorException(exception.message, exception.details));
                    }, this);
                    messageHandler.on("DataLoaded", function(data) {
                        if (loadingTask.onProgress) {
                            loadingTask.onProgress({
                                loaded: data.length,
                                total: data.length
                            });
                        }
                        this.downloadInfoCapability.resolve(data);
                    }, this);
                    messageHandler.on("StartRenderPage", function(data) {
                        if (this.destroyed) {
                            return;
                        }
                        var page = this.pageCache[data.pageIndex];
                        page._stats.timeEnd("Page Request");
                        page._startRenderPage(data.transparency, data.intent);
                    }, this);
                    messageHandler.on("RenderPageChunk", function(data) {
                        if (this.destroyed) {
                            return;
                        }
                        var page = this.pageCache[data.pageIndex];
                        page._renderPageChunk(data.operatorList, data.intent);
                    }, this);
                    messageHandler.on("commonobj", function(data) {
                        var _this13 = this;
                        if (this.destroyed) {
                            return;
                        }
                        var _data = _slicedToArray(data, 3), id = _data[0], type = _data[1], exportedData = _data[2];
                        if (this.commonObjs.has(id)) {
                            return;
                        }
                        switch (type) {
                          case "Font":
                            var params = this._params;
                            if ("error" in exportedData) {
                                var exportedError = exportedData.error;
                                (0, _util.warn)("Error during font loading: ".concat(exportedError));
                                this.commonObjs.resolve(id, exportedError);
                                break;
                            }
                            var fontRegistry = null;
                            if (params.pdfBug && _global_scope["default"].FontInspector && _global_scope["default"].FontInspector.enabled) {
                                fontRegistry = {
                                    registerFont: function registerFont(font, url) {
                                        _global_scope["default"]["FontInspector"].fontAdded(font, url);
                                    }
                                };
                            }
                            var font = new _font_loader.FontFaceObject(exportedData, {
                                isEvalSupported: params.isEvalSupported,
                                disableFontFace: params.disableFontFace,
                                ignoreErrors: params.ignoreErrors,
                                onUnsupportedFeature: this._onUnsupportedFeature.bind(this),
                                fontRegistry: fontRegistry
                            });
                            this.fontLoader.bind(font).then(function() {
                                _this13.commonObjs.resolve(id, font);
                            }, function(reason) {
                                messageHandler.sendWithPromise("FontFallback", {
                                    id: id
                                })["finally"](function() {
                                    _this13.commonObjs.resolve(id, font);
                                });
                            });
                            break;

                          case "FontPath":
                          case "FontType3Res":
                            this.commonObjs.resolve(id, exportedData);
                            break;

                          default:
                            throw new Error("Got unknown common object type ".concat(type));
                        }
                    }, this);
                    messageHandler.on("obj", function(data) {
                        if (this.destroyed) {
                            return;
                        }
                        var _data2 = _slicedToArray(data, 4), id = _data2[0], pageIndex = _data2[1], type = _data2[2], imageData = _data2[3];
                        var pageProxy = this.pageCache[pageIndex];
                        if (pageProxy.objs.has(id)) {
                            return;
                        }
                        switch (type) {
                          case "JpegStream":
                            return new Promise(function(resolve, reject) {
                                var img = new Image();
                                img.onload = function() {
                                    resolve(img);
                                };
                                img.onerror = function() {
                                    reject(new Error("Error during JPEG image loading"));
                                    (0, _display_utils.releaseImageResources)(img);
                                };
                                img.src = imageData;
                            }).then(function(img) {
                                pageProxy.objs.resolve(id, img);
                            });

                          case "Image":
                            pageProxy.objs.resolve(id, imageData);
                            var MAX_IMAGE_SIZE_TO_STORE = 8e6;
                            if (imageData && "data" in imageData && imageData.data.length > MAX_IMAGE_SIZE_TO_STORE) {
                                pageProxy.cleanupAfterRender = true;
                            }
                            break;

                          default:
                            throw new Error("Got unknown object type ".concat(type));
                        }
                    }, this);
                    messageHandler.on("DocProgress", function(data) {
                        if (this.destroyed) {
                            return;
                        }
                        if (loadingTask.onProgress) {
                            loadingTask.onProgress({
                                loaded: data.loaded,
                                total: data.total
                            });
                        }
                    }, this);
                    messageHandler.on("PageError", function(data) {
                        if (this.destroyed) {
                            return;
                        }
                        var page = this.pageCache[data.pageIndex];
                        var intentState = page.intentStates[data.intent];
                        if (intentState.displayReadyCapability) {
                            intentState.displayReadyCapability.reject(new Error(data.error));
                        } else {
                            throw new Error(data.error);
                        }
                        if (intentState.operatorList) {
                            intentState.operatorList.lastChunk = true;
                            for (var i = 0; i < intentState.renderTasks.length; i++) {
                                intentState.renderTasks[i].operatorListChanged();
                            }
                        }
                    }, this);
                    messageHandler.on("UnsupportedFeature", this._onUnsupportedFeature, this);
                    messageHandler.on("JpegDecode", function(data) {
                        if (this.destroyed) {
                            return Promise.reject(new Error("Worker was destroyed"));
                        }
                        if (typeof document === "undefined") {
                            return Promise.reject(new Error('"document" is not defined.'));
                        }
                        var _data3 = _slicedToArray(data, 2), imageUrl = _data3[0], components = _data3[1];
                        if (components !== 3 && components !== 1) {
                            return Promise.reject(new Error("Only 3 components or 1 component can be returned"));
                        }
                        return new Promise(function(resolve, reject) {
                            var img = new Image();
                            img.onload = function() {
                                var width = img.width, height = img.height;
                                var size = width * height;
                                var rgbaLength = size * 4;
                                var buf = new Uint8ClampedArray(size * components);
                                var tmpCanvas = document.createElement("canvas");
                                tmpCanvas.width = width;
                                tmpCanvas.height = height;
                                var tmpCtx = tmpCanvas.getContext("2d");
                                tmpCtx.drawImage(img, 0, 0);
                                var data = tmpCtx.getImageData(0, 0, width, height).data;
                                if (components === 3) {
                                    for (var i = 0, j = 0; i < rgbaLength; i += 4, j += 3) {
                                        buf[j] = data[i];
                                        buf[j + 1] = data[i + 1];
                                        buf[j + 2] = data[i + 2];
                                    }
                                } else if (components === 1) {
                                    for (var _i2 = 0, _j = 0; _i2 < rgbaLength; _i2 += 4, _j++) {
                                        buf[_j] = data[_i2];
                                    }
                                }
                                resolve({
                                    data: buf,
                                    width: width,
                                    height: height
                                });
                                (0, _display_utils.releaseImageResources)(img);
                                tmpCanvas.width = 0;
                                tmpCanvas.height = 0;
                                tmpCanvas = null;
                                tmpCtx = null;
                            };
                            img.onerror = function() {
                                reject(new Error("JpegDecode failed to load image"));
                                (0, _display_utils.releaseImageResources)(img);
                            };
                            img.src = imageUrl;
                        });
                    }, this);
                    messageHandler.on("FetchBuiltInCMap", function(data) {
                        if (this.destroyed) {
                            return Promise.reject(new Error("Worker was destroyed"));
                        }
                        return this.CMapReaderFactory.fetch({
                            name: data.name
                        });
                    }, this);
                }
            }, {
                key: "_onUnsupportedFeature",
                value: function _onUnsupportedFeature(_ref10) {
                    var featureId = _ref10.featureId;
                    if (this.destroyed) {
                        return;
                    }
                    if (this.loadingTask.onUnsupportedFeature) {
                        this.loadingTask.onUnsupportedFeature(featureId);
                    }
                }
            }, {
                key: "getData",
                value: function getData() {
                    return this.messageHandler.sendWithPromise("GetData", null);
                }
            }, {
                key: "getPage",
                value: function getPage(pageNumber) {
                    var _this14 = this;
                    if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {
                        return Promise.reject(new Error("Invalid page request"));
                    }
                    var pageIndex = pageNumber - 1;
                    if (pageIndex in this.pagePromises) {
                        return this.pagePromises[pageIndex];
                    }
                    var promise = this.messageHandler.sendWithPromise("GetPage", {
                        pageIndex: pageIndex
                    }).then(function(pageInfo) {
                        if (_this14.destroyed) {
                            throw new Error("Transport destroyed");
                        }
                        var page = new PDFPageProxy(pageIndex, pageInfo, _this14, _this14._params.pdfBug);
                        _this14.pageCache[pageIndex] = page;
                        return page;
                    });
                    this.pagePromises[pageIndex] = promise;
                    return promise;
                }
            }, {
                key: "getPageIndex",
                value: function getPageIndex(ref) {
                    return this.messageHandler.sendWithPromise("GetPageIndex", {
                        ref: ref
                    })["catch"](function(reason) {
                        return Promise.reject(new Error(reason));
                    });
                }
            }, {
                key: "getAnnotations",
                value: function getAnnotations(pageIndex, intent) {
                    return this.messageHandler.sendWithPromise("GetAnnotations", {
                        pageIndex: pageIndex,
                        intent: intent
                    });
                }
            }, {
                key: "getDestinations",
                value: function getDestinations() {
                    return this.messageHandler.sendWithPromise("GetDestinations", null);
                }
            }, {
                key: "getDestination",
                value: function getDestination(id) {
                    if (typeof id !== "string") {
                        return Promise.reject(new Error("Invalid destination request."));
                    }
                    return this.messageHandler.sendWithPromise("GetDestination", {
                        id: id
                    });
                }
            }, {
                key: "getPageLabels",
                value: function getPageLabels() {
                    return this.messageHandler.sendWithPromise("GetPageLabels", null);
                }
            }, {
                key: "getPageLayout",
                value: function getPageLayout() {
                    return this.messageHandler.sendWithPromise("GetPageLayout", null);
                }
            }, {
                key: "getPageMode",
                value: function getPageMode() {
                    return this.messageHandler.sendWithPromise("GetPageMode", null);
                }
            }, {
                key: "getViewerPreferences",
                value: function getViewerPreferences() {
                    return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
                }
            }, {
                key: "getOpenActionDestination",
                value: function getOpenActionDestination() {
                    return this.messageHandler.sendWithPromise("GetOpenActionDestination", null);
                }
            }, {
                key: "getAttachments",
                value: function getAttachments() {
                    return this.messageHandler.sendWithPromise("GetAttachments", null);
                }
            }, {
                key: "getJavaScript",
                value: function getJavaScript() {
                    return this.messageHandler.sendWithPromise("GetJavaScript", null);
                }
            }, {
                key: "getOutline",
                value: function getOutline() {
                    return this.messageHandler.sendWithPromise("GetOutline", null);
                }
            }, {
                key: "getPermissions",
                value: function getPermissions() {
                    return this.messageHandler.sendWithPromise("GetPermissions", null);
                }
            }, {
                key: "getMetadata",
                value: function getMetadata() {
                    var _this15 = this;
                    return this.messageHandler.sendWithPromise("GetMetadata", null).then(function(results) {
                        return {
                            info: results[0],
                            metadata: results[1] ? new _metadata.Metadata(results[1]) : null,
                            contentDispositionFilename: _this15._fullReader ? _this15._fullReader.filename : null
                        };
                    });
                }
            }, {
                key: "getStats",
                value: function getStats() {
                    return this.messageHandler.sendWithPromise("GetStats", null);
                }
            }, {
                key: "startCleanup",
                value: function startCleanup() {
                    var _this16 = this;
                    this.messageHandler.sendWithPromise("Cleanup", null).then(function() {
                        for (var i = 0, ii = _this16.pageCache.length; i < ii; i++) {
                            var page = _this16.pageCache[i];
                            if (page) {
                                page.cleanup();
                            }
                        }
                        _this16.commonObjs.clear();
                        _this16.fontLoader.clear();
                    });
                }
            }, {
                key: "loadingParams",
                get: function get() {
                    var params = this._params;
                    return (0, _util.shadow)(this, "loadingParams", {
                        disableAutoFetch: params.disableAutoFetch,
                        disableCreateObjectURL: params.disableCreateObjectURL,
                        disableFontFace: params.disableFontFace,
                        nativeImageDecoderSupport: params.nativeImageDecoderSupport
                    });
                }
            } ]);
            return WorkerTransport;
        }();
        var PDFObjects = function() {
            function PDFObjects() {
                _classCallCheck(this, PDFObjects);
                this._objs = Object.create(null);
            }
            _createClass(PDFObjects, [ {
                key: "_ensureObj",
                value: function _ensureObj(objId) {
                    if (this._objs[objId]) {
                        return this._objs[objId];
                    }
                    return this._objs[objId] = {
                        capability: (0, _util.createPromiseCapability)(),
                        data: null,
                        resolved: false
                    };
                }
            }, {
                key: "get",
                value: function get(objId) {
                    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                    if (callback) {
                        this._ensureObj(objId).capability.promise.then(callback);
                        return null;
                    }
                    var obj = this._objs[objId];
                    if (!obj || !obj.resolved) {
                        throw new Error("Requesting object that isn't resolved yet ".concat(objId, "."));
                    }
                    return obj.data;
                }
            }, {
                key: "has",
                value: function has(objId) {
                    var obj = this._objs[objId];
                    return obj ? obj.resolved : false;
                }
            }, {
                key: "resolve",
                value: function resolve(objId, data) {
                    var obj = this._ensureObj(objId);
                    obj.resolved = true;
                    obj.data = data;
                    obj.capability.resolve(data);
                }
            }, {
                key: "clear",
                value: function clear() {
                    for (var objId in this._objs) {
                        var data = this._objs[objId].data;
                        if (typeof Image !== "undefined" && data instanceof Image) {
                            (0, _display_utils.releaseImageResources)(data);
                        }
                    }
                    this._objs = Object.create(null);
                }
            } ]);
            return PDFObjects;
        }();
        var RenderTask = function() {
            function RenderTask(internalRenderTask) {
                _classCallCheck(this, RenderTask);
                this._internalRenderTask = internalRenderTask;
                this.onContinue = null;
            }
            _createClass(RenderTask, [ {
                key: "cancel",
                value: function cancel() {
                    this._internalRenderTask.cancel();
                }
            }, {
                key: "then",
                value: function then(onFulfilled, onRejected) {
                    (0, _display_utils.deprecated)("RenderTask.then method, use the `promise` getter instead.");
                    return this.promise.then.apply(this.promise, arguments);
                }
            }, {
                key: "promise",
                get: function get() {
                    return this._internalRenderTask.capability.promise;
                }
            } ]);
            return RenderTask;
        }();
        var InternalRenderTask = function InternalRenderTaskClosure() {
            var canvasInRendering = new WeakSet();
            var InternalRenderTask = function() {
                function InternalRenderTask(_ref11) {
                    var callback = _ref11.callback, params = _ref11.params, objs = _ref11.objs, commonObjs = _ref11.commonObjs, operatorList = _ref11.operatorList, pageNumber = _ref11.pageNumber, canvasFactory = _ref11.canvasFactory, webGLContext = _ref11.webGLContext, _ref11$useRequestAnim = _ref11.useRequestAnimationFrame, useRequestAnimationFrame = _ref11$useRequestAnim === void 0 ? false : _ref11$useRequestAnim, _ref11$pdfBug = _ref11.pdfBug, pdfBug = _ref11$pdfBug === void 0 ? false : _ref11$pdfBug;
                    _classCallCheck(this, InternalRenderTask);
                    this.callback = callback;
                    this.params = params;
                    this.objs = objs;
                    this.commonObjs = commonObjs;
                    this.operatorListIdx = null;
                    this.operatorList = operatorList;
                    this.pageNumber = pageNumber;
                    this.canvasFactory = canvasFactory;
                    this.webGLContext = webGLContext;
                    this._pdfBug = pdfBug;
                    this.running = false;
                    this.graphicsReadyCallback = null;
                    this.graphicsReady = false;
                    this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";
                    this.cancelled = false;
                    this.capability = (0, _util.createPromiseCapability)();
                    this.task = new RenderTask(this);
                    this._continueBound = this._continue.bind(this);
                    this._scheduleNextBound = this._scheduleNext.bind(this);
                    this._nextBound = this._next.bind(this);
                    this._canvas = params.canvasContext.canvas;
                }
                _createClass(InternalRenderTask, [ {
                    key: "initializeGraphics",
                    value: function initializeGraphics() {
                        var transparency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        if (this.cancelled) {
                            return;
                        }
                        if (this._canvas) {
                            if (canvasInRendering.has(this._canvas)) {
                                throw new Error("Cannot use the same canvas during multiple render() operations. " + "Use different canvas or ensure previous operations were " + "cancelled or completed.");
                            }
                            canvasInRendering.add(this._canvas);
                        }
                        if (this._pdfBug && _global_scope["default"].StepperManager && _global_scope["default"].StepperManager.enabled) {
                            this.stepper = _global_scope["default"].StepperManager.create(this.pageNumber - 1);
                            this.stepper.init(this.operatorList);
                            this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
                        }
                        var _this$params = this.params, canvasContext = _this$params.canvasContext, viewport = _this$params.viewport, transform = _this$params.transform, imageLayer = _this$params.imageLayer, background = _this$params.background;
                        this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext, imageLayer);
                        this.gfx.beginDrawing({
                            transform: transform,
                            viewport: viewport,
                            transparency: transparency,
                            background: background
                        });
                        this.operatorListIdx = 0;
                        this.graphicsReady = true;
                        if (this.graphicsReadyCallback) {
                            this.graphicsReadyCallback();
                        }
                    }
                }, {
                    key: "cancel",
                    value: function cancel() {
                        var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                        this.running = false;
                        this.cancelled = true;
                        if (this.gfx) {
                            this.gfx.endDrawing();
                        }
                        if (this._canvas) {
                            canvasInRendering["delete"](this._canvas);
                        }
                        this.callback(error || new _display_utils.RenderingCancelledException("Rendering cancelled, page ".concat(this.pageNumber), "canvas"));
                    }
                }, {
                    key: "operatorListChanged",
                    value: function operatorListChanged() {
                        if (!this.graphicsReady) {
                            if (!this.graphicsReadyCallback) {
                                this.graphicsReadyCallback = this._continueBound;
                            }
                            return;
                        }
                        if (this.stepper) {
                            this.stepper.updateOperatorList(this.operatorList);
                        }
                        if (this.running) {
                            return;
                        }
                        this._continue();
                    }
                }, {
                    key: "_continue",
                    value: function _continue() {
                        this.running = true;
                        if (this.cancelled) {
                            return;
                        }
                        if (this.task.onContinue) {
                            this.task.onContinue(this._scheduleNextBound);
                        } else {
                            this._scheduleNext();
                        }
                    }
                }, {
                    key: "_scheduleNext",
                    value: function _scheduleNext() {
                        var _this17 = this;
                        if (this._useRequestAnimationFrame) {
                            window.requestAnimationFrame(function() {
                                _this17._nextBound()["catch"](_this17.cancel.bind(_this17));
                            });
                        } else {
                            Promise.resolve().then(this._nextBound)["catch"](this.cancel.bind(this));
                        }
                    }
                }, {
                    key: "_next",
                    value: function() {
                        var _next2 = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                            return _regenerator["default"].wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                      case 0:
                                        if (!this.cancelled) {
                                            _context.next = 2;
                                            break;
                                        }
                                        return _context.abrupt("return");

                                      case 2:
                                        this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);
                                        if (this.operatorListIdx === this.operatorList.argsArray.length) {
                                            this.running = false;
                                            if (this.operatorList.lastChunk) {
                                                this.gfx.endDrawing();
                                                if (this._canvas) {
                                                    canvasInRendering["delete"](this._canvas);
                                                }
                                                this.callback();
                                            }
                                        }

                                      case 4:
                                      case "end":
                                        return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }));
                        function _next() {
                            return _next2.apply(this, arguments);
                        }
                        return _next;
                    }()
                } ]);
                return InternalRenderTask;
            }();
            return InternalRenderTask;
        }();
        var version = "2.2.154";
        exports.version = version;
        var build = "762c58e0";
        exports.build = build;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = __w_pdfjs_require__(149);
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        (function(module) {
            function _typeof(obj) {
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }
            var runtime = function(exports) {
                "use strict";
                var Op = Object.prototype;
                var hasOwn = Op.hasOwnProperty;
                var undefined;
                var $Symbol = typeof Symbol === "function" ? Symbol : {};
                var iteratorSymbol = $Symbol.iterator || "@@iterator";
                var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
                function wrap(innerFn, outerFn, self, tryLocsList) {
                    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                    var generator = Object.create(protoGenerator.prototype);
                    var context = new Context(tryLocsList || []);
                    generator._invoke = makeInvokeMethod(innerFn, self, context);
                    return generator;
                }
                exports.wrap = wrap;
                function tryCatch(fn, obj, arg) {
                    try {
                        return {
                            type: "normal",
                            arg: fn.call(obj, arg)
                        };
                    } catch (err) {
                        return {
                            type: "throw",
                            arg: err
                        };
                    }
                }
                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed";
                var ContinueSentinel = {};
                function Generator() {}
                function GeneratorFunction() {}
                function GeneratorFunctionPrototype() {}
                var IteratorPrototype = {};
                IteratorPrototype[iteratorSymbol] = function() {
                    return this;
                };
                var getProto = Object.getPrototypeOf;
                var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
                if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                    IteratorPrototype = NativeIteratorPrototype;
                }
                var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
                GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                GeneratorFunctionPrototype.constructor = GeneratorFunction;
                GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
                function defineIteratorMethods(prototype) {
                    [ "next", "throw", "return" ].forEach(function(method) {
                        prototype[method] = function(arg) {
                            return this._invoke(method, arg);
                        };
                    });
                }
                exports.isGeneratorFunction = function(genFun) {
                    var ctor = typeof genFun === "function" && genFun.constructor;
                    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
                };
                exports.mark = function(genFun) {
                    if (Object.setPrototypeOf) {
                        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                    } else {
                        genFun.__proto__ = GeneratorFunctionPrototype;
                        if (!(toStringTagSymbol in genFun)) {
                            genFun[toStringTagSymbol] = "GeneratorFunction";
                        }
                    }
                    genFun.prototype = Object.create(Gp);
                    return genFun;
                };
                exports.awrap = function(arg) {
                    return {
                        __await: arg
                    };
                };
                function AsyncIterator(generator) {
                    function invoke(method, arg, resolve, reject) {
                        var record = tryCatch(generator[method], generator, arg);
                        if (record.type === "throw") {
                            reject(record.arg);
                        } else {
                            var result = record.arg;
                            var value = result.value;
                            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
                                return Promise.resolve(value.__await).then(function(value) {
                                    invoke("next", value, resolve, reject);
                                }, function(err) {
                                    invoke("throw", err, resolve, reject);
                                });
                            }
                            return Promise.resolve(value).then(function(unwrapped) {
                                result.value = unwrapped;
                                resolve(result);
                            }, function(error) {
                                return invoke("throw", error, resolve, reject);
                            });
                        }
                    }
                    var previousPromise;
                    function enqueue(method, arg) {
                        function callInvokeWithMethodAndArg() {
                            return new Promise(function(resolve, reject) {
                                invoke(method, arg, resolve, reject);
                            });
                        }
                        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                    }
                    this._invoke = enqueue;
                }
                defineIteratorMethods(AsyncIterator.prototype);
                AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                    return this;
                };
                exports.AsyncIterator = AsyncIterator;
                exports.async = function(innerFn, outerFn, self, tryLocsList) {
                    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
                    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                        return result.done ? result.value : iter.next();
                    });
                };
                function makeInvokeMethod(innerFn, self, context) {
                    var state = GenStateSuspendedStart;
                    return function invoke(method, arg) {
                        if (state === GenStateExecuting) {
                            throw new Error("Generator is already running");
                        }
                        if (state === GenStateCompleted) {
                            if (method === "throw") {
                                throw arg;
                            }
                            return doneResult();
                        }
                        context.method = method;
                        context.arg = arg;
                        while (true) {
                            var delegate = context.delegate;
                            if (delegate) {
                                var delegateResult = maybeInvokeDelegate(delegate, context);
                                if (delegateResult) {
                                    if (delegateResult === ContinueSentinel) continue;
                                    return delegateResult;
                                }
                            }
                            if (context.method === "next") {
                                context.sent = context._sent = context.arg;
                            } else if (context.method === "throw") {
                                if (state === GenStateSuspendedStart) {
                                    state = GenStateCompleted;
                                    throw context.arg;
                                }
                                context.dispatchException(context.arg);
                            } else if (context.method === "return") {
                                context.abrupt("return", context.arg);
                            }
                            state = GenStateExecuting;
                            var record = tryCatch(innerFn, self, context);
                            if (record.type === "normal") {
                                state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                                if (record.arg === ContinueSentinel) {
                                    continue;
                                }
                                return {
                                    value: record.arg,
                                    done: context.done
                                };
                            } else if (record.type === "throw") {
                                state = GenStateCompleted;
                                context.method = "throw";
                                context.arg = record.arg;
                            }
                        }
                    };
                }
                function maybeInvokeDelegate(delegate, context) {
                    var method = delegate.iterator[context.method];
                    if (method === undefined) {
                        context.delegate = null;
                        if (context.method === "throw") {
                            if (delegate.iterator["return"]) {
                                context.method = "return";
                                context.arg = undefined;
                                maybeInvokeDelegate(delegate, context);
                                if (context.method === "throw") {
                                    return ContinueSentinel;
                                }
                            }
                            context.method = "throw";
                            context.arg = new TypeError("The iterator does not provide a 'throw' method");
                        }
                        return ContinueSentinel;
                    }
                    var record = tryCatch(method, delegate.iterator, context.arg);
                    if (record.type === "throw") {
                        context.method = "throw";
                        context.arg = record.arg;
                        context.delegate = null;
                        return ContinueSentinel;
                    }
                    var info = record.arg;
                    if (!info) {
                        context.method = "throw";
                        context.arg = new TypeError("iterator result is not an object");
                        context.delegate = null;
                        return ContinueSentinel;
                    }
                    if (info.done) {
                        context[delegate.resultName] = info.value;
                        context.next = delegate.nextLoc;
                        if (context.method !== "return") {
                            context.method = "next";
                            context.arg = undefined;
                        }
                    } else {
                        return info;
                    }
                    context.delegate = null;
                    return ContinueSentinel;
                }
                defineIteratorMethods(Gp);
                Gp[toStringTagSymbol] = "Generator";
                Gp[iteratorSymbol] = function() {
                    return this;
                };
                Gp.toString = function() {
                    return "[object Generator]";
                };
                function pushTryEntry(locs) {
                    var entry = {
                        tryLoc: locs[0]
                    };
                    if (1 in locs) {
                        entry.catchLoc = locs[1];
                    }
                    if (2 in locs) {
                        entry.finallyLoc = locs[2];
                        entry.afterLoc = locs[3];
                    }
                    this.tryEntries.push(entry);
                }
                function resetTryEntry(entry) {
                    var record = entry.completion || {};
                    record.type = "normal";
                    delete record.arg;
                    entry.completion = record;
                }
                function Context(tryLocsList) {
                    this.tryEntries = [ {
                        tryLoc: "root"
                    } ];
                    tryLocsList.forEach(pushTryEntry, this);
                    this.reset(true);
                }
                exports.keys = function(object) {
                    var keys = [];
                    for (var key in object) {
                        keys.push(key);
                    }
                    keys.reverse();
                    return function next() {
                        while (keys.length) {
                            var key = keys.pop();
                            if (key in object) {
                                next.value = key;
                                next.done = false;
                                return next;
                            }
                        }
                        next.done = true;
                        return next;
                    };
                };
                function values(iterable) {
                    if (iterable) {
                        var iteratorMethod = iterable[iteratorSymbol];
                        if (iteratorMethod) {
                            return iteratorMethod.call(iterable);
                        }
                        if (typeof iterable.next === "function") {
                            return iterable;
                        }
                        if (!isNaN(iterable.length)) {
                            var i = -1, next = function next() {
                                while (++i < iterable.length) {
                                    if (hasOwn.call(iterable, i)) {
                                        next.value = iterable[i];
                                        next.done = false;
                                        return next;
                                    }
                                }
                                next.value = undefined;
                                next.done = true;
                                return next;
                            };
                            return next.next = next;
                        }
                    }
                    return {
                        next: doneResult
                    };
                }
                exports.values = values;
                function doneResult() {
                    return {
                        value: undefined,
                        done: true
                    };
                }
                Context.prototype = {
                    constructor: Context,
                    reset: function reset(skipTempReset) {
                        this.prev = 0;
                        this.next = 0;
                        this.sent = this._sent = undefined;
                        this.done = false;
                        this.delegate = null;
                        this.method = "next";
                        this.arg = undefined;
                        this.tryEntries.forEach(resetTryEntry);
                        if (!skipTempReset) {
                            for (var name in this) {
                                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                                    this[name] = undefined;
                                }
                            }
                        }
                    },
                    stop: function stop() {
                        this.done = true;
                        var rootEntry = this.tryEntries[0];
                        var rootRecord = rootEntry.completion;
                        if (rootRecord.type === "throw") {
                            throw rootRecord.arg;
                        }
                        return this.rval;
                    },
                    dispatchException: function dispatchException(exception) {
                        if (this.done) {
                            throw exception;
                        }
                        var context = this;
                        function handle(loc, caught) {
                            record.type = "throw";
                            record.arg = exception;
                            context.next = loc;
                            if (caught) {
                                context.method = "next";
                                context.arg = undefined;
                            }
                            return !!caught;
                        }
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            var record = entry.completion;
                            if (entry.tryLoc === "root") {
                                return handle("end");
                            }
                            if (entry.tryLoc <= this.prev) {
                                var hasCatch = hasOwn.call(entry, "catchLoc");
                                var hasFinally = hasOwn.call(entry, "finallyLoc");
                                if (hasCatch && hasFinally) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    } else if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }
                                } else if (hasCatch) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    }
                                } else if (hasFinally) {
                                    if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }
                                } else {
                                    throw new Error("try statement without catch or finally");
                                }
                            }
                        }
                    },
                    abrupt: function abrupt(type, arg) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                                var finallyEntry = entry;
                                break;
                            }
                        }
                        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                            finallyEntry = null;
                        }
                        var record = finallyEntry ? finallyEntry.completion : {};
                        record.type = type;
                        record.arg = arg;
                        if (finallyEntry) {
                            this.method = "next";
                            this.next = finallyEntry.finallyLoc;
                            return ContinueSentinel;
                        }
                        return this.complete(record);
                    },
                    complete: function complete(record, afterLoc) {
                        if (record.type === "throw") {
                            throw record.arg;
                        }
                        if (record.type === "break" || record.type === "continue") {
                            this.next = record.arg;
                        } else if (record.type === "return") {
                            this.rval = this.arg = record.arg;
                            this.method = "return";
                            this.next = "end";
                        } else if (record.type === "normal" && afterLoc) {
                            this.next = afterLoc;
                        }
                        return ContinueSentinel;
                    },
                    finish: function finish(finallyLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.finallyLoc === finallyLoc) {
                                this.complete(entry.completion, entry.afterLoc);
                                resetTryEntry(entry);
                                return ContinueSentinel;
                            }
                        }
                    },
                    catch: function _catch(tryLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc === tryLoc) {
                                var record = entry.completion;
                                if (record.type === "throw") {
                                    var thrown = record.arg;
                                    resetTryEntry(entry);
                                }
                                return thrown;
                            }
                        }
                        throw new Error("illegal catch attempt");
                    },
                    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                        this.delegate = {
                            iterator: values(iterable),
                            resultName: resultName,
                            nextLoc: nextLoc
                        };
                        if (this.method === "next") {
                            this.arg = undefined;
                        }
                        return ContinueSentinel;
                    }
                };
                return exports;
            }((false ? undefined : _typeof(module)) === "object" ? module.exports : {});
            try {
                regeneratorRuntime = runtime;
            } catch (accidentalStrictMode) {
                Function("r", "regeneratorRuntime = r")(runtime);
            }
        }).call(this, __w_pdfjs_require__(150)(module));
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        module.exports = function(module) {
            if (!module.webpackPolyfill) {
                module.deprecate = function() {};
                module.paths = [];
                if (!module.children) module.children = [];
                Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function get() {
                        return module.l;
                    }
                });
                Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function get() {
                        return module.i;
                    }
                });
                module.webpackPolyfill = 1;
            }
            return module;
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.addLinkAttributes = addLinkAttributes;
        exports.getFilenameFromUrl = getFilenameFromUrl;
        exports.isFetchSupported = isFetchSupported;
        exports.isValidFetchUrl = isValidFetchUrl;
        exports.loadScript = loadScript;
        exports.deprecated = deprecated;
        exports.releaseImageResources = releaseImageResources;
        exports.DummyStatTimer = exports.StatTimer = exports.DOMSVGFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = exports.LinkTarget = exports.RenderingCancelledException = exports.PageViewport = void 0;
        var _regenerator = _interopRequireDefault(__w_pdfjs_require__(148));
        var _util = __w_pdfjs_require__(1);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var DEFAULT_LINK_REL = "noopener noreferrer nofollow";
        exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;
        var SVG_NS = "http://www.w3.org/2000/svg";
        var DOMCanvasFactory = function() {
            function DOMCanvasFactory() {
                _classCallCheck(this, DOMCanvasFactory);
            }
            _createClass(DOMCanvasFactory, [ {
                key: "create",
                value: function create(width, height) {
                    if (width <= 0 || height <= 0) {
                        throw new Error("Invalid canvas size");
                    }
                    var canvas = document.createElement("canvas");
                    var context = canvas.getContext("2d");
                    canvas.width = width;
                    canvas.height = height;
                    return {
                        canvas: canvas,
                        context: context
                    };
                }
            }, {
                key: "reset",
                value: function reset(canvasAndContext, width, height) {
                    if (!canvasAndContext.canvas) {
                        throw new Error("Canvas is not specified");
                    }
                    if (width <= 0 || height <= 0) {
                        throw new Error("Invalid canvas size");
                    }
                    canvasAndContext.canvas.width = width;
                    canvasAndContext.canvas.height = height;
                }
            }, {
                key: "destroy",
                value: function destroy(canvasAndContext) {
                    if (!canvasAndContext.canvas) {
                        throw new Error("Canvas is not specified");
                    }
                    canvasAndContext.canvas.width = 0;
                    canvasAndContext.canvas.height = 0;
                    canvasAndContext.canvas = null;
                    canvasAndContext.context = null;
                }
            } ]);
            return DOMCanvasFactory;
        }();
        exports.DOMCanvasFactory = DOMCanvasFactory;
        var DOMCMapReaderFactory = function() {
            function DOMCMapReaderFactory(_ref) {
                var _ref$baseUrl = _ref.baseUrl, baseUrl = _ref$baseUrl === void 0 ? null : _ref$baseUrl, _ref$isCompressed = _ref.isCompressed, isCompressed = _ref$isCompressed === void 0 ? false : _ref$isCompressed;
                _classCallCheck(this, DOMCMapReaderFactory);
                this.baseUrl = baseUrl;
                this.isCompressed = isCompressed;
            }
            _createClass(DOMCMapReaderFactory, [ {
                key: "fetch",
                value: function(_fetch) {
                    function fetch(_x) {
                        return _fetch.apply(this, arguments);
                    }
                    fetch.toString = function() {
                        return _fetch.toString();
                    };
                    return fetch;
                }(function() {
                    var _ref3 = _asyncToGenerator(_regenerator["default"].mark(function _callee2(_ref2) {
                        var _this = this;
                        var name, url, compressionType;
                        return _regenerator["default"].wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    name = _ref2.name;
                                    if (this.baseUrl) {
                                        _context2.next = 3;
                                        break;
                                    }
                                    throw new Error('The CMap "baseUrl" parameter must be specified, ensure that ' + 'the "cMapUrl" and "cMapPacked" API parameters are provided.');

                                  case 3:
                                    if (name) {
                                        _context2.next = 5;
                                        break;
                                    }
                                    throw new Error("CMap name must be specified.");

                                  case 5:
                                    url = this.baseUrl + name + (this.isCompressed ? ".bcmap" : "");
                                    compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;
                                    if (!(isFetchSupported() && isValidFetchUrl(url, document.baseURI))) {
                                        _context2.next = 9;
                                        break;
                                    }
                                    return _context2.abrupt("return", fetch(url).then(function() {
                                        var _ref4 = _asyncToGenerator(_regenerator["default"].mark(function _callee(response) {
                                            var cMapData;
                                            return _regenerator["default"].wrap(function _callee$(_context) {
                                                while (1) {
                                                    switch (_context.prev = _context.next) {
                                                      case 0:
                                                        if (response.ok) {
                                                            _context.next = 2;
                                                            break;
                                                        }
                                                        throw new Error(response.statusText);

                                                      case 2:
                                                        if (!_this.isCompressed) {
                                                            _context.next = 10;
                                                            break;
                                                        }
                                                        _context.t0 = Uint8Array;
                                                        _context.next = 6;
                                                        return response.arrayBuffer();

                                                      case 6:
                                                        _context.t1 = _context.sent;
                                                        cMapData = new _context.t0(_context.t1);
                                                        _context.next = 15;
                                                        break;

                                                      case 10:
                                                        _context.t2 = _util.stringToBytes;
                                                        _context.next = 13;
                                                        return response.text();

                                                      case 13:
                                                        _context.t3 = _context.sent;
                                                        cMapData = (0, _context.t2)(_context.t3);

                                                      case 15:
                                                        return _context.abrupt("return", {
                                                            cMapData: cMapData,
                                                            compressionType: compressionType
                                                        });

                                                      case 16:
                                                      case "end":
                                                        return _context.stop();
                                                    }
                                                }
                                            }, _callee);
                                        }));
                                        return function(_x3) {
                                            return _ref4.apply(this, arguments);
                                        };
                                    }())["catch"](function(reason) {
                                        throw new Error("Unable to load ".concat(_this.isCompressed ? "binary " : "") + "CMap at: ".concat(url));
                                    }));

                                  case 9:
                                    return _context2.abrupt("return", new Promise(function(resolve, reject) {
                                        var request = new XMLHttpRequest();
                                        request.open("GET", url, true);
                                        if (_this.isCompressed) {
                                            request.responseType = "arraybuffer";
                                        }
                                        request.onreadystatechange = function() {
                                            if (request.readyState !== XMLHttpRequest.DONE) {
                                                return;
                                            }
                                            if (request.status === 200 || request.status === 0) {
                                                var cMapData;
                                                if (_this.isCompressed && request.response) {
                                                    cMapData = new Uint8Array(request.response);
                                                } else if (!_this.isCompressed && request.responseText) {
                                                    cMapData = (0, _util.stringToBytes)(request.responseText);
                                                }
                                                if (cMapData) {
                                                    resolve({
                                                        cMapData: cMapData,
                                                        compressionType: compressionType
                                                    });
                                                    return;
                                                }
                                            }
                                            reject(new Error(request.statusText));
                                        };
                                        request.send(null);
                                    })["catch"](function(reason) {
                                        throw new Error("Unable to load ".concat(_this.isCompressed ? "binary " : "") + "CMap at: ".concat(url));
                                    }));

                                  case 10:
                                  case "end":
                                    return _context2.stop();
                                }
                            }
                        }, _callee2, this);
                    }));
                    return function(_x2) {
                        return _ref3.apply(this, arguments);
                    };
                }())
            } ]);
            return DOMCMapReaderFactory;
        }();
        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;
        var DOMSVGFactory = function() {
            function DOMSVGFactory() {
                _classCallCheck(this, DOMSVGFactory);
            }
            _createClass(DOMSVGFactory, [ {
                key: "create",
                value: function create(width, height) {
                    (0, _util.assert)(width > 0 && height > 0, "Invalid SVG dimensions");
                    var svg = document.createElementNS(SVG_NS, "svg:svg");
                    svg.setAttribute("version", "1.1");
                    svg.setAttribute("width", width + "px");
                    svg.setAttribute("height", height + "px");
                    svg.setAttribute("preserveAspectRatio", "none");
                    svg.setAttribute("viewBox", "0 0 " + width + " " + height);
                    return svg;
                }
            }, {
                key: "createElement",
                value: function createElement(type) {
                    (0, _util.assert)(typeof type === "string", "Invalid SVG element type");
                    return document.createElementNS(SVG_NS, type);
                }
            } ]);
            return DOMSVGFactory;
        }();
        exports.DOMSVGFactory = DOMSVGFactory;
        var PageViewport = function() {
            function PageViewport(_ref5) {
                var viewBox = _ref5.viewBox, scale = _ref5.scale, rotation = _ref5.rotation, _ref5$offsetX = _ref5.offsetX, offsetX = _ref5$offsetX === void 0 ? 0 : _ref5$offsetX, _ref5$offsetY = _ref5.offsetY, offsetY = _ref5$offsetY === void 0 ? 0 : _ref5$offsetY, _ref5$dontFlip = _ref5.dontFlip, dontFlip = _ref5$dontFlip === void 0 ? false : _ref5$dontFlip;
                _classCallCheck(this, PageViewport);
                this.viewBox = viewBox;
                this.scale = scale;
                this.rotation = rotation;
                this.offsetX = offsetX;
                this.offsetY = offsetY;
                var centerX = (viewBox[2] + viewBox[0]) / 2;
                var centerY = (viewBox[3] + viewBox[1]) / 2;
                var rotateA, rotateB, rotateC, rotateD;
                rotation = rotation % 360;
                rotation = rotation < 0 ? rotation + 360 : rotation;
                switch (rotation) {
                  case 180:
                    rotateA = -1;
                    rotateB = 0;
                    rotateC = 0;
                    rotateD = 1;
                    break;

                  case 90:
                    rotateA = 0;
                    rotateB = 1;
                    rotateC = 1;
                    rotateD = 0;
                    break;

                  case 270:
                    rotateA = 0;
                    rotateB = -1;
                    rotateC = -1;
                    rotateD = 0;
                    break;

                  default:
                    rotateA = 1;
                    rotateB = 0;
                    rotateC = 0;
                    rotateD = -1;
                    break;
                }
                if (dontFlip) {
                    rotateC = -rotateC;
                    rotateD = -rotateD;
                }
                var offsetCanvasX, offsetCanvasY;
                var width, height;
                if (rotateA === 0) {
                    offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
                    offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
                    width = Math.abs(viewBox[3] - viewBox[1]) * scale;
                    height = Math.abs(viewBox[2] - viewBox[0]) * scale;
                } else {
                    offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
                    offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
                    width = Math.abs(viewBox[2] - viewBox[0]) * scale;
                    height = Math.abs(viewBox[3] - viewBox[1]) * scale;
                }
                this.transform = [ rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY ];
                this.width = width;
                this.height = height;
            }
            _createClass(PageViewport, [ {
                key: "clone",
                value: function clone() {
                    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref6$scale = _ref6.scale, scale = _ref6$scale === void 0 ? this.scale : _ref6$scale, _ref6$rotation = _ref6.rotation, rotation = _ref6$rotation === void 0 ? this.rotation : _ref6$rotation, _ref6$dontFlip = _ref6.dontFlip, dontFlip = _ref6$dontFlip === void 0 ? false : _ref6$dontFlip;
                    return new PageViewport({
                        viewBox: this.viewBox.slice(),
                        scale: scale,
                        rotation: rotation,
                        offsetX: this.offsetX,
                        offsetY: this.offsetY,
                        dontFlip: dontFlip
                    });
                }
            }, {
                key: "convertToViewportPoint",
                value: function convertToViewportPoint(x, y) {
                    return _util.Util.applyTransform([ x, y ], this.transform);
                }
            }, {
                key: "convertToViewportRectangle",
                value: function convertToViewportRectangle(rect) {
                    var topLeft = _util.Util.applyTransform([ rect[0], rect[1] ], this.transform);
                    var bottomRight = _util.Util.applyTransform([ rect[2], rect[3] ], this.transform);
                    return [ topLeft[0], topLeft[1], bottomRight[0], bottomRight[1] ];
                }
            }, {
                key: "convertToPdfPoint",
                value: function convertToPdfPoint(x, y) {
                    return _util.Util.applyInverseTransform([ x, y ], this.transform);
                }
            } ]);
            return PageViewport;
        }();
        exports.PageViewport = PageViewport;
        var RenderingCancelledException = function RenderingCancelledException() {
            function RenderingCancelledException(msg, type) {
                this.message = msg;
                this.type = type;
            }
            RenderingCancelledException.prototype = new Error();
            RenderingCancelledException.prototype.name = "RenderingCancelledException";
            RenderingCancelledException.constructor = RenderingCancelledException;
            return RenderingCancelledException;
        }();
        exports.RenderingCancelledException = RenderingCancelledException;
        var LinkTarget = {
            NONE: 0,
            SELF: 1,
            BLANK: 2,
            PARENT: 3,
            TOP: 4
        };
        exports.LinkTarget = LinkTarget;
        var LinkTargetStringMap = [ "", "_self", "_blank", "_parent", "_top" ];
        function addLinkAttributes(link) {
            var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, url = _ref7.url, target = _ref7.target, rel = _ref7.rel;
            link.href = link.title = url ? (0, _util.removeNullCharacters)(url) : "";
            if (url) {
                var LinkTargetValues = Object.values(LinkTarget);
                var targetIndex = LinkTargetValues.includes(target) ? target : LinkTarget.NONE;
                link.target = LinkTargetStringMap[targetIndex];
                link.rel = typeof rel === "string" ? rel : DEFAULT_LINK_REL;
            }
        }
        function getFilenameFromUrl(url) {
            var anchor = url.indexOf("#");
            var query = url.indexOf("?");
            var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
            return url.substring(url.lastIndexOf("/", end) + 1, end);
        }
        var StatTimer = function() {
            function StatTimer() {
                var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                _classCallCheck(this, StatTimer);
                this.enabled = !!enable;
                this.started = Object.create(null);
                this.times = [];
            }
            _createClass(StatTimer, [ {
                key: "time",
                value: function time(name) {
                    if (!this.enabled) {
                        return;
                    }
                    if (name in this.started) {
                        (0, _util.warn)("Timer is already running for " + name);
                    }
                    this.started[name] = Date.now();
                }
            }, {
                key: "timeEnd",
                value: function timeEnd(name) {
                    if (!this.enabled) {
                        return;
                    }
                    if (!(name in this.started)) {
                        (0, _util.warn)("Timer has not been started for " + name);
                    }
                    this.times.push({
                        name: name,
                        start: this.started[name],
                        end: Date.now()
                    });
                    delete this.started[name];
                }
            }, {
                key: "toString",
                value: function toString() {
                    var out = "", longest = 0;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = this.times[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var time = _step.value;
                            var name = time.name;
                            if (name.length > longest) {
                                longest = name.length;
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                                _iterator["return"]();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;
                    try {
                        for (var _iterator2 = this.times[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var _time = _step2.value;
                            var duration = _time.end - _time.start;
                            out += "".concat(_time.name.padEnd(longest), " ").concat(duration, "ms\n");
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                                _iterator2["return"]();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }
                    return out;
                }
            } ]);
            return StatTimer;
        }();
        exports.StatTimer = StatTimer;
        var DummyStatTimer = function() {
            function DummyStatTimer() {
                _classCallCheck(this, DummyStatTimer);
                (0, _util.unreachable)("Cannot initialize DummyStatTimer.");
            }
            _createClass(DummyStatTimer, null, [ {
                key: "time",
                value: function time(name) {}
            }, {
                key: "timeEnd",
                value: function timeEnd(name) {}
            }, {
                key: "toString",
                value: function toString() {
                    return "";
                }
            } ]);
            return DummyStatTimer;
        }();
        exports.DummyStatTimer = DummyStatTimer;
        function isFetchSupported() {
            return typeof fetch !== "undefined" && typeof Response !== "undefined" && "body" in Response.prototype && typeof ReadableStream !== "undefined";
        }
        function isValidFetchUrl(url, baseUrl) {
            try {
                var _ref8 = baseUrl ? new _util.URL(url, baseUrl) : new _util.URL(url), protocol = _ref8.protocol;
                return protocol === "http:" || protocol === "https:";
            } catch (ex) {
                return false;
            }
        }
        function loadScript(src) {
            return new Promise(function(resolve, reject) {
                var script = document.createElement("script");
                script.src = src;
                script.onload = resolve;
                script.onerror = function() {
                    reject(new Error("Cannot load script at: ".concat(script.src)));
                };
                (document.head || document.documentElement).appendChild(script);
            });
        }
        function deprecated(details) {
            console.log("Deprecated API usage: " + details);
        }
        function releaseImageResources(img) {
            (0, _util.assert)(img instanceof Image, "Invalid `img` parameter.");
            var url = img.src;
            if (typeof url === "string" && url.startsWith("blob:") && _util.URL.revokeObjectURL) {
                _util.URL.revokeObjectURL(url);
            }
            img.removeAttribute("src");
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.FontLoader = exports.FontFaceObject = void 0;
        var _regenerator = _interopRequireDefault(__w_pdfjs_require__(148));
        var _util = __w_pdfjs_require__(1);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        function _possibleConstructorReturn(self, call) {
            if (call && (_typeof(call) === "object" || typeof call === "function")) {
                return call;
            }
            return _assertThisInitialized(self);
        }
        function _assertThisInitialized(self) {
            if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self;
        }
        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var BaseFontLoader = function() {
            function BaseFontLoader(_ref) {
                var docId = _ref.docId, onUnsupportedFeature = _ref.onUnsupportedFeature;
                _classCallCheck(this, BaseFontLoader);
                if (this.constructor === BaseFontLoader) {
                    (0, _util.unreachable)("Cannot initialize BaseFontLoader.");
                }
                this.docId = docId;
                this._onUnsupportedFeature = onUnsupportedFeature;
                this.nativeFontFaces = [];
                this.styleElement = null;
            }
            _createClass(BaseFontLoader, [ {
                key: "addNativeFontFace",
                value: function addNativeFontFace(nativeFontFace) {
                    this.nativeFontFaces.push(nativeFontFace);
                    document.fonts.add(nativeFontFace);
                }
            }, {
                key: "insertRule",
                value: function insertRule(rule) {
                    var styleElement = this.styleElement;
                    if (!styleElement) {
                        styleElement = this.styleElement = document.createElement("style");
                        styleElement.id = "PDFJS_FONT_STYLE_TAG_".concat(this.docId);
                        document.documentElement.getElementsByTagName("head")[0].appendChild(styleElement);
                    }
                    var styleSheet = styleElement.sheet;
                    styleSheet.insertRule(rule, styleSheet.cssRules.length);
                }
            }, {
                key: "clear",
                value: function clear() {
                    this.nativeFontFaces.forEach(function(nativeFontFace) {
                        document.fonts["delete"](nativeFontFace);
                    });
                    this.nativeFontFaces.length = 0;
                    if (this.styleElement) {
                        this.styleElement.remove();
                        this.styleElement = null;
                    }
                }
            }, {
                key: "bind",
                value: function() {
                    var _bind = _asyncToGenerator(_regenerator["default"].mark(function _callee(font) {
                        var _this = this;
                        var nativeFontFace, rule;
                        return _regenerator["default"].wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    if (!(font.attached || font.missingFile)) {
                                        _context.next = 2;
                                        break;
                                    }
                                    return _context.abrupt("return");

                                  case 2:
                                    font.attached = true;
                                    if (!this.isFontLoadingAPISupported) {
                                        _context.next = 19;
                                        break;
                                    }
                                    nativeFontFace = font.createNativeFontFace();
                                    if (!nativeFontFace) {
                                        _context.next = 18;
                                        break;
                                    }
                                    this.addNativeFontFace(nativeFontFace);
                                    _context.prev = 7;
                                    _context.next = 10;
                                    return nativeFontFace.loaded;

                                  case 10:
                                    _context.next = 18;
                                    break;

                                  case 12:
                                    _context.prev = 12;
                                    _context.t0 = _context["catch"](7);
                                    this._onUnsupportedFeature({
                                        featureId: _util.UNSUPPORTED_FEATURES.font
                                    });
                                    (0, _util.warn)("Failed to load font '".concat(nativeFontFace.family, "': '").concat(_context.t0, "'."));
                                    font.disableFontFace = true;
                                    throw _context.t0;

                                  case 18:
                                    return _context.abrupt("return");

                                  case 19:
                                    rule = font.createFontFaceRule();
                                    if (!rule) {
                                        _context.next = 25;
                                        break;
                                    }
                                    this.insertRule(rule);
                                    if (!this.isSyncFontLoadingSupported) {
                                        _context.next = 24;
                                        break;
                                    }
                                    return _context.abrupt("return");

                                  case 24:
                                    return _context.abrupt("return", new Promise(function(resolve) {
                                        var request = _this._queueLoadingCallback(resolve);
                                        _this._prepareFontLoadEvent([ rule ], [ font ], request);
                                    }));

                                  case 25:
                                  case "end":
                                    return _context.stop();
                                }
                            }
                        }, _callee, this, [ [ 7, 12 ] ]);
                    }));
                    function bind(_x) {
                        return _bind.apply(this, arguments);
                    }
                    return bind;
                }()
            }, {
                key: "_queueLoadingCallback",
                value: function _queueLoadingCallback(callback) {
                    (0, _util.unreachable)("Abstract method `_queueLoadingCallback`.");
                }
            }, {
                key: "_prepareFontLoadEvent",
                value: function _prepareFontLoadEvent(rules, fontsToLoad, request) {
                    (0, _util.unreachable)("Abstract method `_prepareFontLoadEvent`.");
                }
            }, {
                key: "isFontLoadingAPISupported",
                get: function get() {
                    (0, _util.unreachable)("Abstract method `isFontLoadingAPISupported`.");
                }
            }, {
                key: "isSyncFontLoadingSupported",
                get: function get() {
                    (0, _util.unreachable)("Abstract method `isSyncFontLoadingSupported`.");
                }
            }, {
                key: "_loadTestFont",
                get: function get() {
                    (0, _util.unreachable)("Abstract method `_loadTestFont`.");
                }
            } ]);
            return BaseFontLoader;
        }();
        var FontLoader;
        exports.FontLoader = FontLoader;
        {
            exports.FontLoader = FontLoader = function(_BaseFontLoader) {
                _inherits(GenericFontLoader, _BaseFontLoader);
                function GenericFontLoader(docId) {
                    var _this2;
                    _classCallCheck(this, GenericFontLoader);
                    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(GenericFontLoader).call(this, docId));
                    _this2.loadingContext = {
                        requests: [],
                        nextRequestId: 0
                    };
                    _this2.loadTestFontId = 0;
                    return _this2;
                }
                _createClass(GenericFontLoader, [ {
                    key: "_queueLoadingCallback",
                    value: function _queueLoadingCallback(callback) {
                        function completeRequest() {
                            (0, _util.assert)(!request.done, "completeRequest() cannot be called twice.");
                            request.done = true;
                            while (context.requests.length > 0 && context.requests[0].done) {
                                var otherRequest = context.requests.shift();
                                setTimeout(otherRequest.callback, 0);
                            }
                        }
                        var context = this.loadingContext;
                        var request = {
                            id: "pdfjs-font-loading-".concat(context.nextRequestId++),
                            done: false,
                            complete: completeRequest,
                            callback: callback
                        };
                        context.requests.push(request);
                        return request;
                    }
                }, {
                    key: "_prepareFontLoadEvent",
                    value: function _prepareFontLoadEvent(rules, fonts, request) {
                        function int32(data, offset) {
                            return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 255;
                        }
                        function spliceString(s, offset, remove, insert) {
                            var chunk1 = s.substring(0, offset);
                            var chunk2 = s.substring(offset + remove);
                            return chunk1 + insert + chunk2;
                        }
                        var i, ii;
                        var canvas = document.createElement("canvas");
                        canvas.width = 1;
                        canvas.height = 1;
                        var ctx = canvas.getContext("2d");
                        var called = 0;
                        function isFontReady(name, callback) {
                            called++;
                            if (called > 30) {
                                (0, _util.warn)("Load test font never loaded.");
                                callback();
                                return;
                            }
                            ctx.font = "30px " + name;
                            ctx.fillText(".", 0, 20);
                            var imageData = ctx.getImageData(0, 0, 1, 1);
                            if (imageData.data[3] > 0) {
                                callback();
                                return;
                            }
                            setTimeout(isFontReady.bind(null, name, callback));
                        }
                        var loadTestFontId = "lt".concat(Date.now()).concat(this.loadTestFontId++);
                        var data = this._loadTestFont;
                        var COMMENT_OFFSET = 976;
                        data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
                        var CFF_CHECKSUM_OFFSET = 16;
                        var XXXX_VALUE = 1482184792;
                        var checksum = int32(data, CFF_CHECKSUM_OFFSET);
                        for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
                            checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
                        }
                        if (i < loadTestFontId.length) {
                            checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;
                        }
                        data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));
                        var url = "url(data:font/opentype;base64,".concat(btoa(data), ");");
                        var rule = '@font-face {font-family:"'.concat(loadTestFontId, '";src:').concat(url, "}");
                        this.insertRule(rule);
                        var names = [];
                        for (i = 0, ii = fonts.length; i < ii; i++) {
                            names.push(fonts[i].loadedName);
                        }
                        names.push(loadTestFontId);
                        var div = document.createElement("div");
                        div.setAttribute("style", "visibility: hidden;" + "width: 10px; height: 10px;" + "position: absolute; top: 0px; left: 0px;");
                        for (i = 0, ii = names.length; i < ii; ++i) {
                            var span = document.createElement("span");
                            span.textContent = "Hi";
                            span.style.fontFamily = names[i];
                            div.appendChild(span);
                        }
                        document.body.appendChild(div);
                        isFontReady(loadTestFontId, function() {
                            document.body.removeChild(div);
                            request.complete();
                        });
                    }
                }, {
                    key: "isFontLoadingAPISupported",
                    get: function get() {
                        var supported = typeof document !== "undefined" && !!document.fonts;
                        if (supported && typeof navigator !== "undefined") {
                            var m = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);
                            if (m && m[1] < 63) {
                                supported = false;
                            }
                        }
                        return (0, _util.shadow)(this, "isFontLoadingAPISupported", supported);
                    }
                }, {
                    key: "isSyncFontLoadingSupported",
                    get: function get() {
                        var supported = false;
                        if (typeof navigator === "undefined") {
                            supported = true;
                        } else {
                            var m = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);
                            if (m && m[1] >= 14) {
                                supported = true;
                            }
                        }
                        return (0, _util.shadow)(this, "isSyncFontLoadingSupported", supported);
                    }
                }, {
                    key: "_loadTestFont",
                    get: function get() {
                        var getLoadTestFont = function getLoadTestFont() {
                            return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA" + "FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA" + "ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA" + "AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1" + "AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD" + "6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM" + "AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D" + "IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA" + "AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA" + "AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB" + "AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY" + "AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA" + "AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA" + "AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC" + "AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3" + "Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj" + "FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
                        };
                        return (0, _util.shadow)(this, "_loadTestFont", getLoadTestFont());
                    }
                } ]);
                return GenericFontLoader;
            }(BaseFontLoader);
        }
        var IsEvalSupportedCached = {
            get value() {
                return (0, _util.shadow)(this, "value", (0, _util.isEvalSupported)());
            }
        };
        var FontFaceObject = function() {
            function FontFaceObject(translatedData, _ref2) {
                var _ref2$isEvalSupported = _ref2.isEvalSupported, isEvalSupported = _ref2$isEvalSupported === void 0 ? true : _ref2$isEvalSupported, _ref2$disableFontFace = _ref2.disableFontFace, disableFontFace = _ref2$disableFontFace === void 0 ? false : _ref2$disableFontFace, _ref2$ignoreErrors = _ref2.ignoreErrors, ignoreErrors = _ref2$ignoreErrors === void 0 ? false : _ref2$ignoreErrors, _ref2$onUnsupportedFe = _ref2.onUnsupportedFeature, onUnsupportedFeature = _ref2$onUnsupportedFe === void 0 ? null : _ref2$onUnsupportedFe, _ref2$fontRegistry = _ref2.fontRegistry, fontRegistry = _ref2$fontRegistry === void 0 ? null : _ref2$fontRegistry;
                _classCallCheck(this, FontFaceObject);
                this.compiledGlyphs = Object.create(null);
                for (var i in translatedData) {
                    this[i] = translatedData[i];
                }
                this.isEvalSupported = isEvalSupported !== false;
                this.disableFontFace = disableFontFace === true;
                this.ignoreErrors = ignoreErrors === true;
                this._onUnsupportedFeature = onUnsupportedFeature;
                this.fontRegistry = fontRegistry;
            }
            _createClass(FontFaceObject, [ {
                key: "createNativeFontFace",
                value: function createNativeFontFace() {
                    if (!this.data || this.disableFontFace) {
                        return null;
                    }
                    var nativeFontFace = new FontFace(this.loadedName, this.data, {});
                    if (this.fontRegistry) {
                        this.fontRegistry.registerFont(this);
                    }
                    return nativeFontFace;
                }
            }, {
                key: "createFontFaceRule",
                value: function createFontFaceRule() {
                    if (!this.data || this.disableFontFace) {
                        return null;
                    }
                    var data = (0, _util.bytesToString)(new Uint8Array(this.data));
                    var url = "url(data:".concat(this.mimetype, ";base64,").concat(btoa(data), ");");
                    var rule = '@font-face {font-family:"'.concat(this.loadedName, '";src:').concat(url, "}");
                    if (this.fontRegistry) {
                        this.fontRegistry.registerFont(this, url);
                    }
                    return rule;
                }
            }, {
                key: "getPathGenerator",
                value: function getPathGenerator(objs, character) {
                    if (this.compiledGlyphs[character] !== undefined) {
                        return this.compiledGlyphs[character];
                    }
                    var cmds, current;
                    try {
                        cmds = objs.get(this.loadedName + "_path_" + character);
                    } catch (ex) {
                        if (!this.ignoreErrors) {
                            throw ex;
                        }
                        if (this._onUnsupportedFeature) {
                            this._onUnsupportedFeature({
                                featureId: _util.UNSUPPORTED_FEATURES.font
                            });
                        }
                        (0, _util.warn)('getPathGenerator - ignoring character: "'.concat(ex, '".'));
                        return this.compiledGlyphs[character] = function(c, size) {};
                    }
                    if (this.isEvalSupported && IsEvalSupportedCached.value) {
                        var args, js = "";
                        for (var i = 0, ii = cmds.length; i < ii; i++) {
                            current = cmds[i];
                            if (current.args !== undefined) {
                                args = current.args.join(",");
                            } else {
                                args = "";
                            }
                            js += "c." + current.cmd + "(" + args + ");\n";
                        }
                        return this.compiledGlyphs[character] = new Function("c", "size", js);
                    }
                    return this.compiledGlyphs[character] = function(c, size) {
                        for (var _i = 0, _ii = cmds.length; _i < _ii; _i++) {
                            current = cmds[_i];
                            if (current.cmd === "scale") {
                                current.args = [ size, -size ];
                            }
                            c[current.cmd].apply(c, current.args);
                        }
                    };
                }
            } ]);
            return FontFaceObject;
        }();
        exports.FontFaceObject = FontFaceObject;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        var compatibilityParams = Object.create(null);
        {
            var isNodeJS = __w_pdfjs_require__(4);
            var userAgent = typeof navigator !== "undefined" && navigator.userAgent || "";
            var isIE = /Trident/.test(userAgent);
            var isIOSChrome = /CriOS/.test(userAgent);
            (function checkOnBlobSupport() {
                if (isIE || isIOSChrome) {
                    compatibilityParams.disableCreateObjectURL = true;
                }
            })();
            (function checkFontFaceAndImage() {
                if (isNodeJS()) {
                    compatibilityParams.disableFontFace = true;
                    compatibilityParams.nativeImageDecoderSupport = "none";
                }
            })();
        }
        exports.apiCompatibilityParams = Object.freeze(compatibilityParams);
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CanvasGraphics = void 0;
        var _util = __w_pdfjs_require__(1);
        var _pattern_helper = __w_pdfjs_require__(155);
        var MIN_FONT_SIZE = 16;
        var MAX_FONT_SIZE = 100;
        var MAX_GROUP_SIZE = 4096;
        var MIN_WIDTH_FACTOR = .65;
        var COMPILE_TYPE3_GLYPHS = true;
        var MAX_SIZE_TO_COMPILE = 1e3;
        var FULL_CHUNK_HEIGHT = 16;
        var IsLittleEndianCached = {
            get value() {
                return (0, _util.shadow)(IsLittleEndianCached, "value", (0, _util.isLittleEndian)());
            }
        };
        function addContextCurrentTransform(ctx) {
            if (!ctx.mozCurrentTransform) {
                ctx._originalSave = ctx.save;
                ctx._originalRestore = ctx.restore;
                ctx._originalRotate = ctx.rotate;
                ctx._originalScale = ctx.scale;
                ctx._originalTranslate = ctx.translate;
                ctx._originalTransform = ctx.transform;
                ctx._originalSetTransform = ctx.setTransform;
                ctx._transformMatrix = ctx._transformMatrix || [ 1, 0, 0, 1, 0, 0 ];
                ctx._transformStack = [];
                Object.defineProperty(ctx, "mozCurrentTransform", {
                    get: function getCurrentTransform() {
                        return this._transformMatrix;
                    }
                });
                Object.defineProperty(ctx, "mozCurrentTransformInverse", {
                    get: function getCurrentTransformInverse() {
                        var m = this._transformMatrix;
                        var a = m[0], b = m[1], c = m[2], d = m[3], e = m[4], f = m[5];
                        var ad_bc = a * d - b * c;
                        var bc_ad = b * c - a * d;
                        return [ d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc ];
                    }
                });
                ctx.save = function ctxSave() {
                    var old = this._transformMatrix;
                    this._transformStack.push(old);
                    this._transformMatrix = old.slice(0, 6);
                    this._originalSave();
                };
                ctx.restore = function ctxRestore() {
                    var prev = this._transformStack.pop();
                    if (prev) {
                        this._transformMatrix = prev;
                        this._originalRestore();
                    }
                };
                ctx.translate = function ctxTranslate(x, y) {
                    var m = this._transformMatrix;
                    m[4] = m[0] * x + m[2] * y + m[4];
                    m[5] = m[1] * x + m[3] * y + m[5];
                    this._originalTranslate(x, y);
                };
                ctx.scale = function ctxScale(x, y) {
                    var m = this._transformMatrix;
                    m[0] = m[0] * x;
                    m[1] = m[1] * x;
                    m[2] = m[2] * y;
                    m[3] = m[3] * y;
                    this._originalScale(x, y);
                };
                ctx.transform = function ctxTransform(a, b, c, d, e, f) {
                    var m = this._transformMatrix;
                    this._transformMatrix = [ m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5] ];
                    ctx._originalTransform(a, b, c, d, e, f);
                };
                ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
                    this._transformMatrix = [ a, b, c, d, e, f ];
                    ctx._originalSetTransform(a, b, c, d, e, f);
                };
                ctx.rotate = function ctxRotate(angle) {
                    var cosValue = Math.cos(angle);
                    var sinValue = Math.sin(angle);
                    var m = this._transformMatrix;
                    this._transformMatrix = [ m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5] ];
                    this._originalRotate(angle);
                };
            }
        }
        var CachedCanvases = function CachedCanvasesClosure() {
            function CachedCanvases(canvasFactory) {
                this.canvasFactory = canvasFactory;
                this.cache = Object.create(null);
            }
            CachedCanvases.prototype = {
                getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {
                    var canvasEntry;
                    if (this.cache[id] !== undefined) {
                        canvasEntry = this.cache[id];
                        this.canvasFactory.reset(canvasEntry, width, height);
                        canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);
                    } else {
                        canvasEntry = this.canvasFactory.create(width, height);
                        this.cache[id] = canvasEntry;
                    }
                    if (trackTransform) {
                        addContextCurrentTransform(canvasEntry.context);
                    }
                    return canvasEntry;
                },
                clear: function clear() {
                    for (var id in this.cache) {
                        var canvasEntry = this.cache[id];
                        this.canvasFactory.destroy(canvasEntry);
                        delete this.cache[id];
                    }
                }
            };
            return CachedCanvases;
        }();
        function compileType3Glyph(imgData) {
            var POINT_TO_PROCESS_LIMIT = 1e3;
            var width = imgData.width, height = imgData.height;
            var i, j, j0, width1 = width + 1;
            var points = new Uint8Array(width1 * (height + 1));
            var POINT_TYPES = new Uint8Array([ 0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0 ]);
            var lineSize = width + 7 & ~7, data0 = imgData.data;
            var data = new Uint8Array(lineSize * height), pos = 0, ii;
            for (i = 0, ii = data0.length; i < ii; i++) {
                var mask = 128, elem = data0[i];
                while (mask > 0) {
                    data[pos++] = elem & mask ? 0 : 255;
                    mask >>= 1;
                }
            }
            var count = 0;
            pos = 0;
            if (data[pos] !== 0) {
                points[0] = 1;
                ++count;
            }
            for (j = 1; j < width; j++) {
                if (data[pos] !== data[pos + 1]) {
                    points[j] = data[pos] ? 2 : 1;
                    ++count;
                }
                pos++;
            }
            if (data[pos] !== 0) {
                points[j] = 2;
                ++count;
            }
            for (i = 1; i < height; i++) {
                pos = i * lineSize;
                j0 = i * width1;
                if (data[pos - lineSize] !== data[pos]) {
                    points[j0] = data[pos] ? 1 : 8;
                    ++count;
                }
                var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);
                for (j = 1; j < width; j++) {
                    sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);
                    if (POINT_TYPES[sum]) {
                        points[j0 + j] = POINT_TYPES[sum];
                        ++count;
                    }
                    pos++;
                }
                if (data[pos - lineSize] !== data[pos]) {
                    points[j0 + j] = data[pos] ? 2 : 4;
                    ++count;
                }
                if (count > POINT_TO_PROCESS_LIMIT) {
                    return null;
                }
            }
            pos = lineSize * (height - 1);
            j0 = i * width1;
            if (data[pos] !== 0) {
                points[j0] = 8;
                ++count;
            }
            for (j = 1; j < width; j++) {
                if (data[pos] !== data[pos + 1]) {
                    points[j0 + j] = data[pos] ? 4 : 8;
                    ++count;
                }
                pos++;
            }
            if (data[pos] !== 0) {
                points[j0 + j] = 4;
                ++count;
            }
            if (count > POINT_TO_PROCESS_LIMIT) {
                return null;
            }
            var steps = new Int32Array([ 0, width1, -1, 0, -width1, 0, 0, 0, 1 ]);
            var outlines = [];
            for (i = 0; count && i <= height; i++) {
                var p = i * width1;
                var end = p + width;
                while (p < end && !points[p]) {
                    p++;
                }
                if (p === end) {
                    continue;
                }
                var coords = [ p % width1, i ];
                var type = points[p], p0 = p, pp;
                do {
                    var step = steps[type];
                    do {
                        p += step;
                    } while (!points[p]);
                    pp = points[p];
                    if (pp !== 5 && pp !== 10) {
                        type = pp;
                        points[p] = 0;
                    } else {
                        type = pp & 51 * type >> 4;
                        points[p] &= type >> 2 | type << 2;
                    }
                    coords.push(p % width1);
                    coords.push(p / width1 | 0);
                    if (!points[p]) {
                        --count;
                    }
                } while (p0 !== p);
                outlines.push(coords);
                --i;
            }
            var drawOutline = function drawOutline(c) {
                c.save();
                c.scale(1 / width, -1 / height);
                c.translate(0, -height);
                c.beginPath();
                for (var i = 0, ii = outlines.length; i < ii; i++) {
                    var o = outlines[i];
                    c.moveTo(o[0], o[1]);
                    for (var j = 2, jj = o.length; j < jj; j += 2) {
                        c.lineTo(o[j], o[j + 1]);
                    }
                }
                c.fill();
                c.beginPath();
                c.restore();
            };
            return drawOutline;
        }
        var CanvasExtraState = function CanvasExtraStateClosure() {
            function CanvasExtraState() {
                this.alphaIsShape = false;
                this.fontSize = 0;
                this.fontSizeScale = 1;
                this.textMatrix = _util.IDENTITY_MATRIX;
                this.textMatrixScale = 1;
                this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
                this.leading = 0;
                this.x = 0;
                this.y = 0;
                this.lineX = 0;
                this.lineY = 0;
                this.charSpacing = 0;
                this.wordSpacing = 0;
                this.textHScale = 1;
                this.textRenderingMode = _util.TextRenderingMode.FILL;
                this.textRise = 0;
                this.fillColor = "#000000";
                this.strokeColor = "#000000";
                this.patternFill = false;
                this.fillAlpha = 1;
                this.strokeAlpha = 1;
                this.lineWidth = 1;
                this.activeSMask = null;
                this.resumeSMaskCtx = null;
            }
            CanvasExtraState.prototype = {
                clone: function CanvasExtraState_clone() {
                    return Object.create(this);
                },
                setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {
                    this.x = x;
                    this.y = y;
                }
            };
            return CanvasExtraState;
        }();
        var CanvasGraphics = function CanvasGraphicsClosure() {
            var EXECUTION_TIME = 15;
            var EXECUTION_STEPS = 10;
            function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, webGLContext, imageLayer) {
                this.ctx = canvasCtx;
                this.current = new CanvasExtraState();
                this.stateStack = [];
                this.pendingClip = null;
                this.pendingEOFill = false;
                this.res = null;
                this.xobjs = null;
                this.commonObjs = commonObjs;
                this.objs = objs;
                this.canvasFactory = canvasFactory;
                this.webGLContext = webGLContext;
                this.imageLayer = imageLayer;
                this.groupStack = [];
                this.processingType3 = null;
                this.baseTransform = null;
                this.baseTransformStack = [];
                this.groupLevel = 0;
                this.smaskStack = [];
                this.smaskCounter = 0;
                this.tempSMask = null;
                this.cachedCanvases = new CachedCanvases(this.canvasFactory);
                if (canvasCtx) {
                    addContextCurrentTransform(canvasCtx);
                }
                this._cachedGetSinglePixelWidth = null;
            }
            function putBinaryImageData(ctx, imgData) {
                if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {
                    ctx.putImageData(imgData, 0, 0);
                    return;
                }
                var height = imgData.height, width = imgData.width;
                var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
                var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
                var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
                var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
                var srcPos = 0, destPos;
                var src = imgData.data;
                var dest = chunkImgData.data;
                var i, j, thisChunkHeight, elemsInThisChunk;
                if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {
                    var srcLength = src.byteLength;
                    var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
                    var dest32DataLength = dest32.length;
                    var fullSrcDiff = width + 7 >> 3;
                    var white = 4294967295;
                    var black = IsLittleEndianCached.value ? 4278190080 : 255;
                    for (i = 0; i < totalChunks; i++) {
                        thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                        destPos = 0;
                        for (j = 0; j < thisChunkHeight; j++) {
                            var srcDiff = srcLength - srcPos;
                            var k = 0;
                            var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
                            var kEndUnrolled = kEnd & ~7;
                            var mask = 0;
                            var srcByte = 0;
                            for (;k < kEndUnrolled; k += 8) {
                                srcByte = src[srcPos++];
                                dest32[destPos++] = srcByte & 128 ? white : black;
                                dest32[destPos++] = srcByte & 64 ? white : black;
                                dest32[destPos++] = srcByte & 32 ? white : black;
                                dest32[destPos++] = srcByte & 16 ? white : black;
                                dest32[destPos++] = srcByte & 8 ? white : black;
                                dest32[destPos++] = srcByte & 4 ? white : black;
                                dest32[destPos++] = srcByte & 2 ? white : black;
                                dest32[destPos++] = srcByte & 1 ? white : black;
                            }
                            for (;k < kEnd; k++) {
                                if (mask === 0) {
                                    srcByte = src[srcPos++];
                                    mask = 128;
                                }
                                dest32[destPos++] = srcByte & mask ? white : black;
                                mask >>= 1;
                            }
                        }
                        while (destPos < dest32DataLength) {
                            dest32[destPos++] = 0;
                        }
                        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                    }
                } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {
                    j = 0;
                    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
                    for (i = 0; i < fullChunks; i++) {
                        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                        srcPos += elemsInThisChunk;
                        ctx.putImageData(chunkImgData, 0, j);
                        j += FULL_CHUNK_HEIGHT;
                    }
                    if (i < totalChunks) {
                        elemsInThisChunk = width * partialChunkHeight * 4;
                        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                        ctx.putImageData(chunkImgData, 0, j);
                    }
                } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {
                    thisChunkHeight = FULL_CHUNK_HEIGHT;
                    elemsInThisChunk = width * thisChunkHeight;
                    for (i = 0; i < totalChunks; i++) {
                        if (i >= fullChunks) {
                            thisChunkHeight = partialChunkHeight;
                            elemsInThisChunk = width * thisChunkHeight;
                        }
                        destPos = 0;
                        for (j = elemsInThisChunk; j--; ) {
                            dest[destPos++] = src[srcPos++];
                            dest[destPos++] = src[srcPos++];
                            dest[destPos++] = src[srcPos++];
                            dest[destPos++] = 255;
                        }
                        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                    }
                } else {
                    throw new Error("bad image kind: ".concat(imgData.kind));
                }
            }
            function putBinaryImageMask(ctx, imgData) {
                var height = imgData.height, width = imgData.width;
                var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
                var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
                var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
                var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
                var srcPos = 0;
                var src = imgData.data;
                var dest = chunkImgData.data;
                for (var i = 0; i < totalChunks; i++) {
                    var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                    var destPos = 3;
                    for (var j = 0; j < thisChunkHeight; j++) {
                        var mask = 0;
                        for (var k = 0; k < width; k++) {
                            if (!mask) {
                                var elem = src[srcPos++];
                                mask = 128;
                            }
                            dest[destPos] = elem & mask ? 0 : 255;
                            destPos += 4;
                            mask >>= 1;
                        }
                    }
                    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                }
            }
            function copyCtxState(sourceCtx, destCtx) {
                var properties = [ "strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font" ];
                for (var i = 0, ii = properties.length; i < ii; i++) {
                    var property = properties[i];
                    if (sourceCtx[property] !== undefined) {
                        destCtx[property] = sourceCtx[property];
                    }
                }
                if (sourceCtx.setLineDash !== undefined) {
                    destCtx.setLineDash(sourceCtx.getLineDash());
                    destCtx.lineDashOffset = sourceCtx.lineDashOffset;
                }
            }
            function resetCtxToDefault(ctx) {
                ctx.strokeStyle = "#000000";
                ctx.fillStyle = "#000000";
                ctx.fillRule = "nonzero";
                ctx.globalAlpha = 1;
                ctx.lineWidth = 1;
                ctx.lineCap = "butt";
                ctx.lineJoin = "miter";
                ctx.miterLimit = 10;
                ctx.globalCompositeOperation = "source-over";
                ctx.font = "10px sans-serif";
                if (ctx.setLineDash !== undefined) {
                    ctx.setLineDash([]);
                    ctx.lineDashOffset = 0;
                }
            }
            function composeSMaskBackdrop(bytes, r0, g0, b0) {
                var length = bytes.length;
                for (var i = 3; i < length; i += 4) {
                    var alpha = bytes[i];
                    if (alpha === 0) {
                        bytes[i - 3] = r0;
                        bytes[i - 2] = g0;
                        bytes[i - 1] = b0;
                    } else if (alpha < 255) {
                        var alpha_ = 255 - alpha;
                        bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
                        bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
                        bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
                    }
                }
            }
            function composeSMaskAlpha(maskData, layerData, transferMap) {
                var length = maskData.length;
                var scale = 1 / 255;
                for (var i = 3; i < length; i += 4) {
                    var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
                    layerData[i] = layerData[i] * alpha * scale | 0;
                }
            }
            function composeSMaskLuminosity(maskData, layerData, transferMap) {
                var length = maskData.length;
                for (var i = 3; i < length; i += 4) {
                    var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
                    layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
                }
            }
            function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {
                var hasBackdrop = !!backdrop;
                var r0 = hasBackdrop ? backdrop[0] : 0;
                var g0 = hasBackdrop ? backdrop[1] : 0;
                var b0 = hasBackdrop ? backdrop[2] : 0;
                var composeFn;
                if (subtype === "Luminosity") {
                    composeFn = composeSMaskLuminosity;
                } else {
                    composeFn = composeSMaskAlpha;
                }
                var PIXELS_TO_PROCESS = 1048576;
                var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));
                for (var row = 0; row < height; row += chunkSize) {
                    var chunkHeight = Math.min(chunkSize, height - row);
                    var maskData = maskCtx.getImageData(0, row, width, chunkHeight);
                    var layerData = layerCtx.getImageData(0, row, width, chunkHeight);
                    if (hasBackdrop) {
                        composeSMaskBackdrop(maskData.data, r0, g0, b0);
                    }
                    composeFn(maskData.data, layerData.data, transferMap);
                    maskCtx.putImageData(layerData, 0, row);
                }
            }
            function composeSMask(ctx, smask, layerCtx, webGLContext) {
                var mask = smask.canvas;
                var maskCtx = smask.context;
                ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);
                var backdrop = smask.backdrop || null;
                if (!smask.transferMap && webGLContext.isEnabled) {
                    var composed = webGLContext.composeSMask({
                        layer: layerCtx.canvas,
                        mask: mask,
                        properties: {
                            subtype: smask.subtype,
                            backdrop: backdrop
                        }
                    });
                    ctx.setTransform(1, 0, 0, 1, 0, 0);
                    ctx.drawImage(composed, smask.offsetX, smask.offsetY);
                    return;
                }
                genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);
                ctx.drawImage(mask, 0, 0);
            }
            var LINE_CAP_STYLES = [ "butt", "round", "square" ];
            var LINE_JOIN_STYLES = [ "miter", "round", "bevel" ];
            var NORMAL_CLIP = {};
            var EO_CLIP = {};
            CanvasGraphics.prototype = {
                beginDrawing: function beginDrawing(_ref) {
                    var transform = _ref.transform, viewport = _ref.viewport, _ref$transparency = _ref.transparency, transparency = _ref$transparency === void 0 ? false : _ref$transparency, _ref$background = _ref.background, background = _ref$background === void 0 ? null : _ref$background;
                    var width = this.ctx.canvas.width;
                    var height = this.ctx.canvas.height;
                    this.ctx.save();
                    this.ctx.fillStyle = background || "rgb(255, 255, 255)";
                    this.ctx.fillRect(0, 0, width, height);
                    this.ctx.restore();
                    if (transparency) {
                        var transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height, true);
                        this.compositeCtx = this.ctx;
                        this.transparentCanvas = transparentCanvas.canvas;
                        this.ctx = transparentCanvas.context;
                        this.ctx.save();
                        this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);
                    }
                    this.ctx.save();
                    resetCtxToDefault(this.ctx);
                    if (transform) {
                        this.ctx.transform.apply(this.ctx, transform);
                    }
                    this.ctx.transform.apply(this.ctx, viewport.transform);
                    this.baseTransform = this.ctx.mozCurrentTransform.slice();
                    if (this.imageLayer) {
                        this.imageLayer.beginLayout();
                    }
                },
                executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
                    var argsArray = operatorList.argsArray;
                    var fnArray = operatorList.fnArray;
                    var i = executionStartIdx || 0;
                    var argsArrayLen = argsArray.length;
                    if (argsArrayLen === i) {
                        return i;
                    }
                    var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";
                    var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
                    var steps = 0;
                    var commonObjs = this.commonObjs;
                    var objs = this.objs;
                    var fnId;
                    while (true) {
                        if (stepper !== undefined && i === stepper.nextBreakPoint) {
                            stepper.breakIt(i, continueCallback);
                            return i;
                        }
                        fnId = fnArray[i];
                        if (fnId !== _util.OPS.dependency) {
                            this[fnId].apply(this, argsArray[i]);
                        } else {
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;
                            try {
                                for (var _iterator = argsArray[i][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var depObjId = _step.value;
                                    var objsPool = depObjId.startsWith("g_") ? commonObjs : objs;
                                    if (!objsPool.has(depObjId)) {
                                        objsPool.get(depObjId, continueCallback);
                                        return i;
                                    }
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                                        _iterator["return"]();
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                        }
                        i++;
                        if (i === argsArrayLen) {
                            return i;
                        }
                        if (chunkOperations && ++steps > EXECUTION_STEPS) {
                            if (Date.now() > endTime) {
                                continueCallback();
                                return i;
                            }
                            steps = 0;
                        }
                    }
                },
                endDrawing: function CanvasGraphics_endDrawing() {
                    if (this.current.activeSMask !== null) {
                        this.endSMaskGroup();
                    }
                    this.ctx.restore();
                    if (this.transparentCanvas) {
                        this.ctx = this.compositeCtx;
                        this.ctx.save();
                        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                        this.ctx.drawImage(this.transparentCanvas, 0, 0);
                        this.ctx.restore();
                        this.transparentCanvas = null;
                    }
                    this.cachedCanvases.clear();
                    this.webGLContext.clear();
                    if (this.imageLayer) {
                        this.imageLayer.endLayout();
                    }
                },
                setLineWidth: function CanvasGraphics_setLineWidth(width) {
                    this.current.lineWidth = width;
                    this.ctx.lineWidth = width;
                },
                setLineCap: function CanvasGraphics_setLineCap(style) {
                    this.ctx.lineCap = LINE_CAP_STYLES[style];
                },
                setLineJoin: function CanvasGraphics_setLineJoin(style) {
                    this.ctx.lineJoin = LINE_JOIN_STYLES[style];
                },
                setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {
                    this.ctx.miterLimit = limit;
                },
                setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {
                    var ctx = this.ctx;
                    if (ctx.setLineDash !== undefined) {
                        ctx.setLineDash(dashArray);
                        ctx.lineDashOffset = dashPhase;
                    }
                },
                setRenderingIntent: function setRenderingIntent(intent) {},
                setFlatness: function setFlatness(flatness) {},
                setGState: function CanvasGraphics_setGState(states) {
                    for (var i = 0, ii = states.length; i < ii; i++) {
                        var state = states[i];
                        var key = state[0];
                        var value = state[1];
                        switch (key) {
                          case "LW":
                            this.setLineWidth(value);
                            break;

                          case "LC":
                            this.setLineCap(value);
                            break;

                          case "LJ":
                            this.setLineJoin(value);
                            break;

                          case "ML":
                            this.setMiterLimit(value);
                            break;

                          case "D":
                            this.setDash(value[0], value[1]);
                            break;

                          case "RI":
                            this.setRenderingIntent(value);
                            break;

                          case "FL":
                            this.setFlatness(value);
                            break;

                          case "Font":
                            this.setFont(value[0], value[1]);
                            break;

                          case "CA":
                            this.current.strokeAlpha = state[1];
                            break;

                          case "ca":
                            this.current.fillAlpha = state[1];
                            this.ctx.globalAlpha = state[1];
                            break;

                          case "BM":
                            this.ctx.globalCompositeOperation = value;
                            break;

                          case "SMask":
                            if (this.current.activeSMask) {
                                if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {
                                    this.suspendSMaskGroup();
                                } else {
                                    this.endSMaskGroup();
                                }
                            }
                            this.current.activeSMask = value ? this.tempSMask : null;
                            if (this.current.activeSMask) {
                                this.beginSMaskGroup();
                            }
                            this.tempSMask = null;
                            break;
                        }
                    }
                },
                beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {
                    var activeSMask = this.current.activeSMask;
                    var drawnWidth = activeSMask.canvas.width;
                    var drawnHeight = activeSMask.canvas.height;
                    var cacheId = "smaskGroupAt" + this.groupLevel;
                    var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
                    var currentCtx = this.ctx;
                    var currentTransform = currentCtx.mozCurrentTransform;
                    this.ctx.save();
                    var groupCtx = scratchCanvas.context;
                    groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);
                    groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);
                    groupCtx.transform.apply(groupCtx, currentTransform);
                    activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;
                    copyCtxState(currentCtx, groupCtx);
                    this.ctx = groupCtx;
                    this.setGState([ [ "BM", "source-over" ], [ "ca", 1 ], [ "CA", 1 ] ]);
                    this.groupStack.push(currentCtx);
                    this.groupLevel++;
                },
                suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {
                    var groupCtx = this.ctx;
                    this.groupLevel--;
                    this.ctx = this.groupStack.pop();
                    composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);
                    this.ctx.restore();
                    this.ctx.save();
                    copyCtxState(groupCtx, this.ctx);
                    this.current.resumeSMaskCtx = groupCtx;
                    var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);
                    this.ctx.transform.apply(this.ctx, deltaTransform);
                    groupCtx.save();
                    groupCtx.setTransform(1, 0, 0, 1, 0, 0);
                    groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);
                    groupCtx.restore();
                },
                resumeSMaskGroup: function CanvasGraphics_endSMaskGroup() {
                    var groupCtx = this.current.resumeSMaskCtx;
                    var currentCtx = this.ctx;
                    this.ctx = groupCtx;
                    this.groupStack.push(currentCtx);
                    this.groupLevel++;
                },
                endSMaskGroup: function CanvasGraphics_endSMaskGroup() {
                    var groupCtx = this.ctx;
                    this.groupLevel--;
                    this.ctx = this.groupStack.pop();
                    composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);
                    this.ctx.restore();
                    copyCtxState(groupCtx, this.ctx);
                    var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);
                    this.ctx.transform.apply(this.ctx, deltaTransform);
                },
                save: function CanvasGraphics_save() {
                    this.ctx.save();
                    var old = this.current;
                    this.stateStack.push(old);
                    this.current = old.clone();
                    this.current.resumeSMaskCtx = null;
                },
                restore: function CanvasGraphics_restore() {
                    if (this.current.resumeSMaskCtx) {
                        this.resumeSMaskGroup();
                    }
                    if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {
                        this.endSMaskGroup();
                    }
                    if (this.stateStack.length !== 0) {
                        this.current = this.stateStack.pop();
                        this.ctx.restore();
                        this.pendingClip = null;
                        this._cachedGetSinglePixelWidth = null;
                    }
                },
                transform: function CanvasGraphics_transform(a, b, c, d, e, f) {
                    this.ctx.transform(a, b, c, d, e, f);
                    this._cachedGetSinglePixelWidth = null;
                },
                constructPath: function CanvasGraphics_constructPath(ops, args) {
                    var ctx = this.ctx;
                    var current = this.current;
                    var x = current.x, y = current.y;
                    for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {
                        switch (ops[i] | 0) {
                          case _util.OPS.rectangle:
                            x = args[j++];
                            y = args[j++];
                            var width = args[j++];
                            var height = args[j++];
                            if (width === 0) {
                                width = this.getSinglePixelWidth();
                            }
                            if (height === 0) {
                                height = this.getSinglePixelWidth();
                            }
                            var xw = x + width;
                            var yh = y + height;
                            this.ctx.moveTo(x, y);
                            this.ctx.lineTo(xw, y);
                            this.ctx.lineTo(xw, yh);
                            this.ctx.lineTo(x, yh);
                            this.ctx.lineTo(x, y);
                            this.ctx.closePath();
                            break;

                          case _util.OPS.moveTo:
                            x = args[j++];
                            y = args[j++];
                            ctx.moveTo(x, y);
                            break;

                          case _util.OPS.lineTo:
                            x = args[j++];
                            y = args[j++];
                            ctx.lineTo(x, y);
                            break;

                          case _util.OPS.curveTo:
                            x = args[j + 4];
                            y = args[j + 5];
                            ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
                            j += 6;
                            break;

                          case _util.OPS.curveTo2:
                            ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
                            x = args[j + 2];
                            y = args[j + 3];
                            j += 4;
                            break;

                          case _util.OPS.curveTo3:
                            x = args[j + 2];
                            y = args[j + 3];
                            ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
                            j += 4;
                            break;

                          case _util.OPS.closePath:
                            ctx.closePath();
                            break;
                        }
                    }
                    current.setCurrentPoint(x, y);
                },
                closePath: function CanvasGraphics_closePath() {
                    this.ctx.closePath();
                },
                stroke: function CanvasGraphics_stroke(consumePath) {
                    consumePath = typeof consumePath !== "undefined" ? consumePath : true;
                    var ctx = this.ctx;
                    var strokeColor = this.current.strokeColor;
                    ctx.lineWidth = Math.max(this.getSinglePixelWidth() * MIN_WIDTH_FACTOR, this.current.lineWidth);
                    ctx.globalAlpha = this.current.strokeAlpha;
                    if (strokeColor && strokeColor.hasOwnProperty("type") && strokeColor.type === "Pattern") {
                        ctx.save();
                        ctx.strokeStyle = strokeColor.getPattern(ctx, this);
                        ctx.stroke();
                        ctx.restore();
                    } else {
                        ctx.stroke();
                    }
                    if (consumePath) {
                        this.consumePath();
                    }
                    ctx.globalAlpha = this.current.fillAlpha;
                },
                closeStroke: function CanvasGraphics_closeStroke() {
                    this.closePath();
                    this.stroke();
                },
                fill: function CanvasGraphics_fill(consumePath) {
                    consumePath = typeof consumePath !== "undefined" ? consumePath : true;
                    var ctx = this.ctx;
                    var fillColor = this.current.fillColor;
                    var isPatternFill = this.current.patternFill;
                    var needRestore = false;
                    if (isPatternFill) {
                        ctx.save();
                        if (this.baseTransform) {
                            ctx.setTransform.apply(ctx, this.baseTransform);
                        }
                        ctx.fillStyle = fillColor.getPattern(ctx, this);
                        needRestore = true;
                    }
                    if (this.pendingEOFill) {
                        ctx.fill("evenodd");
                        this.pendingEOFill = false;
                    } else {
                        ctx.fill();
                    }
                    if (needRestore) {
                        ctx.restore();
                    }
                    if (consumePath) {
                        this.consumePath();
                    }
                },
                eoFill: function CanvasGraphics_eoFill() {
                    this.pendingEOFill = true;
                    this.fill();
                },
                fillStroke: function CanvasGraphics_fillStroke() {
                    this.fill(false);
                    this.stroke(false);
                    this.consumePath();
                },
                eoFillStroke: function CanvasGraphics_eoFillStroke() {
                    this.pendingEOFill = true;
                    this.fillStroke();
                },
                closeFillStroke: function CanvasGraphics_closeFillStroke() {
                    this.closePath();
                    this.fillStroke();
                },
                closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {
                    this.pendingEOFill = true;
                    this.closePath();
                    this.fillStroke();
                },
                endPath: function CanvasGraphics_endPath() {
                    this.consumePath();
                },
                clip: function CanvasGraphics_clip() {
                    this.pendingClip = NORMAL_CLIP;
                },
                eoClip: function CanvasGraphics_eoClip() {
                    this.pendingClip = EO_CLIP;
                },
                beginText: function CanvasGraphics_beginText() {
                    this.current.textMatrix = _util.IDENTITY_MATRIX;
                    this.current.textMatrixScale = 1;
                    this.current.x = this.current.lineX = 0;
                    this.current.y = this.current.lineY = 0;
                },
                endText: function CanvasGraphics_endText() {
                    var paths = this.pendingTextPaths;
                    var ctx = this.ctx;
                    if (paths === undefined) {
                        ctx.beginPath();
                        return;
                    }
                    ctx.save();
                    ctx.beginPath();
                    for (var i = 0; i < paths.length; i++) {
                        var path = paths[i];
                        ctx.setTransform.apply(ctx, path.transform);
                        ctx.translate(path.x, path.y);
                        path.addToPath(ctx, path.fontSize);
                    }
                    ctx.restore();
                    ctx.clip();
                    ctx.beginPath();
                    delete this.pendingTextPaths;
                },
                setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {
                    this.current.charSpacing = spacing;
                },
                setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {
                    this.current.wordSpacing = spacing;
                },
                setHScale: function CanvasGraphics_setHScale(scale) {
                    this.current.textHScale = scale / 100;
                },
                setLeading: function CanvasGraphics_setLeading(leading) {
                    this.current.leading = -leading;
                },
                setFont: function CanvasGraphics_setFont(fontRefName, size) {
                    var fontObj = this.commonObjs.get(fontRefName);
                    var current = this.current;
                    if (!fontObj) {
                        throw new Error("Can't find font for ".concat(fontRefName));
                    }
                    current.fontMatrix = fontObj.fontMatrix ? fontObj.fontMatrix : _util.FONT_IDENTITY_MATRIX;
                    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
                        (0, _util.warn)("Invalid font matrix for font " + fontRefName);
                    }
                    if (size < 0) {
                        size = -size;
                        current.fontDirection = -1;
                    } else {
                        current.fontDirection = 1;
                    }
                    this.current.font = fontObj;
                    this.current.fontSize = size;
                    if (fontObj.isType3Font) {
                        return;
                    }
                    var name = fontObj.loadedName || "sans-serif";
                    var bold = fontObj.black ? "900" : fontObj.bold ? "bold" : "normal";
                    var italic = fontObj.italic ? "italic" : "normal";
                    var typeface = '"'.concat(name, '", ').concat(fontObj.fallbackName);
                    var browserFontSize = size < MIN_FONT_SIZE ? MIN_FONT_SIZE : size > MAX_FONT_SIZE ? MAX_FONT_SIZE : size;
                    this.current.fontSizeScale = size / browserFontSize;
                    this.ctx.font = "".concat(italic, " ").concat(bold, " ").concat(browserFontSize, "px ").concat(typeface);
                },
                setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {
                    this.current.textRenderingMode = mode;
                },
                setTextRise: function CanvasGraphics_setTextRise(rise) {
                    this.current.textRise = rise;
                },
                moveText: function CanvasGraphics_moveText(x, y) {
                    this.current.x = this.current.lineX += x;
                    this.current.y = this.current.lineY += y;
                },
                setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {
                    this.setLeading(-y);
                    this.moveText(x, y);
                },
                setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {
                    this.current.textMatrix = [ a, b, c, d, e, f ];
                    this.current.textMatrixScale = Math.sqrt(a * a + b * b);
                    this.current.x = this.current.lineX = 0;
                    this.current.y = this.current.lineY = 0;
                },
                nextLine: function CanvasGraphics_nextLine() {
                    this.moveText(0, this.current.leading);
                },
                paintChar: function paintChar(character, x, y, patternTransform) {
                    var ctx = this.ctx;
                    var current = this.current;
                    var font = current.font;
                    var textRenderingMode = current.textRenderingMode;
                    var fontSize = current.fontSize / current.fontSizeScale;
                    var fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
                    var isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);
                    var patternFill = current.patternFill && font.data;
                    var addToPath;
                    if (font.disableFontFace || isAddToPathSet || patternFill) {
                        addToPath = font.getPathGenerator(this.commonObjs, character);
                    }
                    if (font.disableFontFace || patternFill) {
                        ctx.save();
                        ctx.translate(x, y);
                        ctx.beginPath();
                        addToPath(ctx, fontSize);
                        if (patternTransform) {
                            ctx.setTransform.apply(ctx, patternTransform);
                        }
                        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                            ctx.fill();
                        }
                        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                            ctx.stroke();
                        }
                        ctx.restore();
                    } else {
                        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                            ctx.fillText(character, x, y);
                        }
                        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                            ctx.strokeText(character, x, y);
                        }
                    }
                    if (isAddToPathSet) {
                        var paths = this.pendingTextPaths || (this.pendingTextPaths = []);
                        paths.push({
                            transform: ctx.mozCurrentTransform,
                            x: x,
                            y: y,
                            fontSize: fontSize,
                            addToPath: addToPath
                        });
                    }
                },
                get isFontSubpixelAAEnabled() {
                    var _this$cachedCanvases$ = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10), ctx = _this$cachedCanvases$.context;
                    ctx.scale(1.5, 1);
                    ctx.fillText("I", 0, 10);
                    var data = ctx.getImageData(0, 0, 10, 10).data;
                    var enabled = false;
                    for (var i = 3; i < data.length; i += 4) {
                        if (data[i] > 0 && data[i] < 255) {
                            enabled = true;
                            break;
                        }
                    }
                    return (0, _util.shadow)(this, "isFontSubpixelAAEnabled", enabled);
                },
                showText: function CanvasGraphics_showText(glyphs) {
                    var current = this.current;
                    var font = current.font;
                    if (font.isType3Font) {
                        return this.showType3Text(glyphs);
                    }
                    var fontSize = current.fontSize;
                    if (fontSize === 0) {
                        return;
                    }
                    var ctx = this.ctx;
                    var fontSizeScale = current.fontSizeScale;
                    var charSpacing = current.charSpacing;
                    var wordSpacing = current.wordSpacing;
                    var fontDirection = current.fontDirection;
                    var textHScale = current.textHScale * fontDirection;
                    var glyphsLength = glyphs.length;
                    var vertical = font.vertical;
                    var spacingDir = vertical ? 1 : -1;
                    var defaultVMetrics = font.defaultVMetrics;
                    var widthAdvanceScale = fontSize * current.fontMatrix[0];
                    var simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;
                    ctx.save();
                    var patternTransform;
                    if (current.patternFill) {
                        ctx.save();
                        var pattern = current.fillColor.getPattern(ctx, this);
                        patternTransform = ctx.mozCurrentTransform;
                        ctx.restore();
                        ctx.fillStyle = pattern;
                    }
                    ctx.transform.apply(ctx, current.textMatrix);
                    ctx.translate(current.x, current.y + current.textRise);
                    if (fontDirection > 0) {
                        ctx.scale(textHScale, -1);
                    } else {
                        ctx.scale(textHScale, 1);
                    }
                    var lineWidth = current.lineWidth;
                    var scale = current.textMatrixScale;
                    if (scale === 0 || lineWidth === 0) {
                        var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
                        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                            this._cachedGetSinglePixelWidth = null;
                            lineWidth = this.getSinglePixelWidth() * MIN_WIDTH_FACTOR;
                        }
                    } else {
                        lineWidth /= scale;
                    }
                    if (fontSizeScale !== 1) {
                        ctx.scale(fontSizeScale, fontSizeScale);
                        lineWidth /= fontSizeScale;
                    }
                    ctx.lineWidth = lineWidth;
                    var x = 0, i;
                    for (i = 0; i < glyphsLength; ++i) {
                        var glyph = glyphs[i];
                        if ((0, _util.isNum)(glyph)) {
                            x += spacingDir * glyph * fontSize / 1e3;
                            continue;
                        }
                        var restoreNeeded = false;
                        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                        var character = glyph.fontChar;
                        var accent = glyph.accent;
                        var scaledX, scaledY, scaledAccentX, scaledAccentY;
                        var width = glyph.width;
                        if (vertical) {
                            var vmetric, vx, vy;
                            vmetric = glyph.vmetric || defaultVMetrics;
                            vx = glyph.vmetric ? vmetric[1] : width * .5;
                            vx = -vx * widthAdvanceScale;
                            vy = vmetric[2] * widthAdvanceScale;
                            width = vmetric ? -vmetric[0] : width;
                            scaledX = vx / fontSizeScale;
                            scaledY = (x + vy) / fontSizeScale;
                        } else {
                            scaledX = x / fontSizeScale;
                            scaledY = 0;
                        }
                        if (font.remeasure && width > 0) {
                            var measuredWidth = ctx.measureText(character).width * 1e3 / fontSize * fontSizeScale;
                            if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
                                var characterScaleX = width / measuredWidth;
                                restoreNeeded = true;
                                ctx.save();
                                ctx.scale(characterScaleX, 1);
                                scaledX /= characterScaleX;
                            } else if (width !== measuredWidth) {
                                scaledX += (width - measuredWidth) / 2e3 * fontSize / fontSizeScale;
                            }
                        }
                        if (glyph.isInFont || font.missingFile) {
                            if (simpleFillText && !accent) {
                                ctx.fillText(character, scaledX, scaledY);
                            } else {
                                this.paintChar(character, scaledX, scaledY, patternTransform);
                                if (accent) {
                                    scaledAccentX = scaledX + accent.offset.x / fontSizeScale;
                                    scaledAccentY = scaledY - accent.offset.y / fontSizeScale;
                                    this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);
                                }
                            }
                        }
                        var charWidth = width * widthAdvanceScale + spacing * fontDirection;
                        x += charWidth;
                        if (restoreNeeded) {
                            ctx.restore();
                        }
                    }
                    if (vertical) {
                        current.y -= x * textHScale;
                    } else {
                        current.x += x * textHScale;
                    }
                    ctx.restore();
                },
                showType3Text: function CanvasGraphics_showType3Text(glyphs) {
                    var ctx = this.ctx;
                    var current = this.current;
                    var font = current.font;
                    var fontSize = current.fontSize;
                    var fontDirection = current.fontDirection;
                    var spacingDir = font.vertical ? 1 : -1;
                    var charSpacing = current.charSpacing;
                    var wordSpacing = current.wordSpacing;
                    var textHScale = current.textHScale * fontDirection;
                    var fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;
                    var glyphsLength = glyphs.length;
                    var isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;
                    var i, glyph, width, spacingLength;
                    if (isTextInvisible || fontSize === 0) {
                        return;
                    }
                    this._cachedGetSinglePixelWidth = null;
                    ctx.save();
                    ctx.transform.apply(ctx, current.textMatrix);
                    ctx.translate(current.x, current.y);
                    ctx.scale(textHScale, fontDirection);
                    for (i = 0; i < glyphsLength; ++i) {
                        glyph = glyphs[i];
                        if ((0, _util.isNum)(glyph)) {
                            spacingLength = spacingDir * glyph * fontSize / 1e3;
                            this.ctx.translate(spacingLength, 0);
                            current.x += spacingLength * textHScale;
                            continue;
                        }
                        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                        var operatorList = font.charProcOperatorList[glyph.operatorListId];
                        if (!operatorList) {
                            (0, _util.warn)('Type3 character "'.concat(glyph.operatorListId, '" is not available.'));
                            continue;
                        }
                        this.processingType3 = glyph;
                        this.save();
                        ctx.scale(fontSize, fontSize);
                        ctx.transform.apply(ctx, fontMatrix);
                        this.executeOperatorList(operatorList);
                        this.restore();
                        var transformed = _util.Util.applyTransform([ glyph.width, 0 ], fontMatrix);
                        width = transformed[0] * fontSize + spacing;
                        ctx.translate(width, 0);
                        current.x += width * textHScale;
                    }
                    ctx.restore();
                    this.processingType3 = null;
                },
                setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},
                setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
                    this.ctx.rect(llx, lly, urx - llx, ury - lly);
                    this.clip();
                    this.endPath();
                },
                getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {
                    var _this = this;
                    var pattern;
                    if (IR[0] === "TilingPattern") {
                        var color = IR[1];
                        var baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();
                        var canvasGraphicsFactory = {
                            createCanvasGraphics: function createCanvasGraphics(ctx) {
                                return new CanvasGraphics(ctx, _this.commonObjs, _this.objs, _this.canvasFactory, _this.webGLContext);
                            }
                        };
                        pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
                    } else {
                        pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);
                    }
                    return pattern;
                },
                setStrokeColorN: function CanvasGraphics_setStrokeColorN() {
                    this.current.strokeColor = this.getColorN_Pattern(arguments);
                },
                setFillColorN: function CanvasGraphics_setFillColorN() {
                    this.current.fillColor = this.getColorN_Pattern(arguments);
                    this.current.patternFill = true;
                },
                setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {
                    var color = _util.Util.makeCssRgb(r, g, b);
                    this.ctx.strokeStyle = color;
                    this.current.strokeColor = color;
                },
                setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {
                    var color = _util.Util.makeCssRgb(r, g, b);
                    this.ctx.fillStyle = color;
                    this.current.fillColor = color;
                    this.current.patternFill = false;
                },
                shadingFill: function CanvasGraphics_shadingFill(patternIR) {
                    var ctx = this.ctx;
                    this.save();
                    var pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);
                    ctx.fillStyle = pattern.getPattern(ctx, this, true);
                    var inv = ctx.mozCurrentTransformInverse;
                    if (inv) {
                        var canvas = ctx.canvas;
                        var width = canvas.width;
                        var height = canvas.height;
                        var bl = _util.Util.applyTransform([ 0, 0 ], inv);
                        var br = _util.Util.applyTransform([ 0, height ], inv);
                        var ul = _util.Util.applyTransform([ width, 0 ], inv);
                        var ur = _util.Util.applyTransform([ width, height ], inv);
                        var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
                        var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
                        var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
                        var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
                        this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
                    } else {
                        this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
                    }
                    this.restore();
                },
                beginInlineImage: function CanvasGraphics_beginInlineImage() {
                    (0, _util.unreachable)("Should not call beginInlineImage");
                },
                beginImageData: function CanvasGraphics_beginImageData() {
                    (0, _util.unreachable)("Should not call beginImageData");
                },
                paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {
                    this.save();
                    this.baseTransformStack.push(this.baseTransform);
                    if (Array.isArray(matrix) && matrix.length === 6) {
                        this.transform.apply(this, matrix);
                    }
                    this.baseTransform = this.ctx.mozCurrentTransform;
                    if (bbox) {
                        var width = bbox[2] - bbox[0];
                        var height = bbox[3] - bbox[1];
                        this.ctx.rect(bbox[0], bbox[1], width, height);
                        this.clip();
                        this.endPath();
                    }
                },
                paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {
                    this.restore();
                    this.baseTransform = this.baseTransformStack.pop();
                },
                beginGroup: function CanvasGraphics_beginGroup(group) {
                    this.save();
                    var currentCtx = this.ctx;
                    if (!group.isolated) {
                        (0, _util.info)("TODO: Support non-isolated groups.");
                    }
                    if (group.knockout) {
                        (0, _util.warn)("Knockout groups not supported.");
                    }
                    var currentTransform = currentCtx.mozCurrentTransform;
                    if (group.matrix) {
                        currentCtx.transform.apply(currentCtx, group.matrix);
                    }
                    if (!group.bbox) {
                        throw new Error("Bounding box is required.");
                    }
                    var bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);
                    var canvasBounds = [ 0, 0, currentCtx.canvas.width, currentCtx.canvas.height ];
                    bounds = _util.Util.intersect(bounds, canvasBounds) || [ 0, 0, 0, 0 ];
                    var offsetX = Math.floor(bounds[0]);
                    var offsetY = Math.floor(bounds[1]);
                    var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
                    var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
                    var scaleX = 1, scaleY = 1;
                    if (drawnWidth > MAX_GROUP_SIZE) {
                        scaleX = drawnWidth / MAX_GROUP_SIZE;
                        drawnWidth = MAX_GROUP_SIZE;
                    }
                    if (drawnHeight > MAX_GROUP_SIZE) {
                        scaleY = drawnHeight / MAX_GROUP_SIZE;
                        drawnHeight = MAX_GROUP_SIZE;
                    }
                    var cacheId = "groupAt" + this.groupLevel;
                    if (group.smask) {
                        cacheId += "_smask_" + this.smaskCounter++ % 2;
                    }
                    var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
                    var groupCtx = scratchCanvas.context;
                    groupCtx.scale(1 / scaleX, 1 / scaleY);
                    groupCtx.translate(-offsetX, -offsetY);
                    groupCtx.transform.apply(groupCtx, currentTransform);
                    if (group.smask) {
                        this.smaskStack.push({
                            canvas: scratchCanvas.canvas,
                            context: groupCtx,
                            offsetX: offsetX,
                            offsetY: offsetY,
                            scaleX: scaleX,
                            scaleY: scaleY,
                            subtype: group.smask.subtype,
                            backdrop: group.smask.backdrop,
                            transferMap: group.smask.transferMap || null,
                            startTransformInverse: null
                        });
                    } else {
                        currentCtx.setTransform(1, 0, 0, 1, 0, 0);
                        currentCtx.translate(offsetX, offsetY);
                        currentCtx.scale(scaleX, scaleY);
                    }
                    copyCtxState(currentCtx, groupCtx);
                    this.ctx = groupCtx;
                    this.setGState([ [ "BM", "source-over" ], [ "ca", 1 ], [ "CA", 1 ] ]);
                    this.groupStack.push(currentCtx);
                    this.groupLevel++;
                    this.current.activeSMask = null;
                },
                endGroup: function CanvasGraphics_endGroup(group) {
                    this.groupLevel--;
                    var groupCtx = this.ctx;
                    this.ctx = this.groupStack.pop();
                    if (this.ctx.imageSmoothingEnabled !== undefined) {
                        this.ctx.imageSmoothingEnabled = false;
                    } else {
                        this.ctx.mozImageSmoothingEnabled = false;
                    }
                    if (group.smask) {
                        this.tempSMask = this.smaskStack.pop();
                    } else {
                        this.ctx.drawImage(groupCtx.canvas, 0, 0);
                    }
                    this.restore();
                },
                beginAnnotations: function CanvasGraphics_beginAnnotations() {
                    this.save();
                    if (this.baseTransform) {
                        this.ctx.setTransform.apply(this.ctx, this.baseTransform);
                    }
                },
                endAnnotations: function CanvasGraphics_endAnnotations() {
                    this.restore();
                },
                beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {
                    this.save();
                    resetCtxToDefault(this.ctx);
                    this.current = new CanvasExtraState();
                    if (Array.isArray(rect) && rect.length === 4) {
                        var width = rect[2] - rect[0];
                        var height = rect[3] - rect[1];
                        this.ctx.rect(rect[0], rect[1], width, height);
                        this.clip();
                        this.endPath();
                    }
                    this.transform.apply(this, transform);
                    this.transform.apply(this, matrix);
                },
                endAnnotation: function CanvasGraphics_endAnnotation() {
                    this.restore();
                },
                paintJpegXObject: function CanvasGraphics_paintJpegXObject(objId, w, h) {
                    var domImage = this.processingType3 ? this.commonObjs.get(objId) : this.objs.get(objId);
                    if (!domImage) {
                        (0, _util.warn)("Dependent image isn't ready yet");
                        return;
                    }
                    this.save();
                    var ctx = this.ctx;
                    ctx.scale(1 / w, -1 / h);
                    ctx.drawImage(domImage, 0, 0, domImage.width, domImage.height, 0, -h, w, h);
                    if (this.imageLayer) {
                        var currentTransform = ctx.mozCurrentTransformInverse;
                        var position = this.getCanvasPosition(0, 0);
                        this.imageLayer.appendImage({
                            objId: objId,
                            left: position[0],
                            top: position[1],
                            width: w / currentTransform[0],
                            height: h / currentTransform[3]
                        });
                    }
                    this.restore();
                },
                paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {
                    var ctx = this.ctx;
                    var width = img.width, height = img.height;
                    var fillColor = this.current.fillColor;
                    var isPatternFill = this.current.patternFill;
                    var glyph = this.processingType3;
                    if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {
                        if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {
                            glyph.compiled = compileType3Glyph({
                                data: img.data,
                                width: width,
                                height: height
                            });
                        } else {
                            glyph.compiled = null;
                        }
                    }
                    if (glyph && glyph.compiled) {
                        glyph.compiled(ctx);
                        return;
                    }
                    var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                    var maskCtx = maskCanvas.context;
                    maskCtx.save();
                    putBinaryImageMask(maskCtx, img);
                    maskCtx.globalCompositeOperation = "source-in";
                    maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
                    maskCtx.fillRect(0, 0, width, height);
                    maskCtx.restore();
                    this.paintInlineImageXObject(maskCanvas.canvas);
                },
                paintImageMaskXObjectRepeat: function CanvasGraphics_paintImageMaskXObjectRepeat(imgData, scaleX, scaleY, positions) {
                    var width = imgData.width;
                    var height = imgData.height;
                    var fillColor = this.current.fillColor;
                    var isPatternFill = this.current.patternFill;
                    var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                    var maskCtx = maskCanvas.context;
                    maskCtx.save();
                    putBinaryImageMask(maskCtx, imgData);
                    maskCtx.globalCompositeOperation = "source-in";
                    maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
                    maskCtx.fillRect(0, 0, width, height);
                    maskCtx.restore();
                    var ctx = this.ctx;
                    for (var i = 0, ii = positions.length; i < ii; i += 2) {
                        ctx.save();
                        ctx.transform(scaleX, 0, 0, scaleY, positions[i], positions[i + 1]);
                        ctx.scale(1, -1);
                        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
                        ctx.restore();
                    }
                },
                paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {
                    var ctx = this.ctx;
                    var fillColor = this.current.fillColor;
                    var isPatternFill = this.current.patternFill;
                    for (var i = 0, ii = images.length; i < ii; i++) {
                        var image = images[i];
                        var width = image.width, height = image.height;
                        var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                        var maskCtx = maskCanvas.context;
                        maskCtx.save();
                        putBinaryImageMask(maskCtx, image);
                        maskCtx.globalCompositeOperation = "source-in";
                        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
                        maskCtx.fillRect(0, 0, width, height);
                        maskCtx.restore();
                        ctx.save();
                        ctx.transform.apply(ctx, image.transform);
                        ctx.scale(1, -1);
                        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
                        ctx.restore();
                    }
                },
                paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {
                    var imgData = this.processingType3 ? this.commonObjs.get(objId) : this.objs.get(objId);
                    if (!imgData) {
                        (0, _util.warn)("Dependent image isn't ready yet");
                        return;
                    }
                    this.paintInlineImageXObject(imgData);
                },
                paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
                    var imgData = this.processingType3 ? this.commonObjs.get(objId) : this.objs.get(objId);
                    if (!imgData) {
                        (0, _util.warn)("Dependent image isn't ready yet");
                        return;
                    }
                    var width = imgData.width;
                    var height = imgData.height;
                    var map = [];
                    for (var i = 0, ii = positions.length; i < ii; i += 2) {
                        map.push({
                            transform: [ scaleX, 0, 0, scaleY, positions[i], positions[i + 1] ],
                            x: 0,
                            y: 0,
                            w: width,
                            h: height
                        });
                    }
                    this.paintInlineImageXObjectGroup(imgData, map);
                },
                paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {
                    var width = imgData.width;
                    var height = imgData.height;
                    var ctx = this.ctx;
                    this.save();
                    ctx.scale(1 / width, -1 / height);
                    var currentTransform = ctx.mozCurrentTransformInverse;
                    var a = currentTransform[0], b = currentTransform[1];
                    var widthScale = Math.max(Math.sqrt(a * a + b * b), 1);
                    var c = currentTransform[2], d = currentTransform[3];
                    var heightScale = Math.max(Math.sqrt(c * c + d * d), 1);
                    var imgToPaint, tmpCanvas;
                    if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {
                        imgToPaint = imgData;
                    } else {
                        tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
                        var tmpCtx = tmpCanvas.context;
                        putBinaryImageData(tmpCtx, imgData);
                        imgToPaint = tmpCanvas.canvas;
                    }
                    var paintWidth = width, paintHeight = height;
                    var tmpCanvasId = "prescale1";
                    while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
                        var newWidth = paintWidth, newHeight = paintHeight;
                        if (widthScale > 2 && paintWidth > 1) {
                            newWidth = Math.ceil(paintWidth / 2);
                            widthScale /= paintWidth / newWidth;
                        }
                        if (heightScale > 2 && paintHeight > 1) {
                            newHeight = Math.ceil(paintHeight / 2);
                            heightScale /= paintHeight / newHeight;
                        }
                        tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
                        tmpCtx = tmpCanvas.context;
                        tmpCtx.clearRect(0, 0, newWidth, newHeight);
                        tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
                        imgToPaint = tmpCanvas.canvas;
                        paintWidth = newWidth;
                        paintHeight = newHeight;
                        tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
                    }
                    ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);
                    if (this.imageLayer) {
                        var position = this.getCanvasPosition(0, -height);
                        this.imageLayer.appendImage({
                            imgData: imgData,
                            left: position[0],
                            top: position[1],
                            width: width / currentTransform[0],
                            height: height / currentTransform[3]
                        });
                    }
                    this.restore();
                },
                paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {
                    var ctx = this.ctx;
                    var w = imgData.width;
                    var h = imgData.height;
                    var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h);
                    var tmpCtx = tmpCanvas.context;
                    putBinaryImageData(tmpCtx, imgData);
                    for (var i = 0, ii = map.length; i < ii; i++) {
                        var entry = map[i];
                        ctx.save();
                        ctx.transform.apply(ctx, entry.transform);
                        ctx.scale(1, -1);
                        ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);
                        if (this.imageLayer) {
                            var position = this.getCanvasPosition(entry.x, entry.y);
                            this.imageLayer.appendImage({
                                imgData: imgData,
                                left: position[0],
                                top: position[1],
                                width: w,
                                height: h
                            });
                        }
                        ctx.restore();
                    }
                },
                paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {
                    this.ctx.fillRect(0, 0, 1, 1);
                },
                paintXObject: function CanvasGraphics_paintXObject() {
                    (0, _util.warn)("Unsupported 'paintXObject' command.");
                },
                markPoint: function CanvasGraphics_markPoint(tag) {},
                markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},
                beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {},
                beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {},
                endMarkedContent: function CanvasGraphics_endMarkedContent() {},
                beginCompat: function CanvasGraphics_beginCompat() {},
                endCompat: function CanvasGraphics_endCompat() {},
                consumePath: function CanvasGraphics_consumePath() {
                    var ctx = this.ctx;
                    if (this.pendingClip) {
                        if (this.pendingClip === EO_CLIP) {
                            ctx.clip("evenodd");
                        } else {
                            ctx.clip();
                        }
                        this.pendingClip = null;
                    }
                    ctx.beginPath();
                },
                getSinglePixelWidth: function getSinglePixelWidth(scale) {
                    if (this._cachedGetSinglePixelWidth === null) {
                        var inverse = this.ctx.mozCurrentTransformInverse;
                        this._cachedGetSinglePixelWidth = Math.sqrt(Math.max(inverse[0] * inverse[0] + inverse[1] * inverse[1], inverse[2] * inverse[2] + inverse[3] * inverse[3]));
                    }
                    return this._cachedGetSinglePixelWidth;
                },
                getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {
                    var transform = this.ctx.mozCurrentTransform;
                    return [ transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5] ];
                }
            };
            for (var op in _util.OPS) {
                CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];
            }
            return CanvasGraphics;
        }();
        exports.CanvasGraphics = CanvasGraphics;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getShadingPatternFromIR = getShadingPatternFromIR;
        exports.TilingPattern = void 0;
        var _util = __w_pdfjs_require__(1);
        var ShadingIRs = {};
        ShadingIRs.RadialAxial = {
            fromIR: function RadialAxial_fromIR(raw) {
                var type = raw[1];
                var colorStops = raw[2];
                var p0 = raw[3];
                var p1 = raw[4];
                var r0 = raw[5];
                var r1 = raw[6];
                return {
                    type: "Pattern",
                    getPattern: function RadialAxial_getPattern(ctx) {
                        var grad;
                        if (type === "axial") {
                            grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);
                        } else if (type === "radial") {
                            grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);
                        }
                        for (var i = 0, ii = colorStops.length; i < ii; ++i) {
                            var c = colorStops[i];
                            grad.addColorStop(c[0], c[1]);
                        }
                        return grad;
                    }
                };
            }
        };
        var createMeshCanvas = function createMeshCanvasClosure() {
            function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
                var coords = context.coords, colors = context.colors;
                var bytes = data.data, rowSize = data.width * 4;
                var tmp;
                if (coords[p1 + 1] > coords[p2 + 1]) {
                    tmp = p1;
                    p1 = p2;
                    p2 = tmp;
                    tmp = c1;
                    c1 = c2;
                    c2 = tmp;
                }
                if (coords[p2 + 1] > coords[p3 + 1]) {
                    tmp = p2;
                    p2 = p3;
                    p3 = tmp;
                    tmp = c2;
                    c2 = c3;
                    c3 = tmp;
                }
                if (coords[p1 + 1] > coords[p2 + 1]) {
                    tmp = p1;
                    p1 = p2;
                    p2 = tmp;
                    tmp = c1;
                    c1 = c2;
                    c2 = tmp;
                }
                var x1 = (coords[p1] + context.offsetX) * context.scaleX;
                var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
                var x2 = (coords[p2] + context.offsetX) * context.scaleX;
                var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
                var x3 = (coords[p3] + context.offsetX) * context.scaleX;
                var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;
                if (y1 >= y3) {
                    return;
                }
                var c1r = colors[c1], c1g = colors[c1 + 1], c1b = colors[c1 + 2];
                var c2r = colors[c2], c2g = colors[c2 + 1], c2b = colors[c2 + 2];
                var c3r = colors[c3], c3g = colors[c3 + 1], c3b = colors[c3 + 2];
                var minY = Math.round(y1), maxY = Math.round(y3);
                var xa, car, cag, cab;
                var xb, cbr, cbg, cbb;
                var k;
                for (var y = minY; y <= maxY; y++) {
                    if (y < y2) {
                        k = y < y1 ? 0 : y1 === y2 ? 1 : (y1 - y) / (y1 - y2);
                        xa = x1 - (x1 - x2) * k;
                        car = c1r - (c1r - c2r) * k;
                        cag = c1g - (c1g - c2g) * k;
                        cab = c1b - (c1b - c2b) * k;
                    } else {
                        k = y > y3 ? 1 : y2 === y3 ? 0 : (y2 - y) / (y2 - y3);
                        xa = x2 - (x2 - x3) * k;
                        car = c2r - (c2r - c3r) * k;
                        cag = c2g - (c2g - c3g) * k;
                        cab = c2b - (c2b - c3b) * k;
                    }
                    k = y < y1 ? 0 : y > y3 ? 1 : (y1 - y) / (y1 - y3);
                    xb = x1 - (x1 - x3) * k;
                    cbr = c1r - (c1r - c3r) * k;
                    cbg = c1g - (c1g - c3g) * k;
                    cbb = c1b - (c1b - c3b) * k;
                    var x1_ = Math.round(Math.min(xa, xb));
                    var x2_ = Math.round(Math.max(xa, xb));
                    var j = rowSize * y + x1_ * 4;
                    for (var x = x1_; x <= x2_; x++) {
                        k = (xa - x) / (xa - xb);
                        k = k < 0 ? 0 : k > 1 ? 1 : k;
                        bytes[j++] = car - (car - cbr) * k | 0;
                        bytes[j++] = cag - (cag - cbg) * k | 0;
                        bytes[j++] = cab - (cab - cbb) * k | 0;
                        bytes[j++] = 255;
                    }
                }
            }
            function drawFigure(data, figure, context) {
                var ps = figure.coords;
                var cs = figure.colors;
                var i, ii;
                switch (figure.type) {
                  case "lattice":
                    var verticesPerRow = figure.verticesPerRow;
                    var rows = Math.floor(ps.length / verticesPerRow) - 1;
                    var cols = verticesPerRow - 1;
                    for (i = 0; i < rows; i++) {
                        var q = i * verticesPerRow;
                        for (var j = 0; j < cols; j++, q++) {
                            drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
                            drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
                        }
                    }
                    break;

                  case "triangles":
                    for (i = 0, ii = ps.length; i < ii; i += 3) {
                        drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
                    }
                    break;

                  default:
                    throw new Error("illegal figure");
                }
            }
            function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases, webGLContext) {
                var EXPECTED_SCALE = 1.1;
                var MAX_PATTERN_SIZE = 3e3;
                var BORDER_SIZE = 2;
                var offsetX = Math.floor(bounds[0]);
                var offsetY = Math.floor(bounds[1]);
                var boundsWidth = Math.ceil(bounds[2]) - offsetX;
                var boundsHeight = Math.ceil(bounds[3]) - offsetY;
                var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
                var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
                var scaleX = boundsWidth / width;
                var scaleY = boundsHeight / height;
                var context = {
                    coords: coords,
                    colors: colors,
                    offsetX: -offsetX,
                    offsetY: -offsetY,
                    scaleX: 1 / scaleX,
                    scaleY: 1 / scaleY
                };
                var paddedWidth = width + BORDER_SIZE * 2;
                var paddedHeight = height + BORDER_SIZE * 2;
                var canvas, tmpCanvas, i, ii;
                if (webGLContext.isEnabled) {
                    canvas = webGLContext.drawFigures({
                        width: width,
                        height: height,
                        backgroundColor: backgroundColor,
                        figures: figures,
                        context: context
                    });
                    tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
                    tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);
                    canvas = tmpCanvas.canvas;
                } else {
                    tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
                    var tmpCtx = tmpCanvas.context;
                    var data = tmpCtx.createImageData(width, height);
                    if (backgroundColor) {
                        var bytes = data.data;
                        for (i = 0, ii = bytes.length; i < ii; i += 4) {
                            bytes[i] = backgroundColor[0];
                            bytes[i + 1] = backgroundColor[1];
                            bytes[i + 2] = backgroundColor[2];
                            bytes[i + 3] = 255;
                        }
                    }
                    for (i = 0; i < figures.length; i++) {
                        drawFigure(data, figures[i], context);
                    }
                    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
                    canvas = tmpCanvas.canvas;
                }
                return {
                    canvas: canvas,
                    offsetX: offsetX - BORDER_SIZE * scaleX,
                    offsetY: offsetY - BORDER_SIZE * scaleY,
                    scaleX: scaleX,
                    scaleY: scaleY
                };
            }
            return createMeshCanvas;
        }();
        ShadingIRs.Mesh = {
            fromIR: function Mesh_fromIR(raw) {
                var coords = raw[2];
                var colors = raw[3];
                var figures = raw[4];
                var bounds = raw[5];
                var matrix = raw[6];
                var background = raw[8];
                return {
                    type: "Pattern",
                    getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {
                        var scale;
                        if (shadingFill) {
                            scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);
                        } else {
                            scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);
                            if (matrix) {
                                var matrixScale = _util.Util.singularValueDecompose2dScale(matrix);
                                scale = [ scale[0] * matrixScale[0], scale[1] * matrixScale[1] ];
                            }
                        }
                        var temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases, owner.webGLContext);
                        if (!shadingFill) {
                            ctx.setTransform.apply(ctx, owner.baseTransform);
                            if (matrix) {
                                ctx.transform.apply(ctx, matrix);
                            }
                        }
                        ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
                        ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
                        return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");
                    }
                };
            }
        };
        ShadingIRs.Dummy = {
            fromIR: function Dummy_fromIR() {
                return {
                    type: "Pattern",
                    getPattern: function Dummy_fromIR_getPattern() {
                        return "hotpink";
                    }
                };
            }
        };
        function getShadingPatternFromIR(raw) {
            var shadingIR = ShadingIRs[raw[0]];
            if (!shadingIR) {
                throw new Error("Unknown IR type: ".concat(raw[0]));
            }
            return shadingIR.fromIR(raw);
        }
        var TilingPattern = function TilingPatternClosure() {
            var PaintType = {
                COLORED: 1,
                UNCOLORED: 2
            };
            var MAX_PATTERN_SIZE = 3e3;
            function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
                this.operatorList = IR[2];
                this.matrix = IR[3] || [ 1, 0, 0, 1, 0, 0 ];
                this.bbox = IR[4];
                this.xstep = IR[5];
                this.ystep = IR[6];
                this.paintType = IR[7];
                this.tilingType = IR[8];
                this.color = color;
                this.canvasGraphicsFactory = canvasGraphicsFactory;
                this.baseTransform = baseTransform;
                this.type = "Pattern";
                this.ctx = ctx;
            }
            TilingPattern.prototype = {
                createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {
                    var operatorList = this.operatorList;
                    var bbox = this.bbox;
                    var xstep = this.xstep;
                    var ystep = this.ystep;
                    var paintType = this.paintType;
                    var tilingType = this.tilingType;
                    var color = this.color;
                    var canvasGraphicsFactory = this.canvasGraphicsFactory;
                    (0, _util.info)("TilingType: " + tilingType);
                    var x0 = bbox[0], y0 = bbox[1], x1 = bbox[2], y1 = bbox[3];
                    var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);
                    var curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);
                    var combinedScale = [ matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1] ];
                    var dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);
                    var dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);
                    var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size, true);
                    var tmpCtx = tmpCanvas.context;
                    var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
                    graphics.groupLevel = owner.groupLevel;
                    this.setFillAndStrokeStyleToContext(graphics, paintType, color);
                    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);
                    graphics.transform(1, 0, 0, 1, -x0, -y0);
                    this.clipBbox(graphics, bbox, x0, y0, x1, y1);
                    graphics.executeOperatorList(operatorList);
                    this.ctx.transform(1, 0, 0, 1, x0, y0);
                    this.ctx.scale(1 / dimx.scale, 1 / dimy.scale);
                    return tmpCanvas.canvas;
                },
                getSizeAndScale: function TilingPattern_getSizeAndScale(step, realOutputSize, scale) {
                    step = Math.abs(step);
                    var maxSize = Math.max(MAX_PATTERN_SIZE, realOutputSize);
                    var size = Math.ceil(step * scale);
                    if (size >= maxSize) {
                        size = maxSize;
                    } else {
                        scale = size / step;
                    }
                    return {
                        scale: scale,
                        size: size
                    };
                },
                clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {
                    if (Array.isArray(bbox) && bbox.length === 4) {
                        var bboxWidth = x1 - x0;
                        var bboxHeight = y1 - y0;
                        graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
                        graphics.clip();
                        graphics.endPath();
                    }
                },
                setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(graphics, paintType, color) {
                    var context = graphics.ctx, current = graphics.current;
                    switch (paintType) {
                      case PaintType.COLORED:
                        var ctx = this.ctx;
                        context.fillStyle = ctx.fillStyle;
                        context.strokeStyle = ctx.strokeStyle;
                        current.fillColor = ctx.fillStyle;
                        current.strokeColor = ctx.strokeStyle;
                        break;

                      case PaintType.UNCOLORED:
                        var cssColor = _util.Util.makeCssRgb(color[0], color[1], color[2]);
                        context.fillStyle = cssColor;
                        context.strokeStyle = cssColor;
                        current.fillColor = cssColor;
                        current.strokeColor = cssColor;
                        break;

                      default:
                        throw new _util.FormatError("Unsupported paint type: ".concat(paintType));
                    }
                },
                getPattern: function TilingPattern_getPattern(ctx, owner) {
                    ctx = this.ctx;
                    ctx.setTransform.apply(ctx, this.baseTransform);
                    ctx.transform.apply(ctx, this.matrix);
                    var temporaryPatternCanvas = this.createPatternCanvas(owner);
                    return ctx.createPattern(temporaryPatternCanvas, "repeat");
                }
            };
            return TilingPattern;
        }();
        exports.TilingPattern = TilingPattern;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.GlobalWorkerOptions = void 0;
        var GlobalWorkerOptions = Object.create(null);
        exports.GlobalWorkerOptions = GlobalWorkerOptions;
        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;
        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? "" : GlobalWorkerOptions.workerSrc;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MessageHandler = MessageHandler;
        var _regenerator = _interopRequireDefault(__w_pdfjs_require__(148));
        var _util = __w_pdfjs_require__(1);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        function resolveCall(_x, _x2) {
            return _resolveCall.apply(this, arguments);
        }
        function _resolveCall() {
            _resolveCall = _asyncToGenerator(_regenerator["default"].mark(function _callee(fn, args) {
                var thisArg, _args = arguments;
                return _regenerator["default"].wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            thisArg = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;
                            if (fn) {
                                _context.next = 3;
                                break;
                            }
                            return _context.abrupt("return");

                          case 3:
                            return _context.abrupt("return", fn.apply(thisArg, args));

                          case 4:
                          case "end":
                            return _context.stop();
                        }
                    }
                }, _callee);
            }));
            return _resolveCall.apply(this, arguments);
        }
        function wrapReason(reason) {
            if (_typeof(reason) !== "object") {
                return reason;
            }
            switch (reason.name) {
              case "AbortException":
                return new _util.AbortException(reason.message);

              case "MissingPDFException":
                return new _util.MissingPDFException(reason.message);

              case "UnexpectedResponseException":
                return new _util.UnexpectedResponseException(reason.message, reason.status);

              default:
                return new _util.UnknownErrorException(reason.message, reason.details);
            }
        }
        function makeReasonSerializable(reason) {
            if (!(reason instanceof Error) || reason instanceof _util.AbortException || reason instanceof _util.MissingPDFException || reason instanceof _util.UnexpectedResponseException || reason instanceof _util.UnknownErrorException) {
                return reason;
            }
            return new _util.UnknownErrorException(reason.message, reason.toString());
        }
        function resolveOrReject(capability, success, reason) {
            if (success) {
                capability.resolve();
            } else {
                capability.reject(reason);
            }
        }
        function finalize(promise) {
            return Promise.resolve(promise)["catch"](function() {});
        }
        function MessageHandler(sourceName, targetName, comObj) {
            var _this = this;
            this.sourceName = sourceName;
            this.targetName = targetName;
            this.comObj = comObj;
            this.callbackId = 1;
            this.streamId = 1;
            this.postMessageTransfers = true;
            this.streamSinks = Object.create(null);
            this.streamControllers = Object.create(null);
            var callbacksCapabilities = this.callbacksCapabilities = Object.create(null);
            var ah = this.actionHandler = Object.create(null);
            this._onComObjOnMessage = function(event) {
                var data = event.data;
                if (data.targetName !== _this.sourceName) {
                    return;
                }
                if (data.stream) {
                    _this._processStreamMessage(data);
                } else if (data.isReply) {
                    var callbackId = data.callbackId;
                    if (data.callbackId in callbacksCapabilities) {
                        var callback = callbacksCapabilities[callbackId];
                        delete callbacksCapabilities[callbackId];
                        if ("error" in data) {
                            callback.reject(wrapReason(data.error));
                        } else {
                            callback.resolve(data.data);
                        }
                    } else {
                        throw new Error("Cannot resolve callback ".concat(callbackId));
                    }
                } else if (data.action in ah) {
                    var action = ah[data.action];
                    if (data.callbackId) {
                        var _sourceName = _this.sourceName;
                        var _targetName = data.sourceName;
                        Promise.resolve().then(function() {
                            return action[0].call(action[1], data.data);
                        }).then(function(result) {
                            comObj.postMessage({
                                sourceName: _sourceName,
                                targetName: _targetName,
                                isReply: true,
                                callbackId: data.callbackId,
                                data: result
                            });
                        }, function(reason) {
                            comObj.postMessage({
                                sourceName: _sourceName,
                                targetName: _targetName,
                                isReply: true,
                                callbackId: data.callbackId,
                                error: makeReasonSerializable(reason)
                            });
                        });
                    } else if (data.streamId) {
                        _this._createStreamSink(data);
                    } else {
                        action[0].call(action[1], data.data);
                    }
                } else {
                    throw new Error("Unknown action from worker: ".concat(data.action));
                }
            };
            comObj.addEventListener("message", this._onComObjOnMessage);
        }
        MessageHandler.prototype = {
            on: function on(actionName, handler, scope) {
                var ah = this.actionHandler;
                if (ah[actionName]) {
                    throw new Error('There is already an actionName called "'.concat(actionName, '"'));
                }
                ah[actionName] = [ handler, scope ];
            },
            send: function send(actionName, data, transfers) {
                var message = {
                    sourceName: this.sourceName,
                    targetName: this.targetName,
                    action: actionName,
                    data: data
                };
                this.postMessage(message, transfers);
            },
            sendWithPromise: function sendWithPromise(actionName, data, transfers) {
                var callbackId = this.callbackId++;
                var message = {
                    sourceName: this.sourceName,
                    targetName: this.targetName,
                    action: actionName,
                    data: data,
                    callbackId: callbackId
                };
                var capability = (0, _util.createPromiseCapability)();
                this.callbacksCapabilities[callbackId] = capability;
                try {
                    this.postMessage(message, transfers);
                } catch (e) {
                    capability.reject(e);
                }
                return capability.promise;
            },
            sendWithStream: function sendWithStream(actionName, data, queueingStrategy, transfers) {
                var _this2 = this;
                var streamId = this.streamId++;
                var sourceName = this.sourceName;
                var targetName = this.targetName;
                return new _util.ReadableStream({
                    start: function start(controller) {
                        var startCapability = (0, _util.createPromiseCapability)();
                        _this2.streamControllers[streamId] = {
                            controller: controller,
                            startCall: startCapability,
                            isClosed: false
                        };
                        _this2.postMessage({
                            sourceName: sourceName,
                            targetName: targetName,
                            action: actionName,
                            streamId: streamId,
                            data: data,
                            desiredSize: controller.desiredSize
                        });
                        return startCapability.promise;
                    },
                    pull: function pull(controller) {
                        var pullCapability = (0, _util.createPromiseCapability)();
                        _this2.streamControllers[streamId].pullCall = pullCapability;
                        _this2.postMessage({
                            sourceName: sourceName,
                            targetName: targetName,
                            stream: "pull",
                            streamId: streamId,
                            desiredSize: controller.desiredSize
                        });
                        return pullCapability.promise;
                    },
                    cancel: function cancel(reason) {
                        var cancelCapability = (0, _util.createPromiseCapability)();
                        _this2.streamControllers[streamId].cancelCall = cancelCapability;
                        _this2.streamControllers[streamId].isClosed = true;
                        _this2.postMessage({
                            sourceName: sourceName,
                            targetName: targetName,
                            stream: "cancel",
                            reason: reason,
                            streamId: streamId
                        });
                        return cancelCapability.promise;
                    }
                }, queueingStrategy);
            },
            _createStreamSink: function _createStreamSink(data) {
                var _this3 = this;
                var self = this;
                var action = this.actionHandler[data.action];
                var streamId = data.streamId;
                var desiredSize = data.desiredSize;
                var sourceName = this.sourceName;
                var targetName = data.sourceName;
                var capability = (0, _util.createPromiseCapability)();
                var sendStreamRequest = function sendStreamRequest(_ref) {
                    var stream = _ref.stream, chunk = _ref.chunk, transfers = _ref.transfers, success = _ref.success, reason = _ref.reason;
                    _this3.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: stream,
                        streamId: streamId,
                        chunk: chunk,
                        success: success,
                        reason: reason
                    }, transfers);
                };
                var streamSink = {
                    enqueue: function enqueue(chunk) {
                        var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                        var transfers = arguments.length > 2 ? arguments[2] : undefined;
                        if (this.isCancelled) {
                            return;
                        }
                        var lastDesiredSize = this.desiredSize;
                        this.desiredSize -= size;
                        if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                            this.sinkCapability = (0, _util.createPromiseCapability)();
                            this.ready = this.sinkCapability.promise;
                        }
                        sendStreamRequest({
                            stream: "enqueue",
                            chunk: chunk,
                            transfers: transfers
                        });
                    },
                    close: function close() {
                        if (this.isCancelled) {
                            return;
                        }
                        this.isCancelled = true;
                        sendStreamRequest({
                            stream: "close"
                        });
                        delete self.streamSinks[streamId];
                    },
                    error: function error(reason) {
                        if (this.isCancelled) {
                            return;
                        }
                        this.isCancelled = true;
                        sendStreamRequest({
                            stream: "error",
                            reason: reason
                        });
                    },
                    sinkCapability: capability,
                    onPull: null,
                    onCancel: null,
                    isCancelled: false,
                    desiredSize: desiredSize,
                    ready: null
                };
                streamSink.sinkCapability.resolve();
                streamSink.ready = streamSink.sinkCapability.promise;
                this.streamSinks[streamId] = streamSink;
                resolveCall(action[0], [ data.data, streamSink ], action[1]).then(function() {
                    sendStreamRequest({
                        stream: "start_complete",
                        success: true
                    });
                }, function(reason) {
                    sendStreamRequest({
                        stream: "start_complete",
                        success: false,
                        reason: reason
                    });
                });
            },
            _processStreamMessage: function _processStreamMessage(data) {
                var _this4 = this;
                var sourceName = this.sourceName;
                var targetName = data.sourceName;
                var streamId = data.streamId;
                var sendStreamResponse = function sendStreamResponse(_ref2) {
                    var stream = _ref2.stream, success = _ref2.success, reason = _ref2.reason;
                    _this4.comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: stream,
                        success: success,
                        streamId: streamId,
                        reason: reason
                    });
                };
                var deleteStreamController = function deleteStreamController() {
                    Promise.all([ _this4.streamControllers[data.streamId].startCall, _this4.streamControllers[data.streamId].pullCall, _this4.streamControllers[data.streamId].cancelCall ].map(function(capability) {
                        return capability && finalize(capability.promise);
                    })).then(function() {
                        delete _this4.streamControllers[data.streamId];
                    });
                };
                switch (data.stream) {
                  case "start_complete":
                    resolveOrReject(this.streamControllers[data.streamId].startCall, data.success, wrapReason(data.reason));
                    break;

                  case "pull_complete":
                    resolveOrReject(this.streamControllers[data.streamId].pullCall, data.success, wrapReason(data.reason));
                    break;

                  case "pull":
                    if (!this.streamSinks[data.streamId]) {
                        sendStreamResponse({
                            stream: "pull_complete",
                            success: true
                        });
                        break;
                    }
                    if (this.streamSinks[data.streamId].desiredSize <= 0 && data.desiredSize > 0) {
                        this.streamSinks[data.streamId].sinkCapability.resolve();
                    }
                    this.streamSinks[data.streamId].desiredSize = data.desiredSize;
                    resolveCall(this.streamSinks[data.streamId].onPull).then(function() {
                        sendStreamResponse({
                            stream: "pull_complete",
                            success: true
                        });
                    }, function(reason) {
                        sendStreamResponse({
                            stream: "pull_complete",
                            success: false,
                            reason: reason
                        });
                    });
                    break;

                  case "enqueue":
                    (0, _util.assert)(this.streamControllers[data.streamId], "enqueue should have stream controller");
                    if (!this.streamControllers[data.streamId].isClosed) {
                        this.streamControllers[data.streamId].controller.enqueue(data.chunk);
                    }
                    break;

                  case "close":
                    (0, _util.assert)(this.streamControllers[data.streamId], "close should have stream controller");
                    if (this.streamControllers[data.streamId].isClosed) {
                        break;
                    }
                    this.streamControllers[data.streamId].isClosed = true;
                    this.streamControllers[data.streamId].controller.close();
                    deleteStreamController();
                    break;

                  case "error":
                    (0, _util.assert)(this.streamControllers[data.streamId], "error should have stream controller");
                    this.streamControllers[data.streamId].controller.error(wrapReason(data.reason));
                    deleteStreamController();
                    break;

                  case "cancel_complete":
                    resolveOrReject(this.streamControllers[data.streamId].cancelCall, data.success, wrapReason(data.reason));
                    deleteStreamController();
                    break;

                  case "cancel":
                    if (!this.streamSinks[data.streamId]) {
                        break;
                    }
                    resolveCall(this.streamSinks[data.streamId].onCancel, [ wrapReason(data.reason) ]).then(function() {
                        sendStreamResponse({
                            stream: "cancel_complete",
                            success: true
                        });
                    }, function(reason) {
                        sendStreamResponse({
                            stream: "cancel_complete",
                            success: false,
                            reason: reason
                        });
                    });
                    this.streamSinks[data.streamId].sinkCapability.reject(wrapReason(data.reason));
                    this.streamSinks[data.streamId].isCancelled = true;
                    delete this.streamSinks[data.streamId];
                    break;

                  default:
                    throw new Error("Unexpected stream case");
                }
            },
            postMessage: function postMessage(message, transfers) {
                if (transfers && this.postMessageTransfers) {
                    this.comObj.postMessage(message, transfers);
                } else {
                    this.comObj.postMessage(message);
                }
            },
            destroy: function destroy() {
                this.comObj.removeEventListener("message", this._onComObjOnMessage);
            }
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Metadata = void 0;
        var _util = __w_pdfjs_require__(1);
        var _xml_parser = __w_pdfjs_require__(159);
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var Metadata = function() {
            function Metadata(data) {
                _classCallCheck(this, Metadata);
                (0, _util.assert)(typeof data === "string", "Metadata: input is not a string");
                data = this._repair(data);
                var parser = new _xml_parser.SimpleXMLParser();
                var xmlDocument = parser.parseFromString(data);
                this._metadata = Object.create(null);
                if (xmlDocument) {
                    this._parse(xmlDocument);
                }
            }
            _createClass(Metadata, [ {
                key: "_repair",
                value: function _repair(data) {
                    return data.replace(/^([^<]+)/, "").replace(/>\\376\\377([^<]+)/g, function(all, codes) {
                        var bytes = codes.replace(/\\([0-3])([0-7])([0-7])/g, function(code, d1, d2, d3) {
                            return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);
                        }).replace(/&(amp|apos|gt|lt|quot);/g, function(str, name) {
                            switch (name) {
                              case "amp":
                                return "&";

                              case "apos":
                                return "'";

                              case "gt":
                                return ">";

                              case "lt":
                                return "<";

                              case "quot":
                                return '"';
                            }
                            throw new Error("_repair: ".concat(name, " isn't defined."));
                        });
                        var chars = "";
                        for (var i = 0, ii = bytes.length; i < ii; i += 2) {
                            var code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);
                            if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {
                                chars += String.fromCharCode(code);
                            } else {
                                chars += "&#x" + (65536 + code).toString(16).substring(1) + ";";
                            }
                        }
                        return ">" + chars;
                    });
                }
            }, {
                key: "_parse",
                value: function _parse(xmlDocument) {
                    var rdf = xmlDocument.documentElement;
                    if (rdf.nodeName.toLowerCase() !== "rdf:rdf") {
                        rdf = rdf.firstChild;
                        while (rdf && rdf.nodeName.toLowerCase() !== "rdf:rdf") {
                            rdf = rdf.nextSibling;
                        }
                    }
                    var nodeName = rdf ? rdf.nodeName.toLowerCase() : null;
                    if (!rdf || nodeName !== "rdf:rdf" || !rdf.hasChildNodes()) {
                        return;
                    }
                    var children = rdf.childNodes;
                    for (var i = 0, ii = children.length; i < ii; i++) {
                        var desc = children[i];
                        if (desc.nodeName.toLowerCase() !== "rdf:description") {
                            continue;
                        }
                        for (var j = 0, jj = desc.childNodes.length; j < jj; j++) {
                            if (desc.childNodes[j].nodeName.toLowerCase() !== "#text") {
                                var entry = desc.childNodes[j];
                                var name = entry.nodeName.toLowerCase();
                                this._metadata[name] = entry.textContent.trim();
                            }
                        }
                    }
                }
            }, {
                key: "get",
                value: function get(name) {
                    var data = this._metadata[name];
                    return typeof data !== "undefined" ? data : null;
                }
            }, {
                key: "getAll",
                value: function getAll() {
                    return this._metadata;
                }
            }, {
                key: "has",
                value: function has(name) {
                    return typeof this._metadata[name] !== "undefined";
                }
            } ]);
            return Metadata;
        }();
        exports.Metadata = Metadata;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SimpleXMLParser = void 0;
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
        }
        function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
        function _iterableToArrayLimit(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
        function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }
        function _possibleConstructorReturn(self, call) {
            if (call && (_typeof(call) === "object" || typeof call === "function")) {
                return call;
            }
            return _assertThisInitialized(self);
        }
        function _assertThisInitialized(self) {
            if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self;
        }
        function _get(target, property, receiver) {
            if (typeof Reflect !== "undefined" && Reflect.get) {
                _get = Reflect.get;
            } else {
                _get = function _get(target, property, receiver) {
                    var base = _superPropBase(target, property);
                    if (!base) return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);
                    if (desc.get) {
                        return desc.get.call(receiver);
                    }
                    return desc.value;
                };
            }
            return _get(target, property, receiver || target);
        }
        function _superPropBase(object, property) {
            while (!Object.prototype.hasOwnProperty.call(object, property)) {
                object = _getPrototypeOf(object);
                if (object === null) break;
            }
            return object;
        }
        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var XMLParserErrorCode = {
            NoError: 0,
            EndOfDocument: -1,
            UnterminatedCdat: -2,
            UnterminatedXmlDeclaration: -3,
            UnterminatedDoctypeDeclaration: -4,
            UnterminatedComment: -5,
            MalformedElement: -6,
            OutOfMemory: -7,
            UnterminatedAttributeValue: -8,
            UnterminatedElement: -9,
            ElementNeverBegun: -10
        };
        function isWhitespace(s, index) {
            var ch = s[index];
            return ch === " " || ch === "\n" || ch === "\r" || ch === "\t";
        }
        function isWhitespaceString(s) {
            for (var i = 0, ii = s.length; i < ii; i++) {
                if (!isWhitespace(s, i)) {
                    return false;
                }
            }
            return true;
        }
        var XMLParserBase = function() {
            function XMLParserBase() {
                _classCallCheck(this, XMLParserBase);
            }
            _createClass(XMLParserBase, [ {
                key: "_resolveEntities",
                value: function _resolveEntities(s) {
                    var _this = this;
                    return s.replace(/&([^;]+);/g, function(all, entity) {
                        if (entity.substring(0, 2) === "#x") {
                            return String.fromCharCode(parseInt(entity.substring(2), 16));
                        } else if (entity.substring(0, 1) === "#") {
                            return String.fromCharCode(parseInt(entity.substring(1), 10));
                        }
                        switch (entity) {
                          case "lt":
                            return "<";

                          case "gt":
                            return ">";

                          case "amp":
                            return "&";

                          case "quot":
                            return '"';
                        }
                        return _this.onResolveEntity(entity);
                    });
                }
            }, {
                key: "_parseContent",
                value: function _parseContent(s, start) {
                    var pos = start, name, attributes = [];
                    function skipWs() {
                        while (pos < s.length && isWhitespace(s, pos)) {
                            ++pos;
                        }
                    }
                    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {
                        ++pos;
                    }
                    name = s.substring(start, pos);
                    skipWs();
                    while (pos < s.length && s[pos] !== ">" && s[pos] !== "/" && s[pos] !== "?") {
                        skipWs();
                        var attrName = "", attrValue = "";
                        while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== "=") {
                            attrName += s[pos];
                            ++pos;
                        }
                        skipWs();
                        if (s[pos] !== "=") {
                            return null;
                        }
                        ++pos;
                        skipWs();
                        var attrEndChar = s[pos];
                        if (attrEndChar !== '"' && attrEndChar !== "'") {
                            return null;
                        }
                        var attrEndIndex = s.indexOf(attrEndChar, ++pos);
                        if (attrEndIndex < 0) {
                            return null;
                        }
                        attrValue = s.substring(pos, attrEndIndex);
                        attributes.push({
                            name: attrName,
                            value: this._resolveEntities(attrValue)
                        });
                        pos = attrEndIndex + 1;
                        skipWs();
                    }
                    return {
                        name: name,
                        attributes: attributes,
                        parsed: pos - start
                    };
                }
            }, {
                key: "_parseProcessingInstruction",
                value: function _parseProcessingInstruction(s, start) {
                    var pos = start, name, value;
                    function skipWs() {
                        while (pos < s.length && isWhitespace(s, pos)) {
                            ++pos;
                        }
                    }
                    while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {
                        ++pos;
                    }
                    name = s.substring(start, pos);
                    skipWs();
                    var attrStart = pos;
                    while (pos < s.length && (s[pos] !== "?" || s[pos + 1] !== ">")) {
                        ++pos;
                    }
                    value = s.substring(attrStart, pos);
                    return {
                        name: name,
                        value: value,
                        parsed: pos - start
                    };
                }
            }, {
                key: "parseXml",
                value: function parseXml(s) {
                    var i = 0;
                    while (i < s.length) {
                        var ch = s[i];
                        var j = i;
                        if (ch === "<") {
                            ++j;
                            var ch2 = s[j];
                            var q = void 0;
                            switch (ch2) {
                              case "/":
                                ++j;
                                q = s.indexOf(">", j);
                                if (q < 0) {
                                    this.onError(XMLParserErrorCode.UnterminatedElement);
                                    return;
                                }
                                this.onEndElement(s.substring(j, q));
                                j = q + 1;
                                break;

                              case "?":
                                ++j;
                                var pi = this._parseProcessingInstruction(s, j);
                                if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== "?>") {
                                    this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);
                                    return;
                                }
                                this.onPi(pi.name, pi.value);
                                j += pi.parsed + 2;
                                break;

                              case "!":
                                if (s.substring(j + 1, j + 3) === "--") {
                                    q = s.indexOf("--\x3e", j + 3);
                                    if (q < 0) {
                                        this.onError(XMLParserErrorCode.UnterminatedComment);
                                        return;
                                    }
                                    this.onComment(s.substring(j + 3, q));
                                    j = q + 3;
                                } else if (s.substring(j + 1, j + 8) === "[CDATA[") {
                                    q = s.indexOf("]]>", j + 8);
                                    if (q < 0) {
                                        this.onError(XMLParserErrorCode.UnterminatedCdat);
                                        return;
                                    }
                                    this.onCdata(s.substring(j + 8, q));
                                    j = q + 3;
                                } else if (s.substring(j + 1, j + 8) === "DOCTYPE") {
                                    var q2 = s.indexOf("[", j + 8);
                                    var complexDoctype = false;
                                    q = s.indexOf(">", j + 8);
                                    if (q < 0) {
                                        this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);
                                        return;
                                    }
                                    if (q2 > 0 && q > q2) {
                                        q = s.indexOf("]>", j + 8);
                                        if (q < 0) {
                                            this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);
                                            return;
                                        }
                                        complexDoctype = true;
                                    }
                                    var doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));
                                    this.onDoctype(doctypeContent);
                                    j = q + (complexDoctype ? 2 : 1);
                                } else {
                                    this.onError(XMLParserErrorCode.MalformedElement);
                                    return;
                                }
                                break;

                              default:
                                var content = this._parseContent(s, j);
                                if (content === null) {
                                    this.onError(XMLParserErrorCode.MalformedElement);
                                    return;
                                }
                                var isClosed = false;
                                if (s.substring(j + content.parsed, j + content.parsed + 2) === "/>") {
                                    isClosed = true;
                                } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== ">") {
                                    this.onError(XMLParserErrorCode.UnterminatedElement);
                                    return;
                                }
                                this.onBeginElement(content.name, content.attributes, isClosed);
                                j += content.parsed + (isClosed ? 2 : 1);
                                break;
                            }
                        } else {
                            while (j < s.length && s[j] !== "<") {
                                j++;
                            }
                            var text = s.substring(i, j);
                            this.onText(this._resolveEntities(text));
                        }
                        i = j;
                    }
                }
            }, {
                key: "onResolveEntity",
                value: function onResolveEntity(name) {
                    return "&".concat(name, ";");
                }
            }, {
                key: "onPi",
                value: function onPi(name, value) {}
            }, {
                key: "onComment",
                value: function onComment(text) {}
            }, {
                key: "onCdata",
                value: function onCdata(text) {}
            }, {
                key: "onDoctype",
                value: function onDoctype(doctypeContent) {}
            }, {
                key: "onText",
                value: function onText(text) {}
            }, {
                key: "onBeginElement",
                value: function onBeginElement(name, attributes, isEmpty) {}
            }, {
                key: "onEndElement",
                value: function onEndElement(name) {}
            }, {
                key: "onError",
                value: function onError(code) {}
            } ]);
            return XMLParserBase;
        }();
        var SimpleDOMNode = function() {
            function SimpleDOMNode(nodeName, nodeValue) {
                _classCallCheck(this, SimpleDOMNode);
                this.nodeName = nodeName;
                this.nodeValue = nodeValue;
                Object.defineProperty(this, "parentNode", {
                    value: null,
                    writable: true
                });
            }
            _createClass(SimpleDOMNode, [ {
                key: "hasChildNodes",
                value: function hasChildNodes() {
                    return this.childNodes && this.childNodes.length > 0;
                }
            }, {
                key: "firstChild",
                get: function get() {
                    return this.childNodes && this.childNodes[0];
                }
            }, {
                key: "nextSibling",
                get: function get() {
                    var childNodes = this.parentNode.childNodes;
                    if (!childNodes) {
                        return undefined;
                    }
                    var index = childNodes.indexOf(this);
                    if (index === -1) {
                        return undefined;
                    }
                    return childNodes[index + 1];
                }
            }, {
                key: "textContent",
                get: function get() {
                    if (!this.childNodes) {
                        return this.nodeValue || "";
                    }
                    return this.childNodes.map(function(child) {
                        return child.textContent;
                    }).join("");
                }
            } ]);
            return SimpleDOMNode;
        }();
        var SimpleXMLParser = function(_XMLParserBase) {
            _inherits(SimpleXMLParser, _XMLParserBase);
            function SimpleXMLParser() {
                var _this2;
                _classCallCheck(this, SimpleXMLParser);
                _this2 = _possibleConstructorReturn(this, _getPrototypeOf(SimpleXMLParser).call(this));
                _this2._currentFragment = null;
                _this2._stack = null;
                _this2._errorCode = XMLParserErrorCode.NoError;
                return _this2;
            }
            _createClass(SimpleXMLParser, [ {
                key: "parseFromString",
                value: function parseFromString(data) {
                    this._currentFragment = [];
                    this._stack = [];
                    this._errorCode = XMLParserErrorCode.NoError;
                    this.parseXml(data);
                    if (this._errorCode !== XMLParserErrorCode.NoError) {
                        return undefined;
                    }
                    var _this$_currentFragmen = _slicedToArray(this._currentFragment, 1), documentElement = _this$_currentFragmen[0];
                    if (!documentElement) {
                        return undefined;
                    }
                    return {
                        documentElement: documentElement
                    };
                }
            }, {
                key: "onResolveEntity",
                value: function onResolveEntity(name) {
                    switch (name) {
                      case "apos":
                        return "'";
                    }
                    return _get(_getPrototypeOf(SimpleXMLParser.prototype), "onResolveEntity", this).call(this, name);
                }
            }, {
                key: "onText",
                value: function onText(text) {
                    if (isWhitespaceString(text)) {
                        return;
                    }
                    var node = new SimpleDOMNode("#text", text);
                    this._currentFragment.push(node);
                }
            }, {
                key: "onCdata",
                value: function onCdata(text) {
                    var node = new SimpleDOMNode("#text", text);
                    this._currentFragment.push(node);
                }
            }, {
                key: "onBeginElement",
                value: function onBeginElement(name, attributes, isEmpty) {
                    var node = new SimpleDOMNode(name);
                    node.childNodes = [];
                    this._currentFragment.push(node);
                    if (isEmpty) {
                        return;
                    }
                    this._stack.push(this._currentFragment);
                    this._currentFragment = node.childNodes;
                }
            }, {
                key: "onEndElement",
                value: function onEndElement(name) {
                    this._currentFragment = this._stack.pop() || [];
                    var lastElement = this._currentFragment[this._currentFragment.length - 1];
                    if (!lastElement) {
                        return;
                    }
                    for (var i = 0, ii = lastElement.childNodes.length; i < ii; i++) {
                        lastElement.childNodes[i].parentNode = lastElement;
                    }
                }
            }, {
                key: "onError",
                value: function onError(code) {
                    this._errorCode = code;
                }
            } ]);
            return SimpleXMLParser;
        }(XMLParserBase);
        exports.SimpleXMLParser = SimpleXMLParser;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.PDFDataTransportStream = void 0;
        var _regenerator = _interopRequireDefault(__w_pdfjs_require__(148));
        var _util = __w_pdfjs_require__(1);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        var PDFDataTransportStream = function PDFDataTransportStreamClosure() {
            function PDFDataTransportStream(params, pdfDataRangeTransport) {
                var _this = this;
                (0, _util.assert)(pdfDataRangeTransport);
                this._queuedChunks = [];
                this._progressiveDone = params.progressiveDone || false;
                var initialData = params.initialData;
                if (initialData && initialData.length > 0) {
                    var buffer = new Uint8Array(initialData).buffer;
                    this._queuedChunks.push(buffer);
                }
                this._pdfDataRangeTransport = pdfDataRangeTransport;
                this._isStreamingSupported = !params.disableStream;
                this._isRangeSupported = !params.disableRange;
                this._contentLength = params.length;
                this._fullRequestReader = null;
                this._rangeReaders = [];
                this._pdfDataRangeTransport.addRangeListener(function(begin, chunk) {
                    _this._onReceiveData({
                        begin: begin,
                        chunk: chunk
                    });
                });
                this._pdfDataRangeTransport.addProgressListener(function(loaded, total) {
                    _this._onProgress({
                        loaded: loaded,
                        total: total
                    });
                });
                this._pdfDataRangeTransport.addProgressiveReadListener(function(chunk) {
                    _this._onReceiveData({
                        chunk: chunk
                    });
                });
                this._pdfDataRangeTransport.addProgressiveDoneListener(function() {
                    _this._onProgressiveDone();
                });
                this._pdfDataRangeTransport.transportReady();
            }
            PDFDataTransportStream.prototype = {
                _onReceiveData: function PDFDataTransportStream_onReceiveData(args) {
                    var buffer = new Uint8Array(args.chunk).buffer;
                    if (args.begin === undefined) {
                        if (this._fullRequestReader) {
                            this._fullRequestReader._enqueue(buffer);
                        } else {
                            this._queuedChunks.push(buffer);
                        }
                    } else {
                        var found = this._rangeReaders.some(function(rangeReader) {
                            if (rangeReader._begin !== args.begin) {
                                return false;
                            }
                            rangeReader._enqueue(buffer);
                            return true;
                        });
                        (0, _util.assert)(found);
                    }
                },
                get _progressiveDataLength() {
                    return this._fullRequestReader ? this._fullRequestReader._loaded : 0;
                },
                _onProgress: function PDFDataTransportStream_onDataProgress(evt) {
                    if (evt.total === undefined) {
                        var firstReader = this._rangeReaders[0];
                        if (firstReader && firstReader.onProgress) {
                            firstReader.onProgress({
                                loaded: evt.loaded
                            });
                        }
                    } else {
                        var fullReader = this._fullRequestReader;
                        if (fullReader && fullReader.onProgress) {
                            fullReader.onProgress({
                                loaded: evt.loaded,
                                total: evt.total
                            });
                        }
                    }
                },
                _onProgressiveDone: function _onProgressiveDone() {
                    if (this._fullRequestReader) {
                        this._fullRequestReader.progressiveDone();
                    }
                    this._progressiveDone = true;
                },
                _removeRangeReader: function PDFDataTransportStream_removeRangeReader(reader) {
                    var i = this._rangeReaders.indexOf(reader);
                    if (i >= 0) {
                        this._rangeReaders.splice(i, 1);
                    }
                },
                getFullReader: function PDFDataTransportStream_getFullReader() {
                    (0, _util.assert)(!this._fullRequestReader);
                    var queuedChunks = this._queuedChunks;
                    this._queuedChunks = null;
                    return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone);
                },
                getRangeReader: function PDFDataTransportStream_getRangeReader(begin, end) {
                    if (end <= this._progressiveDataLength) {
                        return null;
                    }
                    var reader = new PDFDataTransportStreamRangeReader(this, begin, end);
                    this._pdfDataRangeTransport.requestDataRange(begin, end);
                    this._rangeReaders.push(reader);
                    return reader;
                },
                cancelAllRequests: function PDFDataTransportStream_cancelAllRequests(reason) {
                    if (this._fullRequestReader) {
                        this._fullRequestReader.cancel(reason);
                    }
                    var readers = this._rangeReaders.slice(0);
                    readers.forEach(function(rangeReader) {
                        rangeReader.cancel(reason);
                    });
                    this._pdfDataRangeTransport.abort();
                }
            };
            function PDFDataTransportStreamReader(stream, queuedChunks) {
                var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                this._stream = stream;
                this._done = progressiveDone || false;
                this._filename = null;
                this._queuedChunks = queuedChunks || [];
                this._loaded = 0;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = this._queuedChunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var chunk = _step.value;
                        this._loaded += chunk.byteLength;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                            _iterator["return"]();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this._requests = [];
                this._headersReady = Promise.resolve();
                stream._fullRequestReader = this;
                this.onProgress = null;
            }
            PDFDataTransportStreamReader.prototype = {
                _enqueue: function PDFDataTransportStreamReader_enqueue(chunk) {
                    if (this._done) {
                        return;
                    }
                    if (this._requests.length > 0) {
                        var requestCapability = this._requests.shift();
                        requestCapability.resolve({
                            value: chunk,
                            done: false
                        });
                    } else {
                        this._queuedChunks.push(chunk);
                    }
                    this._loaded += chunk.byteLength;
                },
                get headersReady() {
                    return this._headersReady;
                },
                get filename() {
                    return this._filename;
                },
                get isRangeSupported() {
                    return this._stream._isRangeSupported;
                },
                get isStreamingSupported() {
                    return this._stream._isStreamingSupported;
                },
                get contentLength() {
                    return this._stream._contentLength;
                },
                read: function() {
                    var _read = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                        var chunk, requestCapability;
                        return _regenerator["default"].wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    if (!(this._queuedChunks.length > 0)) {
                                        _context.next = 3;
                                        break;
                                    }
                                    chunk = this._queuedChunks.shift();
                                    return _context.abrupt("return", {
                                        value: chunk,
                                        done: false
                                    });

                                  case 3:
                                    if (!this._done) {
                                        _context.next = 5;
                                        break;
                                    }
                                    return _context.abrupt("return", {
                                        value: undefined,
                                        done: true
                                    });

                                  case 5:
                                    requestCapability = (0, _util.createPromiseCapability)();
                                    this._requests.push(requestCapability);
                                    return _context.abrupt("return", requestCapability.promise);

                                  case 8:
                                  case "end":
                                    return _context.stop();
                                }
                            }
                        }, _callee, this);
                    }));
                    function read() {
                        return _read.apply(this, arguments);
                    }
                    return read;
                }(),
                cancel: function PDFDataTransportStreamReader_cancel(reason) {
                    this._done = true;
                    this._requests.forEach(function(requestCapability) {
                        requestCapability.resolve({
                            value: undefined,
                            done: true
                        });
                    });
                    this._requests = [];
                },
                progressiveDone: function progressiveDone() {
                    if (this._done) {
                        return;
                    }
                    this._done = true;
                }
            };
            function PDFDataTransportStreamRangeReader(stream, begin, end) {
                this._stream = stream;
                this._begin = begin;
                this._end = end;
                this._queuedChunk = null;
                this._requests = [];
                this._done = false;
                this.onProgress = null;
            }
            PDFDataTransportStreamRangeReader.prototype = {
                _enqueue: function PDFDataTransportStreamRangeReader_enqueue(chunk) {
                    if (this._done) {
                        return;
                    }
                    if (this._requests.length === 0) {
                        this._queuedChunk = chunk;
                    } else {
                        var requestsCapability = this._requests.shift();
                        requestsCapability.resolve({
                            value: chunk,
                            done: false
                        });
                        this._requests.forEach(function(requestCapability) {
                            requestCapability.resolve({
                                value: undefined,
                                done: true
                            });
                        });
                        this._requests = [];
                    }
                    this._done = true;
                    this._stream._removeRangeReader(this);
                },
                get isStreamingSupported() {
                    return false;
                },
                read: function() {
                    var _read2 = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                        var chunk, requestCapability;
                        return _regenerator["default"].wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    if (!this._queuedChunk) {
                                        _context2.next = 4;
                                        break;
                                    }
                                    chunk = this._queuedChunk;
                                    this._queuedChunk = null;
                                    return _context2.abrupt("return", {
                                        value: chunk,
                                        done: false
                                    });

                                  case 4:
                                    if (!this._done) {
                                        _context2.next = 6;
                                        break;
                                    }
                                    return _context2.abrupt("return", {
                                        value: undefined,
                                        done: true
                                    });

                                  case 6:
                                    requestCapability = (0, _util.createPromiseCapability)();
                                    this._requests.push(requestCapability);
                                    return _context2.abrupt("return", requestCapability.promise);

                                  case 9:
                                  case "end":
                                    return _context2.stop();
                                }
                            }
                        }, _callee2, this);
                    }));
                    function read() {
                        return _read2.apply(this, arguments);
                    }
                    return read;
                }(),
                cancel: function PDFDataTransportStreamRangeReader_cancel(reason) {
                    this._done = true;
                    this._requests.forEach(function(requestCapability) {
                        requestCapability.resolve({
                            value: undefined,
                            done: true
                        });
                    });
                    this._requests = [];
                    this._stream._removeRangeReader(this);
                }
            };
            return PDFDataTransportStream;
        }();
        exports.PDFDataTransportStream = PDFDataTransportStream;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WebGLContext = void 0;
        var _util = __w_pdfjs_require__(1);
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var WebGLContext = function() {
            function WebGLContext(_ref) {
                var _ref$enable = _ref.enable, enable = _ref$enable === void 0 ? false : _ref$enable;
                _classCallCheck(this, WebGLContext);
                this._enabled = enable === true;
            }
            _createClass(WebGLContext, [ {
                key: "composeSMask",
                value: function composeSMask(_ref2) {
                    var layer = _ref2.layer, mask = _ref2.mask, properties = _ref2.properties;
                    return WebGLUtils.composeSMask(layer, mask, properties);
                }
            }, {
                key: "drawFigures",
                value: function drawFigures(_ref3) {
                    var width = _ref3.width, height = _ref3.height, backgroundColor = _ref3.backgroundColor, figures = _ref3.figures, context = _ref3.context;
                    return WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);
                }
            }, {
                key: "clear",
                value: function clear() {
                    WebGLUtils.cleanup();
                }
            }, {
                key: "isEnabled",
                get: function get() {
                    var enabled = this._enabled;
                    if (enabled) {
                        enabled = WebGLUtils.tryInitGL();
                    }
                    return (0, _util.shadow)(this, "isEnabled", enabled);
                }
            } ]);
            return WebGLContext;
        }();
        exports.WebGLContext = WebGLContext;
        var WebGLUtils = function WebGLUtilsClosure() {
            function loadShader(gl, code, shaderType) {
                var shader = gl.createShader(shaderType);
                gl.shaderSource(shader, code);
                gl.compileShader(shader);
                var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
                if (!compiled) {
                    var errorMsg = gl.getShaderInfoLog(shader);
                    throw new Error("Error during shader compilation: " + errorMsg);
                }
                return shader;
            }
            function createVertexShader(gl, code) {
                return loadShader(gl, code, gl.VERTEX_SHADER);
            }
            function createFragmentShader(gl, code) {
                return loadShader(gl, code, gl.FRAGMENT_SHADER);
            }
            function createProgram(gl, shaders) {
                var program = gl.createProgram();
                for (var i = 0, ii = shaders.length; i < ii; ++i) {
                    gl.attachShader(program, shaders[i]);
                }
                gl.linkProgram(program);
                var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
                if (!linked) {
                    var errorMsg = gl.getProgramInfoLog(program);
                    throw new Error("Error during program linking: " + errorMsg);
                }
                return program;
            }
            function createTexture(gl, image, textureId) {
                gl.activeTexture(textureId);
                var texture = gl.createTexture();
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
                return texture;
            }
            var currentGL, currentCanvas;
            function generateGL() {
                if (currentGL) {
                    return;
                }
                currentCanvas = document.createElement("canvas");
                currentGL = currentCanvas.getContext("webgl", {
                    premultipliedalpha: false
                });
            }
            var smaskVertexShaderCode = "  attribute vec2 a_position;                                      attribute vec2 a_texCoord;                                                                                                      uniform vec2 u_resolution;                                                                                                      varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_texCoord = a_texCoord;                                      }                                                             ";
            var smaskFragmentShaderCode = "  precision mediump float;                                                                                                        uniform vec4 u_backdrop;                                        uniform int u_subtype;                                          uniform sampler2D u_image;                                      uniform sampler2D u_mask;                                                                                                       varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec4 imageColor = texture2D(u_image, v_texCoord);               vec4 maskColor = texture2D(u_mask, v_texCoord);                 if (u_backdrop.a > 0.0) {                                         maskColor.rgb = maskColor.rgb * maskColor.a +                                   u_backdrop.rgb * (1.0 - maskColor.a);         }                                                               float lum;                                                      if (u_subtype == 0) {                                             lum = maskColor.a;                                            } else {                                                          lum = maskColor.r * 0.3 + maskColor.g * 0.59 +                        maskColor.b * 0.11;                                     }                                                               imageColor.a *= lum;                                            imageColor.rgb *= imageColor.a;                                 gl_FragColor = imageColor;                                    }                                                             ";
            var smaskCache = null;
            function initSmaskGL() {
                var canvas, gl;
                generateGL();
                canvas = currentCanvas;
                currentCanvas = null;
                gl = currentGL;
                currentGL = null;
                var vertexShader = createVertexShader(gl, smaskVertexShaderCode);
                var fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);
                var program = createProgram(gl, [ vertexShader, fragmentShader ]);
                gl.useProgram(program);
                var cache = {};
                cache.gl = gl;
                cache.canvas = canvas;
                cache.resolutionLocation = gl.getUniformLocation(program, "u_resolution");
                cache.positionLocation = gl.getAttribLocation(program, "a_position");
                cache.backdropLocation = gl.getUniformLocation(program, "u_backdrop");
                cache.subtypeLocation = gl.getUniformLocation(program, "u_subtype");
                var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");
                var texLayerLocation = gl.getUniformLocation(program, "u_image");
                var texMaskLocation = gl.getUniformLocation(program, "u_mask");
                var texCoordBuffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1 ]), gl.STATIC_DRAW);
                gl.enableVertexAttribArray(texCoordLocation);
                gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
                gl.uniform1i(texLayerLocation, 0);
                gl.uniform1i(texMaskLocation, 1);
                smaskCache = cache;
            }
            function composeSMask(layer, mask, properties) {
                var width = layer.width, height = layer.height;
                if (!smaskCache) {
                    initSmaskGL();
                }
                var cache = smaskCache, canvas = cache.canvas, gl = cache.gl;
                canvas.width = width;
                canvas.height = height;
                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
                gl.uniform2f(cache.resolutionLocation, width, height);
                if (properties.backdrop) {
                    gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);
                } else {
                    gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);
                }
                gl.uniform1i(cache.subtypeLocation, properties.subtype === "Luminosity" ? 1 : 0);
                var texture = createTexture(gl, layer, gl.TEXTURE0);
                var maskTexture = createTexture(gl, mask, gl.TEXTURE1);
                var buffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0, 0, width, 0, 0, height, 0, height, width, 0, width, height ]), gl.STATIC_DRAW);
                gl.enableVertexAttribArray(cache.positionLocation);
                gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);
                gl.clearColor(0, 0, 0, 0);
                gl.enable(gl.BLEND);
                gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                gl.clear(gl.COLOR_BUFFER_BIT);
                gl.drawArrays(gl.TRIANGLES, 0, 6);
                gl.flush();
                gl.deleteTexture(texture);
                gl.deleteTexture(maskTexture);
                gl.deleteBuffer(buffer);
                return canvas;
            }
            var figuresVertexShaderCode = "  attribute vec2 a_position;                                      attribute vec3 a_color;                                                                                                         uniform vec2 u_resolution;                                      uniform vec2 u_scale;                                           uniform vec2 u_offset;                                                                                                          varying vec4 v_color;                                                                                                           void main() {                                                     vec2 position = (a_position + u_offset) * u_scale;              vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_color = vec4(a_color / 255.0, 1.0);                         }                                                             ";
            var figuresFragmentShaderCode = "  precision mediump float;                                                                                                        varying vec4 v_color;                                                                                                           void main() {                                                     gl_FragColor = v_color;                                       }                                                             ";
            var figuresCache = null;
            function initFiguresGL() {
                var canvas, gl;
                generateGL();
                canvas = currentCanvas;
                currentCanvas = null;
                gl = currentGL;
                currentGL = null;
                var vertexShader = createVertexShader(gl, figuresVertexShaderCode);
                var fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);
                var program = createProgram(gl, [ vertexShader, fragmentShader ]);
                gl.useProgram(program);
                var cache = {};
                cache.gl = gl;
                cache.canvas = canvas;
                cache.resolutionLocation = gl.getUniformLocation(program, "u_resolution");
                cache.scaleLocation = gl.getUniformLocation(program, "u_scale");
                cache.offsetLocation = gl.getUniformLocation(program, "u_offset");
                cache.positionLocation = gl.getAttribLocation(program, "a_position");
                cache.colorLocation = gl.getAttribLocation(program, "a_color");
                figuresCache = cache;
            }
            function drawFigures(width, height, backgroundColor, figures, context) {
                if (!figuresCache) {
                    initFiguresGL();
                }
                var cache = figuresCache, canvas = cache.canvas, gl = cache.gl;
                canvas.width = width;
                canvas.height = height;
                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
                gl.uniform2f(cache.resolutionLocation, width, height);
                var count = 0;
                var i, ii, rows;
                for (i = 0, ii = figures.length; i < ii; i++) {
                    switch (figures[i].type) {
                      case "lattice":
                        rows = figures[i].coords.length / figures[i].verticesPerRow | 0;
                        count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;
                        break;

                      case "triangles":
                        count += figures[i].coords.length;
                        break;
                    }
                }
                var coords = new Float32Array(count * 2);
                var colors = new Uint8Array(count * 3);
                var coordsMap = context.coords, colorsMap = context.colors;
                var pIndex = 0, cIndex = 0;
                for (i = 0, ii = figures.length; i < ii; i++) {
                    var figure = figures[i], ps = figure.coords, cs = figure.colors;
                    switch (figure.type) {
                      case "lattice":
                        var cols = figure.verticesPerRow;
                        rows = ps.length / cols | 0;
                        for (var row = 1; row < rows; row++) {
                            var offset = row * cols + 1;
                            for (var col = 1; col < cols; col++, offset++) {
                                coords[pIndex] = coordsMap[ps[offset - cols - 1]];
                                coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];
                                coords[pIndex + 2] = coordsMap[ps[offset - cols]];
                                coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];
                                coords[pIndex + 4] = coordsMap[ps[offset - 1]];
                                coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];
                                colors[cIndex] = colorsMap[cs[offset - cols - 1]];
                                colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];
                                colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];
                                colors[cIndex + 3] = colorsMap[cs[offset - cols]];
                                colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];
                                colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];
                                colors[cIndex + 6] = colorsMap[cs[offset - 1]];
                                colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];
                                colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];
                                coords[pIndex + 6] = coords[pIndex + 2];
                                coords[pIndex + 7] = coords[pIndex + 3];
                                coords[pIndex + 8] = coords[pIndex + 4];
                                coords[pIndex + 9] = coords[pIndex + 5];
                                coords[pIndex + 10] = coordsMap[ps[offset]];
                                coords[pIndex + 11] = coordsMap[ps[offset] + 1];
                                colors[cIndex + 9] = colors[cIndex + 3];
                                colors[cIndex + 10] = colors[cIndex + 4];
                                colors[cIndex + 11] = colors[cIndex + 5];
                                colors[cIndex + 12] = colors[cIndex + 6];
                                colors[cIndex + 13] = colors[cIndex + 7];
                                colors[cIndex + 14] = colors[cIndex + 8];
                                colors[cIndex + 15] = colorsMap[cs[offset]];
                                colors[cIndex + 16] = colorsMap[cs[offset] + 1];
                                colors[cIndex + 17] = colorsMap[cs[offset] + 2];
                                pIndex += 12;
                                cIndex += 18;
                            }
                        }
                        break;

                      case "triangles":
                        for (var j = 0, jj = ps.length; j < jj; j++) {
                            coords[pIndex] = coordsMap[ps[j]];
                            coords[pIndex + 1] = coordsMap[ps[j] + 1];
                            colors[cIndex] = colorsMap[cs[j]];
                            colors[cIndex + 1] = colorsMap[cs[j] + 1];
                            colors[cIndex + 2] = colorsMap[cs[j] + 2];
                            pIndex += 2;
                            cIndex += 3;
                        }
                        break;
                    }
                }
                if (backgroundColor) {
                    gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1);
                } else {
                    gl.clearColor(0, 0, 0, 0);
                }
                gl.clear(gl.COLOR_BUFFER_BIT);
                var coordsBuffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);
                gl.enableVertexAttribArray(cache.positionLocation);
                gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);
                var colorsBuffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
                gl.enableVertexAttribArray(cache.colorLocation);
                gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);
                gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);
                gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);
                gl.drawArrays(gl.TRIANGLES, 0, count);
                gl.flush();
                gl.deleteBuffer(coordsBuffer);
                gl.deleteBuffer(colorsBuffer);
                return canvas;
            }
            return {
                tryInitGL: function tryInitGL() {
                    try {
                        generateGL();
                        return !!currentGL;
                    } catch (ex) {}
                    return false;
                },
                composeSMask: composeSMask,
                drawFigures: drawFigures,
                cleanup: function cleanup() {
                    if (smaskCache && smaskCache.canvas) {
                        smaskCache.canvas.width = 0;
                        smaskCache.canvas.height = 0;
                    }
                    if (figuresCache && figuresCache.canvas) {
                        figuresCache.canvas.width = 0;
                        figuresCache.canvas.height = 0;
                    }
                    smaskCache = null;
                    figuresCache = null;
                }
            };
        }();
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.renderTextLayer = void 0;
        var _util = __w_pdfjs_require__(1);
        var _global_scope = _interopRequireDefault(__w_pdfjs_require__(3));
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var renderTextLayer = function renderTextLayerClosure() {
            var MAX_TEXT_DIVS_TO_RENDER = 1e5;
            var NonWhitespaceRegexp = /\S/;
            function isAllWhitespace(str) {
                return !NonWhitespaceRegexp.test(str);
            }
            var styleBuf = [ "left: ", 0, "px; top: ", 0, "px; font-size: ", 0, "px; font-family: ", "", ";" ];
            function appendText(task, geom, styles) {
                var textDiv = document.createElement("span");
                var textDivProperties = {
                    style: null,
                    angle: 0,
                    canvasWidth: 0,
                    isWhitespace: false,
                    originalTransform: null,
                    paddingBottom: 0,
                    paddingLeft: 0,
                    paddingRight: 0,
                    paddingTop: 0,
                    scale: 1
                };
                task._textDivs.push(textDiv);
                if (isAllWhitespace(geom.str)) {
                    textDivProperties.isWhitespace = true;
                    task._textDivProperties.set(textDiv, textDivProperties);
                    return;
                }
                var tx = _util.Util.transform(task._viewport.transform, geom.transform);
                var angle = Math.atan2(tx[1], tx[0]);
                var style = styles[geom.fontName];
                if (style.vertical) {
                    angle += Math.PI / 2;
                }
                var fontHeight = Math.sqrt(tx[2] * tx[2] + tx[3] * tx[3]);
                var fontAscent = fontHeight;
                if (style.ascent) {
                    fontAscent = style.ascent * fontAscent;
                } else if (style.descent) {
                    fontAscent = (1 + style.descent) * fontAscent;
                }
                var left;
                var top;
                if (angle === 0) {
                    left = tx[4];
                    top = tx[5] - fontAscent;
                } else {
                    left = tx[4] + fontAscent * Math.sin(angle);
                    top = tx[5] - fontAscent * Math.cos(angle);
                }
                styleBuf[1] = left;
                styleBuf[3] = top;
                styleBuf[5] = fontHeight;
                styleBuf[7] = style.fontFamily;
                textDivProperties.style = styleBuf.join("");
                textDiv.setAttribute("style", textDivProperties.style);
                textDiv.textContent = geom.str;
                if (task._fontInspectorEnabled) {
                    textDiv.dataset.fontName = geom.fontName;
                }
                if (angle !== 0) {
                    textDivProperties.angle = angle * (180 / Math.PI);
                }
                if (geom.str.length > 1) {
                    if (style.vertical) {
                        textDivProperties.canvasWidth = geom.height * task._viewport.scale;
                    } else {
                        textDivProperties.canvasWidth = geom.width * task._viewport.scale;
                    }
                }
                task._textDivProperties.set(textDiv, textDivProperties);
                if (task._textContentStream) {
                    task._layoutText(textDiv);
                }
                if (task._enhanceTextSelection) {
                    var angleCos = 1, angleSin = 0;
                    if (angle !== 0) {
                        angleCos = Math.cos(angle);
                        angleSin = Math.sin(angle);
                    }
                    var divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;
                    var divHeight = fontHeight;
                    var m, b;
                    if (angle !== 0) {
                        m = [ angleCos, angleSin, -angleSin, angleCos, left, top ];
                        b = _util.Util.getAxialAlignedBoundingBox([ 0, 0, divWidth, divHeight ], m);
                    } else {
                        b = [ left, top, left + divWidth, top + divHeight ];
                    }
                    task._bounds.push({
                        left: b[0],
                        top: b[1],
                        right: b[2],
                        bottom: b[3],
                        div: textDiv,
                        size: [ divWidth, divHeight ],
                        m: m
                    });
                }
            }
            function render(task) {
                if (task._canceled) {
                    return;
                }
                var textDivs = task._textDivs;
                var capability = task._capability;
                var textDivsLength = textDivs.length;
                if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
                    task._renderingDone = true;
                    capability.resolve();
                    return;
                }
                if (!task._textContentStream) {
                    for (var i = 0; i < textDivsLength; i++) {
                        task._layoutText(textDivs[i]);
                    }
                }
                task._renderingDone = true;
                capability.resolve();
            }
            function expand(task) {
                var bounds = task._bounds;
                var viewport = task._viewport;
                var expanded = expandBounds(viewport.width, viewport.height, bounds);
                for (var i = 0; i < expanded.length; i++) {
                    var div = bounds[i].div;
                    var divProperties = task._textDivProperties.get(div);
                    if (divProperties.angle === 0) {
                        divProperties.paddingLeft = bounds[i].left - expanded[i].left;
                        divProperties.paddingTop = bounds[i].top - expanded[i].top;
                        divProperties.paddingRight = expanded[i].right - bounds[i].right;
                        divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;
                        task._textDivProperties.set(div, divProperties);
                        continue;
                    }
                    var e = expanded[i], b = bounds[i];
                    var m = b.m, c = m[0], s = m[1];
                    var points = [ [ 0, 0 ], [ 0, b.size[1] ], [ b.size[0], 0 ], b.size ];
                    var ts = new Float64Array(64);
                    points.forEach(function(p, i) {
                        var t = _util.Util.applyTransform(p, m);
                        ts[i + 0] = c && (e.left - t[0]) / c;
                        ts[i + 4] = s && (e.top - t[1]) / s;
                        ts[i + 8] = c && (e.right - t[0]) / c;
                        ts[i + 12] = s && (e.bottom - t[1]) / s;
                        ts[i + 16] = s && (e.left - t[0]) / -s;
                        ts[i + 20] = c && (e.top - t[1]) / c;
                        ts[i + 24] = s && (e.right - t[0]) / -s;
                        ts[i + 28] = c && (e.bottom - t[1]) / c;
                        ts[i + 32] = c && (e.left - t[0]) / -c;
                        ts[i + 36] = s && (e.top - t[1]) / -s;
                        ts[i + 40] = c && (e.right - t[0]) / -c;
                        ts[i + 44] = s && (e.bottom - t[1]) / -s;
                        ts[i + 48] = s && (e.left - t[0]) / s;
                        ts[i + 52] = c && (e.top - t[1]) / -c;
                        ts[i + 56] = s && (e.right - t[0]) / s;
                        ts[i + 60] = c && (e.bottom - t[1]) / -c;
                    });
                    var findPositiveMin = function findPositiveMin(ts, offset, count) {
                        var result = 0;
                        for (var i = 0; i < count; i++) {
                            var t = ts[offset++];
                            if (t > 0) {
                                result = result ? Math.min(t, result) : t;
                            }
                        }
                        return result;
                    };
                    var boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));
                    divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;
                    divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;
                    divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;
                    divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;
                    task._textDivProperties.set(div, divProperties);
                }
            }
            function expandBounds(width, height, boxes) {
                var bounds = boxes.map(function(box, i) {
                    return {
                        x1: box.left,
                        y1: box.top,
                        x2: box.right,
                        y2: box.bottom,
                        index: i,
                        x1New: undefined,
                        x2New: undefined
                    };
                });
                expandBoundsLTR(width, bounds);
                var expanded = new Array(boxes.length);
                bounds.forEach(function(b) {
                    var i = b.index;
                    expanded[i] = {
                        left: b.x1New,
                        top: 0,
                        right: b.x2New,
                        bottom: 0
                    };
                });
                boxes.map(function(box, i) {
                    var e = expanded[i], b = bounds[i];
                    b.x1 = box.top;
                    b.y1 = width - e.right;
                    b.x2 = box.bottom;
                    b.y2 = width - e.left;
                    b.index = i;
                    b.x1New = undefined;
                    b.x2New = undefined;
                });
                expandBoundsLTR(height, bounds);
                bounds.forEach(function(b) {
                    var i = b.index;
                    expanded[i].top = b.x1New;
                    expanded[i].bottom = b.x2New;
                });
                return expanded;
            }
            function expandBoundsLTR(width, bounds) {
                bounds.sort(function(a, b) {
                    return a.x1 - b.x1 || a.index - b.index;
                });
                var fakeBoundary = {
                    x1: -Infinity,
                    y1: -Infinity,
                    x2: 0,
                    y2: Infinity,
                    index: -1,
                    x1New: 0,
                    x2New: 0
                };
                var horizon = [ {
                    start: -Infinity,
                    end: Infinity,
                    boundary: fakeBoundary
                } ];
                bounds.forEach(function(boundary) {
                    var i = 0;
                    while (i < horizon.length && horizon[i].end <= boundary.y1) {
                        i++;
                    }
                    var j = horizon.length - 1;
                    while (j >= 0 && horizon[j].start >= boundary.y2) {
                        j--;
                    }
                    var horizonPart, affectedBoundary;
                    var q, k, maxXNew = -Infinity;
                    for (q = i; q <= j; q++) {
                        horizonPart = horizon[q];
                        affectedBoundary = horizonPart.boundary;
                        var xNew;
                        if (affectedBoundary.x2 > boundary.x1) {
                            xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;
                        } else if (affectedBoundary.x2New === undefined) {
                            xNew = (affectedBoundary.x2 + boundary.x1) / 2;
                        } else {
                            xNew = affectedBoundary.x2New;
                        }
                        if (xNew > maxXNew) {
                            maxXNew = xNew;
                        }
                    }
                    boundary.x1New = maxXNew;
                    for (q = i; q <= j; q++) {
                        horizonPart = horizon[q];
                        affectedBoundary = horizonPart.boundary;
                        if (affectedBoundary.x2New === undefined) {
                            if (affectedBoundary.x2 > boundary.x1) {
                                if (affectedBoundary.index > boundary.index) {
                                    affectedBoundary.x2New = affectedBoundary.x2;
                                }
                            } else {
                                affectedBoundary.x2New = maxXNew;
                            }
                        } else if (affectedBoundary.x2New > maxXNew) {
                            affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);
                        }
                    }
                    var changedHorizon = [], lastBoundary = null;
                    for (q = i; q <= j; q++) {
                        horizonPart = horizon[q];
                        affectedBoundary = horizonPart.boundary;
                        var useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;
                        if (lastBoundary === useBoundary) {
                            changedHorizon[changedHorizon.length - 1].end = horizonPart.end;
                        } else {
                            changedHorizon.push({
                                start: horizonPart.start,
                                end: horizonPart.end,
                                boundary: useBoundary
                            });
                            lastBoundary = useBoundary;
                        }
                    }
                    if (horizon[i].start < boundary.y1) {
                        changedHorizon[0].start = boundary.y1;
                        changedHorizon.unshift({
                            start: horizon[i].start,
                            end: boundary.y1,
                            boundary: horizon[i].boundary
                        });
                    }
                    if (boundary.y2 < horizon[j].end) {
                        changedHorizon[changedHorizon.length - 1].end = boundary.y2;
                        changedHorizon.push({
                            start: boundary.y2,
                            end: horizon[j].end,
                            boundary: horizon[j].boundary
                        });
                    }
                    for (q = i; q <= j; q++) {
                        horizonPart = horizon[q];
                        affectedBoundary = horizonPart.boundary;
                        if (affectedBoundary.x2New !== undefined) {
                            continue;
                        }
                        var used = false;
                        for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {
                            used = horizon[k].boundary === affectedBoundary;
                        }
                        for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {
                            used = horizon[k].boundary === affectedBoundary;
                        }
                        for (k = 0; !used && k < changedHorizon.length; k++) {
                            used = changedHorizon[k].boundary === affectedBoundary;
                        }
                        if (!used) {
                            affectedBoundary.x2New = maxXNew;
                        }
                    }
                    Array.prototype.splice.apply(horizon, [ i, j - i + 1 ].concat(changedHorizon));
                });
                horizon.forEach(function(horizonPart) {
                    var affectedBoundary = horizonPart.boundary;
                    if (affectedBoundary.x2New === undefined) {
                        affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);
                    }
                });
            }
            function TextLayerRenderTask(_ref) {
                var _this = this;
                var textContent = _ref.textContent, textContentStream = _ref.textContentStream, container = _ref.container, viewport = _ref.viewport, textDivs = _ref.textDivs, textContentItemsStr = _ref.textContentItemsStr, enhanceTextSelection = _ref.enhanceTextSelection;
                this._textContent = textContent;
                this._textContentStream = textContentStream;
                this._container = container;
                this._viewport = viewport;
                this._textDivs = textDivs || [];
                this._textContentItemsStr = textContentItemsStr || [];
                this._enhanceTextSelection = !!enhanceTextSelection;
                this._fontInspectorEnabled = !!(_global_scope["default"].FontInspector && _global_scope["default"].FontInspector.enabled);
                this._reader = null;
                this._layoutTextLastFontSize = null;
                this._layoutTextLastFontFamily = null;
                this._layoutTextCtx = null;
                this._textDivProperties = new WeakMap();
                this._renderingDone = false;
                this._canceled = false;
                this._capability = (0, _util.createPromiseCapability)();
                this._renderTimer = null;
                this._bounds = [];
                this._capability.promise["finally"](function() {
                    if (_this._layoutTextCtx) {
                        _this._layoutTextCtx.canvas.width = 0;
                        _this._layoutTextCtx.canvas.height = 0;
                        _this._layoutTextCtx = null;
                    }
                });
            }
            TextLayerRenderTask.prototype = {
                get promise() {
                    return this._capability.promise;
                },
                cancel: function TextLayer_cancel() {
                    this._canceled = true;
                    if (this._reader) {
                        this._reader.cancel(new _util.AbortException("TextLayer task cancelled."));
                        this._reader = null;
                    }
                    if (this._renderTimer !== null) {
                        clearTimeout(this._renderTimer);
                        this._renderTimer = null;
                    }
                    this._capability.reject(new Error("TextLayer task cancelled."));
                },
                _processItems: function _processItems(items, styleCache) {
                    for (var i = 0, len = items.length; i < len; i++) {
                        this._textContentItemsStr.push(items[i].str);
                        appendText(this, items[i], styleCache);
                    }
                },
                _layoutText: function _layoutText(textDiv) {
                    var textLayerFrag = this._container;
                    var textDivProperties = this._textDivProperties.get(textDiv);
                    if (textDivProperties.isWhitespace) {
                        return;
                    }
                    var fontSize = textDiv.style.fontSize;
                    var fontFamily = textDiv.style.fontFamily;
                    if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {
                        this._layoutTextCtx.font = fontSize + " " + fontFamily;
                        this._layoutTextLastFontSize = fontSize;
                        this._layoutTextLastFontFamily = fontFamily;
                    }
                    var width = this._layoutTextCtx.measureText(textDiv.textContent).width;
                    var transform = "";
                    if (textDivProperties.canvasWidth !== 0 && width > 0) {
                        textDivProperties.scale = textDivProperties.canvasWidth / width;
                        transform = "scaleX(".concat(textDivProperties.scale, ")");
                    }
                    if (textDivProperties.angle !== 0) {
                        transform = "rotate(".concat(textDivProperties.angle, "deg) ").concat(transform);
                    }
                    if (transform.length > 0) {
                        textDivProperties.originalTransform = transform;
                        textDiv.style.transform = transform;
                    }
                    this._textDivProperties.set(textDiv, textDivProperties);
                    textLayerFrag.appendChild(textDiv);
                },
                _render: function TextLayer_render(timeout) {
                    var _this2 = this;
                    var capability = (0, _util.createPromiseCapability)();
                    var styleCache = Object.create(null);
                    var canvas = document.createElement("canvas");
                    canvas.mozOpaque = true;
                    this._layoutTextCtx = canvas.getContext("2d", {
                        alpha: false
                    });
                    if (this._textContent) {
                        var textItems = this._textContent.items;
                        var textStyles = this._textContent.styles;
                        this._processItems(textItems, textStyles);
                        capability.resolve();
                    } else if (this._textContentStream) {
                        var pump = function pump() {
                            _this2._reader.read().then(function(_ref2) {
                                var value = _ref2.value, done = _ref2.done;
                                if (done) {
                                    capability.resolve();
                                    return;
                                }
                                Object.assign(styleCache, value.styles);
                                _this2._processItems(value.items, styleCache);
                                pump();
                            }, capability.reject);
                        };
                        this._reader = this._textContentStream.getReader();
                        pump();
                    } else {
                        throw new Error('Neither "textContent" nor "textContentStream"' + " parameters specified.");
                    }
                    capability.promise.then(function() {
                        styleCache = null;
                        if (!timeout) {
                            render(_this2);
                        } else {
                            _this2._renderTimer = setTimeout(function() {
                                render(_this2);
                                _this2._renderTimer = null;
                            }, timeout);
                        }
                    }, this._capability.reject);
                },
                expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {
                    if (!this._enhanceTextSelection || !this._renderingDone) {
                        return;
                    }
                    if (this._bounds !== null) {
                        expand(this);
                        this._bounds = null;
                    }
                    for (var i = 0, ii = this._textDivs.length; i < ii; i++) {
                        var div = this._textDivs[i];
                        var divProperties = this._textDivProperties.get(div);
                        if (divProperties.isWhitespace) {
                            continue;
                        }
                        if (expandDivs) {
                            var transform = "", padding = "";
                            if (divProperties.scale !== 1) {
                                transform = "scaleX(" + divProperties.scale + ")";
                            }
                            if (divProperties.angle !== 0) {
                                transform = "rotate(" + divProperties.angle + "deg) " + transform;
                            }
                            if (divProperties.paddingLeft !== 0) {
                                padding += " padding-left: " + divProperties.paddingLeft / divProperties.scale + "px;";
                                transform += " translateX(" + -divProperties.paddingLeft / divProperties.scale + "px)";
                            }
                            if (divProperties.paddingTop !== 0) {
                                padding += " padding-top: " + divProperties.paddingTop + "px;";
                                transform += " translateY(" + -divProperties.paddingTop + "px)";
                            }
                            if (divProperties.paddingRight !== 0) {
                                padding += " padding-right: " + divProperties.paddingRight / divProperties.scale + "px;";
                            }
                            if (divProperties.paddingBottom !== 0) {
                                padding += " padding-bottom: " + divProperties.paddingBottom + "px;";
                            }
                            if (padding !== "") {
                                div.setAttribute("style", divProperties.style + padding);
                            }
                            if (transform !== "") {
                                div.style.transform = transform;
                            }
                        } else {
                            div.style.padding = 0;
                            div.style.transform = divProperties.originalTransform || "";
                        }
                    }
                }
            };
            function renderTextLayer(renderParameters) {
                var task = new TextLayerRenderTask({
                    textContent: renderParameters.textContent,
                    textContentStream: renderParameters.textContentStream,
                    container: renderParameters.container,
                    viewport: renderParameters.viewport,
                    textDivs: renderParameters.textDivs,
                    textContentItemsStr: renderParameters.textContentItemsStr,
                    enhanceTextSelection: renderParameters.enhanceTextSelection
                });
                task._render(renderParameters.timeout);
                return task;
            }
            return renderTextLayer;
        }();
        exports.renderTextLayer = renderTextLayer;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AnnotationLayer = void 0;
        var _display_utils = __w_pdfjs_require__(151);
        var _util = __w_pdfjs_require__(1);
        function _get(target, property, receiver) {
            if (typeof Reflect !== "undefined" && Reflect.get) {
                _get = Reflect.get;
            } else {
                _get = function _get(target, property, receiver) {
                    var base = _superPropBase(target, property);
                    if (!base) return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);
                    if (desc.get) {
                        return desc.get.call(receiver);
                    }
                    return desc.value;
                };
            }
            return _get(target, property, receiver || target);
        }
        function _superPropBase(object, property) {
            while (!Object.prototype.hasOwnProperty.call(object, property)) {
                object = _getPrototypeOf(object);
                if (object === null) break;
            }
            return object;
        }
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        function _possibleConstructorReturn(self, call) {
            if (call && (_typeof(call) === "object" || typeof call === "function")) {
                return call;
            }
            return _assertThisInitialized(self);
        }
        function _assertThisInitialized(self) {
            if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self;
        }
        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var AnnotationElementFactory = function() {
            function AnnotationElementFactory() {
                _classCallCheck(this, AnnotationElementFactory);
            }
            _createClass(AnnotationElementFactory, null, [ {
                key: "create",
                value: function create(parameters) {
                    var subtype = parameters.data.annotationType;
                    switch (subtype) {
                      case _util.AnnotationType.LINK:
                        return new LinkAnnotationElement(parameters);

                      case _util.AnnotationType.TEXT:
                        return new TextAnnotationElement(parameters);

                      case _util.AnnotationType.WIDGET:
                        var fieldType = parameters.data.fieldType;
                        switch (fieldType) {
                          case "Tx":
                            return new TextWidgetAnnotationElement(parameters);

                          case "Btn":
                            if (parameters.data.radioButton) {
                                return new RadioButtonWidgetAnnotationElement(parameters);
                            } else if (parameters.data.checkBox) {
                                return new CheckboxWidgetAnnotationElement(parameters);
                            }
                            return new PushButtonWidgetAnnotationElement(parameters);

                          case "Ch":
                            return new ChoiceWidgetAnnotationElement(parameters);
                        }
                        return new WidgetAnnotationElement(parameters);

                      case _util.AnnotationType.POPUP:
                        return new PopupAnnotationElement(parameters);

                      case _util.AnnotationType.FREETEXT:
                        return new FreeTextAnnotationElement(parameters);

                      case _util.AnnotationType.LINE:
                        return new LineAnnotationElement(parameters);

                      case _util.AnnotationType.SQUARE:
                        return new SquareAnnotationElement(parameters);

                      case _util.AnnotationType.CIRCLE:
                        return new CircleAnnotationElement(parameters);

                      case _util.AnnotationType.POLYLINE:
                        return new PolylineAnnotationElement(parameters);

                      case _util.AnnotationType.CARET:
                        return new CaretAnnotationElement(parameters);

                      case _util.AnnotationType.INK:
                        return new InkAnnotationElement(parameters);

                      case _util.AnnotationType.POLYGON:
                        return new PolygonAnnotationElement(parameters);

                      case _util.AnnotationType.HIGHLIGHT:
                        return new HighlightAnnotationElement(parameters);

                      case _util.AnnotationType.UNDERLINE:
                        return new UnderlineAnnotationElement(parameters);

                      case _util.AnnotationType.SQUIGGLY:
                        return new SquigglyAnnotationElement(parameters);

                      case _util.AnnotationType.STRIKEOUT:
                        return new StrikeOutAnnotationElement(parameters);

                      case _util.AnnotationType.STAMP:
                        return new StampAnnotationElement(parameters);

                      case _util.AnnotationType.FILEATTACHMENT:
                        return new FileAttachmentAnnotationElement(parameters);

                      default:
                        return new AnnotationElement(parameters);
                    }
                }
            } ]);
            return AnnotationElementFactory;
        }();
        var AnnotationElement = function() {
            function AnnotationElement(parameters) {
                var isRenderable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var ignoreBorder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                _classCallCheck(this, AnnotationElement);
                this.isRenderable = isRenderable;
                this.data = parameters.data;
                this.layer = parameters.layer;
                this.page = parameters.page;
                this.viewport = parameters.viewport;
                this.linkService = parameters.linkService;
                this.downloadManager = parameters.downloadManager;
                this.imageResourcesPath = parameters.imageResourcesPath;
                this.renderInteractiveForms = parameters.renderInteractiveForms;
                this.svgFactory = parameters.svgFactory;
                if (isRenderable) {
                    this.container = this._createContainer(ignoreBorder);
                }
            }
            _createClass(AnnotationElement, [ {
                key: "_createContainer",
                value: function _createContainer() {
                    var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                    var data = this.data, page = this.page, viewport = this.viewport;
                    var container = document.createElement("section");
                    var width = data.rect[2] - data.rect[0];
                    var height = data.rect[3] - data.rect[1];
                    container.setAttribute("data-annotation-id", data.id);
                    var rect = _util.Util.normalizeRect([ data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1] ]);
                    container.style.transform = "matrix(" + viewport.transform.join(",") + ")";
                    container.style.transformOrigin = -rect[0] + "px " + -rect[1] + "px";
                    if (!ignoreBorder && data.borderStyle.width > 0) {
                        container.style.borderWidth = data.borderStyle.width + "px";
                        if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {
                            width = width - 2 * data.borderStyle.width;
                            height = height - 2 * data.borderStyle.width;
                        }
                        var horizontalRadius = data.borderStyle.horizontalCornerRadius;
                        var verticalRadius = data.borderStyle.verticalCornerRadius;
                        if (horizontalRadius > 0 || verticalRadius > 0) {
                            var radius = horizontalRadius + "px / " + verticalRadius + "px";
                            container.style.borderRadius = radius;
                        }
                        switch (data.borderStyle.style) {
                          case _util.AnnotationBorderStyleType.SOLID:
                            container.style.borderStyle = "solid";
                            break;

                          case _util.AnnotationBorderStyleType.DASHED:
                            container.style.borderStyle = "dashed";
                            break;

                          case _util.AnnotationBorderStyleType.BEVELED:
                            (0, _util.warn)("Unimplemented border style: beveled");
                            break;

                          case _util.AnnotationBorderStyleType.INSET:
                            (0, _util.warn)("Unimplemented border style: inset");
                            break;

                          case _util.AnnotationBorderStyleType.UNDERLINE:
                            container.style.borderBottomStyle = "solid";
                            break;

                          default:
                            break;
                        }
                        if (data.color) {
                            container.style.borderColor = _util.Util.makeCssRgb(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);
                        } else {
                            container.style.borderWidth = 0;
                        }
                    }
                    container.style.left = rect[0] + "px";
                    container.style.top = rect[1] + "px";
                    container.style.width = width + "px";
                    container.style.height = height + "px";
                    return container;
                }
            }, {
                key: "_createPopup",
                value: function _createPopup(container, trigger, data) {
                    if (!trigger) {
                        trigger = document.createElement("div");
                        trigger.style.height = container.style.height;
                        trigger.style.width = container.style.width;
                        container.appendChild(trigger);
                    }
                    var popupElement = new PopupElement({
                        container: container,
                        trigger: trigger,
                        color: data.color,
                        title: data.title,
                        contents: data.contents,
                        hideWrapper: true
                    });
                    var popup = popupElement.render();
                    popup.style.left = container.style.width;
                    container.appendChild(popup);
                }
            }, {
                key: "render",
                value: function render() {
                    (0, _util.unreachable)("Abstract method `AnnotationElement.render` called");
                }
            } ]);
            return AnnotationElement;
        }();
        var LinkAnnotationElement = function(_AnnotationElement) {
            _inherits(LinkAnnotationElement, _AnnotationElement);
            function LinkAnnotationElement(parameters) {
                _classCallCheck(this, LinkAnnotationElement);
                var isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action);
                return _possibleConstructorReturn(this, _getPrototypeOf(LinkAnnotationElement).call(this, parameters, isRenderable));
            }
            _createClass(LinkAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "linkAnnotation";
                    var data = this.data, linkService = this.linkService;
                    var link = document.createElement("a");
                    (0, _display_utils.addLinkAttributes)(link, {
                        url: data.url,
                        target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,
                        rel: linkService.externalLinkRel
                    });
                    if (!data.url) {
                        if (data.action) {
                            this._bindNamedAction(link, data.action);
                        } else {
                            this._bindLink(link, data.dest);
                        }
                    }
                    this.container.appendChild(link);
                    return this.container;
                }
            }, {
                key: "_bindLink",
                value: function _bindLink(link, destination) {
                    var _this = this;
                    link.href = this.linkService.getDestinationHash(destination);
                    link.onclick = function() {
                        if (destination) {
                            _this.linkService.navigateTo(destination);
                        }
                        return false;
                    };
                    if (destination) {
                        link.className = "internalLink";
                    }
                }
            }, {
                key: "_bindNamedAction",
                value: function _bindNamedAction(link, action) {
                    var _this2 = this;
                    link.href = this.linkService.getAnchorUrl("");
                    link.onclick = function() {
                        _this2.linkService.executeNamedAction(action);
                        return false;
                    };
                    link.className = "internalLink";
                }
            } ]);
            return LinkAnnotationElement;
        }(AnnotationElement);
        var TextAnnotationElement = function(_AnnotationElement2) {
            _inherits(TextAnnotationElement, _AnnotationElement2);
            function TextAnnotationElement(parameters) {
                _classCallCheck(this, TextAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(TextAnnotationElement).call(this, parameters, isRenderable));
            }
            _createClass(TextAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "textAnnotation";
                    var image = document.createElement("img");
                    image.style.height = this.container.style.height;
                    image.style.width = this.container.style.width;
                    image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";
                    image.alt = "[{{type}} Annotation]";
                    image.dataset.l10nId = "text_annotation_type";
                    image.dataset.l10nArgs = JSON.stringify({
                        type: this.data.name
                    });
                    if (!this.data.hasPopup) {
                        this._createPopup(this.container, image, this.data);
                    }
                    this.container.appendChild(image);
                    return this.container;
                }
            } ]);
            return TextAnnotationElement;
        }(AnnotationElement);
        var WidgetAnnotationElement = function(_AnnotationElement3) {
            _inherits(WidgetAnnotationElement, _AnnotationElement3);
            function WidgetAnnotationElement() {
                _classCallCheck(this, WidgetAnnotationElement);
                return _possibleConstructorReturn(this, _getPrototypeOf(WidgetAnnotationElement).apply(this, arguments));
            }
            _createClass(WidgetAnnotationElement, [ {
                key: "render",
                value: function render() {
                    return this.container;
                }
            } ]);
            return WidgetAnnotationElement;
        }(AnnotationElement);
        var TextWidgetAnnotationElement = function(_WidgetAnnotationElem) {
            _inherits(TextWidgetAnnotationElement, _WidgetAnnotationElem);
            function TextWidgetAnnotationElement(parameters) {
                _classCallCheck(this, TextWidgetAnnotationElement);
                var isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
                return _possibleConstructorReturn(this, _getPrototypeOf(TextWidgetAnnotationElement).call(this, parameters, isRenderable));
            }
            _createClass(TextWidgetAnnotationElement, [ {
                key: "render",
                value: function render() {
                    var TEXT_ALIGNMENT = [ "left", "center", "right" ];
                    this.container.className = "textWidgetAnnotation";
                    var element = null;
                    if (this.renderInteractiveForms) {
                        if (this.data.multiLine) {
                            element = document.createElement("textarea");
                            element.textContent = this.data.fieldValue;
                        } else {
                            element = document.createElement("input");
                            element.type = "text";
                            element.setAttribute("value", this.data.fieldValue);
                        }
                        element.disabled = this.data.readOnly;
                        if (this.data.maxLen !== null) {
                            element.maxLength = this.data.maxLen;
                        }
                        if (this.data.comb) {
                            var fieldWidth = this.data.rect[2] - this.data.rect[0];
                            var combWidth = fieldWidth / this.data.maxLen;
                            element.classList.add("comb");
                            element.style.letterSpacing = "calc(" + combWidth + "px - 1ch)";
                        }
                    } else {
                        element = document.createElement("div");
                        element.textContent = this.data.fieldValue;
                        element.style.verticalAlign = "middle";
                        element.style.display = "table-cell";
                        var font = null;
                        if (this.data.fontRefName && this.page.commonObjs.has(this.data.fontRefName)) {
                            font = this.page.commonObjs.get(this.data.fontRefName);
                        }
                        this._setTextStyle(element, font);
                    }
                    if (this.data.textAlignment !== null) {
                        element.style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
                    }
                    this.container.appendChild(element);
                    return this.container;
                }
            }, {
                key: "_setTextStyle",
                value: function _setTextStyle(element, font) {
                    var style = element.style;
                    style.fontSize = this.data.fontSize + "px";
                    style.direction = this.data.fontDirection < 0 ? "rtl" : "ltr";
                    if (!font) {
                        return;
                    }
                    style.fontWeight = font.black ? font.bold ? "900" : "bold" : font.bold ? "bold" : "normal";
                    style.fontStyle = font.italic ? "italic" : "normal";
                    var fontFamily = font.loadedName ? '"' + font.loadedName + '", ' : "";
                    var fallbackName = font.fallbackName || "Helvetica, sans-serif";
                    style.fontFamily = fontFamily + fallbackName;
                }
            } ]);
            return TextWidgetAnnotationElement;
        }(WidgetAnnotationElement);
        var CheckboxWidgetAnnotationElement = function(_WidgetAnnotationElem2) {
            _inherits(CheckboxWidgetAnnotationElement, _WidgetAnnotationElem2);
            function CheckboxWidgetAnnotationElement(parameters) {
                _classCallCheck(this, CheckboxWidgetAnnotationElement);
                return _possibleConstructorReturn(this, _getPrototypeOf(CheckboxWidgetAnnotationElement).call(this, parameters, parameters.renderInteractiveForms));
            }
            _createClass(CheckboxWidgetAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "buttonWidgetAnnotation checkBox";
                    var element = document.createElement("input");
                    element.disabled = this.data.readOnly;
                    element.type = "checkbox";
                    if (this.data.fieldValue && this.data.fieldValue !== "Off") {
                        element.setAttribute("checked", true);
                    }
                    this.container.appendChild(element);
                    return this.container;
                }
            } ]);
            return CheckboxWidgetAnnotationElement;
        }(WidgetAnnotationElement);
        var RadioButtonWidgetAnnotationElement = function(_WidgetAnnotationElem3) {
            _inherits(RadioButtonWidgetAnnotationElement, _WidgetAnnotationElem3);
            function RadioButtonWidgetAnnotationElement(parameters) {
                _classCallCheck(this, RadioButtonWidgetAnnotationElement);
                return _possibleConstructorReturn(this, _getPrototypeOf(RadioButtonWidgetAnnotationElement).call(this, parameters, parameters.renderInteractiveForms));
            }
            _createClass(RadioButtonWidgetAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "buttonWidgetAnnotation radioButton";
                    var element = document.createElement("input");
                    element.disabled = this.data.readOnly;
                    element.type = "radio";
                    element.name = this.data.fieldName;
                    if (this.data.fieldValue === this.data.buttonValue) {
                        element.setAttribute("checked", true);
                    }
                    this.container.appendChild(element);
                    return this.container;
                }
            } ]);
            return RadioButtonWidgetAnnotationElement;
        }(WidgetAnnotationElement);
        var PushButtonWidgetAnnotationElement = function(_LinkAnnotationElemen) {
            _inherits(PushButtonWidgetAnnotationElement, _LinkAnnotationElemen);
            function PushButtonWidgetAnnotationElement() {
                _classCallCheck(this, PushButtonWidgetAnnotationElement);
                return _possibleConstructorReturn(this, _getPrototypeOf(PushButtonWidgetAnnotationElement).apply(this, arguments));
            }
            _createClass(PushButtonWidgetAnnotationElement, [ {
                key: "render",
                value: function render() {
                    var container = _get(_getPrototypeOf(PushButtonWidgetAnnotationElement.prototype), "render", this).call(this);
                    container.className = "buttonWidgetAnnotation pushButton";
                    return container;
                }
            } ]);
            return PushButtonWidgetAnnotationElement;
        }(LinkAnnotationElement);
        var ChoiceWidgetAnnotationElement = function(_WidgetAnnotationElem4) {
            _inherits(ChoiceWidgetAnnotationElement, _WidgetAnnotationElem4);
            function ChoiceWidgetAnnotationElement(parameters) {
                _classCallCheck(this, ChoiceWidgetAnnotationElement);
                return _possibleConstructorReturn(this, _getPrototypeOf(ChoiceWidgetAnnotationElement).call(this, parameters, parameters.renderInteractiveForms));
            }
            _createClass(ChoiceWidgetAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "choiceWidgetAnnotation";
                    var selectElement = document.createElement("select");
                    selectElement.disabled = this.data.readOnly;
                    if (!this.data.combo) {
                        selectElement.size = this.data.options.length;
                        if (this.data.multiSelect) {
                            selectElement.multiple = true;
                        }
                    }
                    for (var i = 0, ii = this.data.options.length; i < ii; i++) {
                        var option = this.data.options[i];
                        var optionElement = document.createElement("option");
                        optionElement.textContent = option.displayValue;
                        optionElement.value = option.exportValue;
                        if (this.data.fieldValue.includes(option.displayValue)) {
                            optionElement.setAttribute("selected", true);
                        }
                        selectElement.appendChild(optionElement);
                    }
                    this.container.appendChild(selectElement);
                    return this.container;
                }
            } ]);
            return ChoiceWidgetAnnotationElement;
        }(WidgetAnnotationElement);
        var PopupAnnotationElement = function(_AnnotationElement4) {
            _inherits(PopupAnnotationElement, _AnnotationElement4);
            function PopupAnnotationElement(parameters) {
                _classCallCheck(this, PopupAnnotationElement);
                var isRenderable = !!(parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(PopupAnnotationElement).call(this, parameters, isRenderable));
            }
            _createClass(PopupAnnotationElement, [ {
                key: "render",
                value: function render() {
                    var IGNORE_TYPES = [ "Line", "Square", "Circle", "PolyLine", "Polygon", "Ink" ];
                    this.container.className = "popupAnnotation";
                    if (IGNORE_TYPES.includes(this.data.parentType)) {
                        return this.container;
                    }
                    var selector = '[data-annotation-id="' + this.data.parentId + '"]';
                    var parentElement = this.layer.querySelector(selector);
                    if (!parentElement) {
                        return this.container;
                    }
                    var popup = new PopupElement({
                        container: this.container,
                        trigger: parentElement,
                        color: this.data.color,
                        title: this.data.title,
                        contents: this.data.contents
                    });
                    var parentLeft = parseFloat(parentElement.style.left);
                    var parentWidth = parseFloat(parentElement.style.width);
                    this.container.style.transformOrigin = -(parentLeft + parentWidth) + "px -" + parentElement.style.top;
                    this.container.style.left = parentLeft + parentWidth + "px";
                    this.container.appendChild(popup.render());
                    return this.container;
                }
            } ]);
            return PopupAnnotationElement;
        }(AnnotationElement);
        var PopupElement = function() {
            function PopupElement(parameters) {
                _classCallCheck(this, PopupElement);
                this.container = parameters.container;
                this.trigger = parameters.trigger;
                this.color = parameters.color;
                this.title = parameters.title;
                this.contents = parameters.contents;
                this.hideWrapper = parameters.hideWrapper || false;
                this.pinned = false;
            }
            _createClass(PopupElement, [ {
                key: "render",
                value: function render() {
                    var BACKGROUND_ENLIGHT = .7;
                    var wrapper = document.createElement("div");
                    wrapper.className = "popupWrapper";
                    this.hideElement = this.hideWrapper ? wrapper : this.container;
                    this.hideElement.setAttribute("hidden", true);
                    var popup = document.createElement("div");
                    popup.className = "popup";
                    var color = this.color;
                    if (color) {
                        var r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];
                        var g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];
                        var b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];
                        popup.style.backgroundColor = _util.Util.makeCssRgb(r | 0, g | 0, b | 0);
                    }
                    var contents = this._formatContents(this.contents);
                    var title = document.createElement("h1");
                    title.textContent = this.title;
                    this.trigger.addEventListener("click", this._toggle.bind(this));
                    this.trigger.addEventListener("mouseover", this._show.bind(this, false));
                    this.trigger.addEventListener("mouseout", this._hide.bind(this, false));
                    popup.addEventListener("click", this._hide.bind(this, true));
                    popup.appendChild(title);
                    popup.appendChild(contents);
                    wrapper.appendChild(popup);
                    return wrapper;
                }
            }, {
                key: "_formatContents",
                value: function _formatContents(contents) {
                    var p = document.createElement("p");
                    var lines = contents.split(/(?:\r\n?|\n)/);
                    for (var i = 0, ii = lines.length; i < ii; ++i) {
                        var line = lines[i];
                        p.appendChild(document.createTextNode(line));
                        if (i < ii - 1) {
                            p.appendChild(document.createElement("br"));
                        }
                    }
                    return p;
                }
            }, {
                key: "_toggle",
                value: function _toggle() {
                    if (this.pinned) {
                        this._hide(true);
                    } else {
                        this._show(true);
                    }
                }
            }, {
                key: "_show",
                value: function _show() {
                    var pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                    if (pin) {
                        this.pinned = true;
                    }
                    if (this.hideElement.hasAttribute("hidden")) {
                        this.hideElement.removeAttribute("hidden");
                        this.container.style.zIndex += 1;
                    }
                }
            }, {
                key: "_hide",
                value: function _hide() {
                    var unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                    if (unpin) {
                        this.pinned = false;
                    }
                    if (!this.hideElement.hasAttribute("hidden") && !this.pinned) {
                        this.hideElement.setAttribute("hidden", true);
                        this.container.style.zIndex -= 1;
                    }
                }
            } ]);
            return PopupElement;
        }();
        var FreeTextAnnotationElement = function(_AnnotationElement5) {
            _inherits(FreeTextAnnotationElement, _AnnotationElement5);
            function FreeTextAnnotationElement(parameters) {
                _classCallCheck(this, FreeTextAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(FreeTextAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(FreeTextAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "freeTextAnnotation";
                    if (!this.data.hasPopup) {
                        this._createPopup(this.container, null, this.data);
                    }
                    return this.container;
                }
            } ]);
            return FreeTextAnnotationElement;
        }(AnnotationElement);
        var LineAnnotationElement = function(_AnnotationElement6) {
            _inherits(LineAnnotationElement, _AnnotationElement6);
            function LineAnnotationElement(parameters) {
                _classCallCheck(this, LineAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(LineAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(LineAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "lineAnnotation";
                    var data = this.data;
                    var width = data.rect[2] - data.rect[0];
                    var height = data.rect[3] - data.rect[1];
                    var svg = this.svgFactory.create(width, height);
                    var line = this.svgFactory.createElement("svg:line");
                    line.setAttribute("x1", data.rect[2] - data.lineCoordinates[0]);
                    line.setAttribute("y1", data.rect[3] - data.lineCoordinates[1]);
                    line.setAttribute("x2", data.rect[2] - data.lineCoordinates[2]);
                    line.setAttribute("y2", data.rect[3] - data.lineCoordinates[3]);
                    line.setAttribute("stroke-width", data.borderStyle.width);
                    line.setAttribute("stroke", "transparent");
                    svg.appendChild(line);
                    this.container.append(svg);
                    this._createPopup(this.container, line, data);
                    return this.container;
                }
            } ]);
            return LineAnnotationElement;
        }(AnnotationElement);
        var SquareAnnotationElement = function(_AnnotationElement7) {
            _inherits(SquareAnnotationElement, _AnnotationElement7);
            function SquareAnnotationElement(parameters) {
                _classCallCheck(this, SquareAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(SquareAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(SquareAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "squareAnnotation";
                    var data = this.data;
                    var width = data.rect[2] - data.rect[0];
                    var height = data.rect[3] - data.rect[1];
                    var svg = this.svgFactory.create(width, height);
                    var borderWidth = data.borderStyle.width;
                    var square = this.svgFactory.createElement("svg:rect");
                    square.setAttribute("x", borderWidth / 2);
                    square.setAttribute("y", borderWidth / 2);
                    square.setAttribute("width", width - borderWidth);
                    square.setAttribute("height", height - borderWidth);
                    square.setAttribute("stroke-width", borderWidth);
                    square.setAttribute("stroke", "transparent");
                    square.setAttribute("fill", "none");
                    svg.appendChild(square);
                    this.container.append(svg);
                    this._createPopup(this.container, square, data);
                    return this.container;
                }
            } ]);
            return SquareAnnotationElement;
        }(AnnotationElement);
        var CircleAnnotationElement = function(_AnnotationElement8) {
            _inherits(CircleAnnotationElement, _AnnotationElement8);
            function CircleAnnotationElement(parameters) {
                _classCallCheck(this, CircleAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(CircleAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(CircleAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "circleAnnotation";
                    var data = this.data;
                    var width = data.rect[2] - data.rect[0];
                    var height = data.rect[3] - data.rect[1];
                    var svg = this.svgFactory.create(width, height);
                    var borderWidth = data.borderStyle.width;
                    var circle = this.svgFactory.createElement("svg:ellipse");
                    circle.setAttribute("cx", width / 2);
                    circle.setAttribute("cy", height / 2);
                    circle.setAttribute("rx", width / 2 - borderWidth / 2);
                    circle.setAttribute("ry", height / 2 - borderWidth / 2);
                    circle.setAttribute("stroke-width", borderWidth);
                    circle.setAttribute("stroke", "transparent");
                    circle.setAttribute("fill", "none");
                    svg.appendChild(circle);
                    this.container.append(svg);
                    this._createPopup(this.container, circle, data);
                    return this.container;
                }
            } ]);
            return CircleAnnotationElement;
        }(AnnotationElement);
        var PolylineAnnotationElement = function(_AnnotationElement9) {
            _inherits(PolylineAnnotationElement, _AnnotationElement9);
            function PolylineAnnotationElement(parameters) {
                var _this3;
                _classCallCheck(this, PolylineAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                _this3 = _possibleConstructorReturn(this, _getPrototypeOf(PolylineAnnotationElement).call(this, parameters, isRenderable, true));
                _this3.containerClassName = "polylineAnnotation";
                _this3.svgElementName = "svg:polyline";
                return _this3;
            }
            _createClass(PolylineAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = this.containerClassName;
                    var data = this.data;
                    var width = data.rect[2] - data.rect[0];
                    var height = data.rect[3] - data.rect[1];
                    var svg = this.svgFactory.create(width, height);
                    var vertices = data.vertices;
                    var points = [];
                    for (var i = 0, ii = vertices.length; i < ii; i++) {
                        var x = vertices[i].x - data.rect[0];
                        var y = data.rect[3] - vertices[i].y;
                        points.push(x + "," + y);
                    }
                    points = points.join(" ");
                    var borderWidth = data.borderStyle.width;
                    var polyline = this.svgFactory.createElement(this.svgElementName);
                    polyline.setAttribute("points", points);
                    polyline.setAttribute("stroke-width", borderWidth);
                    polyline.setAttribute("stroke", "transparent");
                    polyline.setAttribute("fill", "none");
                    svg.appendChild(polyline);
                    this.container.append(svg);
                    this._createPopup(this.container, polyline, data);
                    return this.container;
                }
            } ]);
            return PolylineAnnotationElement;
        }(AnnotationElement);
        var PolygonAnnotationElement = function(_PolylineAnnotationEl) {
            _inherits(PolygonAnnotationElement, _PolylineAnnotationEl);
            function PolygonAnnotationElement(parameters) {
                var _this4;
                _classCallCheck(this, PolygonAnnotationElement);
                _this4 = _possibleConstructorReturn(this, _getPrototypeOf(PolygonAnnotationElement).call(this, parameters));
                _this4.containerClassName = "polygonAnnotation";
                _this4.svgElementName = "svg:polygon";
                return _this4;
            }
            return PolygonAnnotationElement;
        }(PolylineAnnotationElement);
        var CaretAnnotationElement = function(_AnnotationElement10) {
            _inherits(CaretAnnotationElement, _AnnotationElement10);
            function CaretAnnotationElement(parameters) {
                _classCallCheck(this, CaretAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(CaretAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(CaretAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "caretAnnotation";
                    if (!this.data.hasPopup) {
                        this._createPopup(this.container, null, this.data);
                    }
                    return this.container;
                }
            } ]);
            return CaretAnnotationElement;
        }(AnnotationElement);
        var InkAnnotationElement = function(_AnnotationElement11) {
            _inherits(InkAnnotationElement, _AnnotationElement11);
            function InkAnnotationElement(parameters) {
                var _this5;
                _classCallCheck(this, InkAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                _this5 = _possibleConstructorReturn(this, _getPrototypeOf(InkAnnotationElement).call(this, parameters, isRenderable, true));
                _this5.containerClassName = "inkAnnotation";
                _this5.svgElementName = "svg:polyline";
                return _this5;
            }
            _createClass(InkAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = this.containerClassName;
                    var data = this.data;
                    var width = data.rect[2] - data.rect[0];
                    var height = data.rect[3] - data.rect[1];
                    var svg = this.svgFactory.create(width, height);
                    var inkLists = data.inkLists;
                    for (var i = 0, ii = inkLists.length; i < ii; i++) {
                        var inkList = inkLists[i];
                        var points = [];
                        for (var j = 0, jj = inkList.length; j < jj; j++) {
                            var x = inkList[j].x - data.rect[0];
                            var y = data.rect[3] - inkList[j].y;
                            points.push(x + "," + y);
                        }
                        points = points.join(" ");
                        var borderWidth = data.borderStyle.width;
                        var polyline = this.svgFactory.createElement(this.svgElementName);
                        polyline.setAttribute("points", points);
                        polyline.setAttribute("stroke-width", borderWidth);
                        polyline.setAttribute("stroke", "transparent");
                        polyline.setAttribute("fill", "none");
                        this._createPopup(this.container, polyline, data);
                        svg.appendChild(polyline);
                    }
                    this.container.append(svg);
                    return this.container;
                }
            } ]);
            return InkAnnotationElement;
        }(AnnotationElement);
        var HighlightAnnotationElement = function(_AnnotationElement12) {
            _inherits(HighlightAnnotationElement, _AnnotationElement12);
            function HighlightAnnotationElement(parameters) {
                _classCallCheck(this, HighlightAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(HighlightAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(HighlightAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "highlightAnnotation";
                    if (!this.data.hasPopup) {
                        this._createPopup(this.container, null, this.data);
                    }
                    return this.container;
                }
            } ]);
            return HighlightAnnotationElement;
        }(AnnotationElement);
        var UnderlineAnnotationElement = function(_AnnotationElement13) {
            _inherits(UnderlineAnnotationElement, _AnnotationElement13);
            function UnderlineAnnotationElement(parameters) {
                _classCallCheck(this, UnderlineAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(UnderlineAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(UnderlineAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "underlineAnnotation";
                    if (!this.data.hasPopup) {
                        this._createPopup(this.container, null, this.data);
                    }
                    return this.container;
                }
            } ]);
            return UnderlineAnnotationElement;
        }(AnnotationElement);
        var SquigglyAnnotationElement = function(_AnnotationElement14) {
            _inherits(SquigglyAnnotationElement, _AnnotationElement14);
            function SquigglyAnnotationElement(parameters) {
                _classCallCheck(this, SquigglyAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(SquigglyAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(SquigglyAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "squigglyAnnotation";
                    if (!this.data.hasPopup) {
                        this._createPopup(this.container, null, this.data);
                    }
                    return this.container;
                }
            } ]);
            return SquigglyAnnotationElement;
        }(AnnotationElement);
        var StrikeOutAnnotationElement = function(_AnnotationElement15) {
            _inherits(StrikeOutAnnotationElement, _AnnotationElement15);
            function StrikeOutAnnotationElement(parameters) {
                _classCallCheck(this, StrikeOutAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(StrikeOutAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(StrikeOutAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "strikeoutAnnotation";
                    if (!this.data.hasPopup) {
                        this._createPopup(this.container, null, this.data);
                    }
                    return this.container;
                }
            } ]);
            return StrikeOutAnnotationElement;
        }(AnnotationElement);
        var StampAnnotationElement = function(_AnnotationElement16) {
            _inherits(StampAnnotationElement, _AnnotationElement16);
            function StampAnnotationElement(parameters) {
                _classCallCheck(this, StampAnnotationElement);
                var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
                return _possibleConstructorReturn(this, _getPrototypeOf(StampAnnotationElement).call(this, parameters, isRenderable, true));
            }
            _createClass(StampAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "stampAnnotation";
                    if (!this.data.hasPopup) {
                        this._createPopup(this.container, null, this.data);
                    }
                    return this.container;
                }
            } ]);
            return StampAnnotationElement;
        }(AnnotationElement);
        var FileAttachmentAnnotationElement = function(_AnnotationElement17) {
            _inherits(FileAttachmentAnnotationElement, _AnnotationElement17);
            function FileAttachmentAnnotationElement(parameters) {
                var _this6;
                _classCallCheck(this, FileAttachmentAnnotationElement);
                _this6 = _possibleConstructorReturn(this, _getPrototypeOf(FileAttachmentAnnotationElement).call(this, parameters, true));
                var _this6$data$file = _this6.data.file, filename = _this6$data$file.filename, content = _this6$data$file.content;
                _this6.filename = (0, _display_utils.getFilenameFromUrl)(filename);
                _this6.content = content;
                if (_this6.linkService.eventBus) {
                    _this6.linkService.eventBus.dispatch("fileattachmentannotation", {
                        source: _assertThisInitialized(_this6),
                        id: (0, _util.stringToPDFString)(filename),
                        filename: filename,
                        content: content
                    });
                }
                return _this6;
            }
            _createClass(FileAttachmentAnnotationElement, [ {
                key: "render",
                value: function render() {
                    this.container.className = "fileAttachmentAnnotation";
                    var trigger = document.createElement("div");
                    trigger.style.height = this.container.style.height;
                    trigger.style.width = this.container.style.width;
                    trigger.addEventListener("dblclick", this._download.bind(this));
                    if (!this.data.hasPopup && (this.data.title || this.data.contents)) {
                        this._createPopup(this.container, trigger, this.data);
                    }
                    this.container.appendChild(trigger);
                    return this.container;
                }
            }, {
                key: "_download",
                value: function _download() {
                    if (!this.downloadManager) {
                        (0, _util.warn)("Download cannot be started due to unavailable download manager");
                        return;
                    }
                    this.downloadManager.downloadData(this.content, this.filename, "");
                }
            } ]);
            return FileAttachmentAnnotationElement;
        }(AnnotationElement);
        var AnnotationLayer = function() {
            function AnnotationLayer() {
                _classCallCheck(this, AnnotationLayer);
            }
            _createClass(AnnotationLayer, null, [ {
                key: "render",
                value: function render(parameters) {
                    for (var i = 0, ii = parameters.annotations.length; i < ii; i++) {
                        var data = parameters.annotations[i];
                        if (!data) {
                            continue;
                        }
                        var element = AnnotationElementFactory.create({
                            data: data,
                            layer: parameters.div,
                            page: parameters.page,
                            viewport: parameters.viewport,
                            linkService: parameters.linkService,
                            downloadManager: parameters.downloadManager,
                            imageResourcesPath: parameters.imageResourcesPath || "",
                            renderInteractiveForms: parameters.renderInteractiveForms || false,
                            svgFactory: new _display_utils.DOMSVGFactory()
                        });
                        if (element.isRenderable) {
                            parameters.div.appendChild(element.render());
                        }
                    }
                }
            }, {
                key: "update",
                value: function update(parameters) {
                    for (var i = 0, ii = parameters.annotations.length; i < ii; i++) {
                        var data = parameters.annotations[i];
                        var element = parameters.div.querySelector('[data-annotation-id="' + data.id + '"]');
                        if (element) {
                            element.style.transform = "matrix(" + parameters.viewport.transform.join(",") + ")";
                        }
                    }
                    parameters.div.removeAttribute("hidden");
                }
            } ]);
            return AnnotationLayer;
        }();
        exports.AnnotationLayer = AnnotationLayer;
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SVGGraphics = void 0;
        var _util = __w_pdfjs_require__(1);
        var _display_utils = __w_pdfjs_require__(151);
        var _is_node = _interopRequireDefault(__w_pdfjs_require__(4));
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
        }
        function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
        function _iterableToArrayLimit(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
        function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var SVGGraphics = function SVGGraphics() {
            throw new Error("Not implemented: SVGGraphics");
        };
        exports.SVGGraphics = SVGGraphics;
        {
            var opListToTree = function opListToTree(opList) {
                var opTree = [];
                var tmp = [];
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = opList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var opListElement = _step.value;
                        if (opListElement.fn === "save") {
                            opTree.push({
                                fnId: 92,
                                fn: "group",
                                items: []
                            });
                            tmp.push(opTree);
                            opTree = opTree[opTree.length - 1].items;
                            continue;
                        }
                        if (opListElement.fn === "restore") {
                            opTree = tmp.pop();
                        } else {
                            opTree.push(opListElement);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                            _iterator["return"]();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return opTree;
            };
            var pf = function pf(value) {
                if (Number.isInteger(value)) {
                    return value.toString();
                }
                var s = value.toFixed(10);
                var i = s.length - 1;
                if (s[i] !== "0") {
                    return s;
                }
                do {
                    i--;
                } while (s[i] === "0");
                return s.substring(0, s[i] === "." ? i : i + 1);
            };
            var pm = function pm(m) {
                if (m[4] === 0 && m[5] === 0) {
                    if (m[1] === 0 && m[2] === 0) {
                        if (m[0] === 1 && m[3] === 1) {
                            return "";
                        }
                        return "scale(".concat(pf(m[0]), " ").concat(pf(m[3]), ")");
                    }
                    if (m[0] === m[3] && m[1] === -m[2]) {
                        var a = Math.acos(m[0]) * 180 / Math.PI;
                        return "rotate(".concat(pf(a), ")");
                    }
                } else {
                    if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
                        return "translate(".concat(pf(m[4]), " ").concat(pf(m[5]), ")");
                    }
                }
                return "matrix(".concat(pf(m[0]), " ").concat(pf(m[1]), " ").concat(pf(m[2]), " ").concat(pf(m[3]), " ").concat(pf(m[4]), " ") + "".concat(pf(m[5]), ")");
            };
            var SVG_DEFAULTS = {
                fontStyle: "normal",
                fontWeight: "normal",
                fillColor: "#000000"
            };
            var XML_NS = "http://www.w3.org/XML/1998/namespace";
            var XLINK_NS = "http://www.w3.org/1999/xlink";
            var LINE_CAP_STYLES = [ "butt", "round", "square" ];
            var LINE_JOIN_STYLES = [ "miter", "round", "bevel" ];
            var convertImgDataToPng = function() {
                var PNG_HEADER = new Uint8Array([ 137, 80, 78, 71, 13, 10, 26, 10 ]);
                var CHUNK_WRAPPER_SIZE = 12;
                var crcTable = new Int32Array(256);
                for (var i = 0; i < 256; i++) {
                    var c = i;
                    for (var h = 0; h < 8; h++) {
                        if (c & 1) {
                            c = 3988292384 ^ c >> 1 & 2147483647;
                        } else {
                            c = c >> 1 & 2147483647;
                        }
                    }
                    crcTable[i] = c;
                }
                function crc32(data, start, end) {
                    var crc = -1;
                    for (var _i = start; _i < end; _i++) {
                        var a = (crc ^ data[_i]) & 255;
                        var b = crcTable[a];
                        crc = crc >>> 8 ^ b;
                    }
                    return crc ^ -1;
                }
                function writePngChunk(type, body, data, offset) {
                    var p = offset;
                    var len = body.length;
                    data[p] = len >> 24 & 255;
                    data[p + 1] = len >> 16 & 255;
                    data[p + 2] = len >> 8 & 255;
                    data[p + 3] = len & 255;
                    p += 4;
                    data[p] = type.charCodeAt(0) & 255;
                    data[p + 1] = type.charCodeAt(1) & 255;
                    data[p + 2] = type.charCodeAt(2) & 255;
                    data[p + 3] = type.charCodeAt(3) & 255;
                    p += 4;
                    data.set(body, p);
                    p += body.length;
                    var crc = crc32(data, offset + 4, p);
                    data[p] = crc >> 24 & 255;
                    data[p + 1] = crc >> 16 & 255;
                    data[p + 2] = crc >> 8 & 255;
                    data[p + 3] = crc & 255;
                }
                function adler32(data, start, end) {
                    var a = 1;
                    var b = 0;
                    for (var _i2 = start; _i2 < end; ++_i2) {
                        a = (a + (data[_i2] & 255)) % 65521;
                        b = (b + a) % 65521;
                    }
                    return b << 16 | a;
                }
                function deflateSync(literals) {
                    if (!(0, _is_node["default"])()) {
                        return deflateSyncUncompressed(literals);
                    }
                    try {
                        var input;
                        if (parseInt(process.versions.node) >= 8) {
                            input = literals;
                        } else {
                            input = new Buffer(literals);
                        }
                        var output = require("zlib").deflateSync(input, {
                            level: 9
                        });
                        return output instanceof Uint8Array ? output : new Uint8Array(output);
                    } catch (e) {
                        (0, _util.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + e);
                    }
                    return deflateSyncUncompressed(literals);
                }
                function deflateSyncUncompressed(literals) {
                    var len = literals.length;
                    var maxBlockLength = 65535;
                    var deflateBlocks = Math.ceil(len / maxBlockLength);
                    var idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
                    var pi = 0;
                    idat[pi++] = 120;
                    idat[pi++] = 156;
                    var pos = 0;
                    while (len > maxBlockLength) {
                        idat[pi++] = 0;
                        idat[pi++] = 255;
                        idat[pi++] = 255;
                        idat[pi++] = 0;
                        idat[pi++] = 0;
                        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
                        pi += maxBlockLength;
                        pos += maxBlockLength;
                        len -= maxBlockLength;
                    }
                    idat[pi++] = 1;
                    idat[pi++] = len & 255;
                    idat[pi++] = len >> 8 & 255;
                    idat[pi++] = ~len & 65535 & 255;
                    idat[pi++] = (~len & 65535) >> 8 & 255;
                    idat.set(literals.subarray(pos), pi);
                    pi += literals.length - pos;
                    var adler = adler32(literals, 0, literals.length);
                    idat[pi++] = adler >> 24 & 255;
                    idat[pi++] = adler >> 16 & 255;
                    idat[pi++] = adler >> 8 & 255;
                    idat[pi++] = adler & 255;
                    return idat;
                }
                function encode(imgData, kind, forceDataSchema, isMask) {
                    var width = imgData.width;
                    var height = imgData.height;
                    var bitDepth, colorType, lineSize;
                    var bytes = imgData.data;
                    switch (kind) {
                      case _util.ImageKind.GRAYSCALE_1BPP:
                        colorType = 0;
                        bitDepth = 1;
                        lineSize = width + 7 >> 3;
                        break;

                      case _util.ImageKind.RGB_24BPP:
                        colorType = 2;
                        bitDepth = 8;
                        lineSize = width * 3;
                        break;

                      case _util.ImageKind.RGBA_32BPP:
                        colorType = 6;
                        bitDepth = 8;
                        lineSize = width * 4;
                        break;

                      default:
                        throw new Error("invalid format");
                    }
                    var literals = new Uint8Array((1 + lineSize) * height);
                    var offsetLiterals = 0, offsetBytes = 0;
                    for (var y = 0; y < height; ++y) {
                        literals[offsetLiterals++] = 0;
                        literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
                        offsetBytes += lineSize;
                        offsetLiterals += lineSize;
                    }
                    if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {
                        offsetLiterals = 0;
                        for (var _y = 0; _y < height; _y++) {
                            offsetLiterals++;
                            for (var _i3 = 0; _i3 < lineSize; _i3++) {
                                literals[offsetLiterals++] ^= 255;
                            }
                        }
                    }
                    var ihdr = new Uint8Array([ width >> 24 & 255, width >> 16 & 255, width >> 8 & 255, width & 255, height >> 24 & 255, height >> 16 & 255, height >> 8 & 255, height & 255, bitDepth, colorType, 0, 0, 0 ]);
                    var idat = deflateSync(literals);
                    var pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
                    var data = new Uint8Array(pngLength);
                    var offset = 0;
                    data.set(PNG_HEADER, offset);
                    offset += PNG_HEADER.length;
                    writePngChunk("IHDR", ihdr, data, offset);
                    offset += CHUNK_WRAPPER_SIZE + ihdr.length;
                    writePngChunk("IDATA", idat, data, offset);
                    offset += CHUNK_WRAPPER_SIZE + idat.length;
                    writePngChunk("IEND", new Uint8Array(0), data, offset);
                    return (0, _util.createObjectURL)(data, "image/png", forceDataSchema);
                }
                return function convertImgDataToPng(imgData, forceDataSchema, isMask) {
                    var kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;
                    return encode(imgData, kind, forceDataSchema, isMask);
                };
            }();
            var SVGExtraState = function() {
                function SVGExtraState() {
                    _classCallCheck(this, SVGExtraState);
                    this.fontSizeScale = 1;
                    this.fontWeight = SVG_DEFAULTS.fontWeight;
                    this.fontSize = 0;
                    this.textMatrix = _util.IDENTITY_MATRIX;
                    this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
                    this.leading = 0;
                    this.textRenderingMode = _util.TextRenderingMode.FILL;
                    this.textMatrixScale = 1;
                    this.x = 0;
                    this.y = 0;
                    this.lineX = 0;
                    this.lineY = 0;
                    this.charSpacing = 0;
                    this.wordSpacing = 0;
                    this.textHScale = 1;
                    this.textRise = 0;
                    this.fillColor = SVG_DEFAULTS.fillColor;
                    this.strokeColor = "#000000";
                    this.fillAlpha = 1;
                    this.strokeAlpha = 1;
                    this.lineWidth = 1;
                    this.lineJoin = "";
                    this.lineCap = "";
                    this.miterLimit = 0;
                    this.dashArray = [];
                    this.dashPhase = 0;
                    this.dependencies = [];
                    this.activeClipUrl = null;
                    this.clipGroup = null;
                    this.maskId = "";
                }
                _createClass(SVGExtraState, [ {
                    key: "clone",
                    value: function clone() {
                        return Object.create(this);
                    }
                }, {
                    key: "setCurrentPoint",
                    value: function setCurrentPoint(x, y) {
                        this.x = x;
                        this.y = y;
                    }
                } ]);
                return SVGExtraState;
            }();
            var clipCount = 0;
            var maskCount = 0;
            var shadingCount = 0;
            exports.SVGGraphics = SVGGraphics = function() {
                function SVGGraphics(commonObjs, objs, forceDataSchema) {
                    _classCallCheck(this, SVGGraphics);
                    this.svgFactory = new _display_utils.DOMSVGFactory();
                    this.current = new SVGExtraState();
                    this.transformMatrix = _util.IDENTITY_MATRIX;
                    this.transformStack = [];
                    this.extraStack = [];
                    this.commonObjs = commonObjs;
                    this.objs = objs;
                    this.pendingClip = null;
                    this.pendingEOFill = false;
                    this.embedFonts = false;
                    this.embeddedFonts = Object.create(null);
                    this.cssStyle = null;
                    this.forceDataSchema = !!forceDataSchema;
                    this._operatorIdMapping = [];
                    for (var op in _util.OPS) {
                        this._operatorIdMapping[_util.OPS[op]] = op;
                    }
                }
                _createClass(SVGGraphics, [ {
                    key: "save",
                    value: function save() {
                        this.transformStack.push(this.transformMatrix);
                        var old = this.current;
                        this.extraStack.push(old);
                        this.current = old.clone();
                    }
                }, {
                    key: "restore",
                    value: function restore() {
                        this.transformMatrix = this.transformStack.pop();
                        this.current = this.extraStack.pop();
                        this.pendingClip = null;
                        this.tgrp = null;
                    }
                }, {
                    key: "group",
                    value: function group(items) {
                        this.save();
                        this.executeOpTree(items);
                        this.restore();
                    }
                }, {
                    key: "loadDependencies",
                    value: function loadDependencies(operatorList) {
                        var _this = this;
                        var fnArray = operatorList.fnArray;
                        var argsArray = operatorList.argsArray;
                        for (var i = 0, ii = fnArray.length; i < ii; i++) {
                            if (fnArray[i] !== _util.OPS.dependency) {
                                continue;
                            }
                            var _iteratorNormalCompletion2 = true;
                            var _didIteratorError2 = false;
                            var _iteratorError2 = undefined;
                            try {
                                var _loop = function _loop() {
                                    var obj = _step2.value;
                                    var objsPool = obj.startsWith("g_") ? _this.commonObjs : _this.objs;
                                    var promise = new Promise(function(resolve) {
                                        objsPool.get(obj, resolve);
                                    });
                                    _this.current.dependencies.push(promise);
                                };
                                for (var _iterator2 = argsArray[i][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                    _loop();
                                }
                            } catch (err) {
                                _didIteratorError2 = true;
                                _iteratorError2 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                                        _iterator2["return"]();
                                    }
                                } finally {
                                    if (_didIteratorError2) {
                                        throw _iteratorError2;
                                    }
                                }
                            }
                        }
                        return Promise.all(this.current.dependencies);
                    }
                }, {
                    key: "transform",
                    value: function transform(a, b, c, d, e, f) {
                        var transformMatrix = [ a, b, c, d, e, f ];
                        this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);
                        this.tgrp = null;
                    }
                }, {
                    key: "getSVG",
                    value: function getSVG(operatorList, viewport) {
                        var _this2 = this;
                        this.viewport = viewport;
                        var svgElement = this._initialize(viewport);
                        return this.loadDependencies(operatorList).then(function() {
                            _this2.transformMatrix = _util.IDENTITY_MATRIX;
                            _this2.executeOpTree(_this2.convertOpList(operatorList));
                            return svgElement;
                        });
                    }
                }, {
                    key: "convertOpList",
                    value: function convertOpList(operatorList) {
                        var operatorIdMapping = this._operatorIdMapping;
                        var argsArray = operatorList.argsArray;
                        var fnArray = operatorList.fnArray;
                        var opList = [];
                        for (var i = 0, ii = fnArray.length; i < ii; i++) {
                            var fnId = fnArray[i];
                            opList.push({
                                fnId: fnId,
                                fn: operatorIdMapping[fnId],
                                args: argsArray[i]
                            });
                        }
                        return opListToTree(opList);
                    }
                }, {
                    key: "executeOpTree",
                    value: function executeOpTree(opTree) {
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;
                        try {
                            for (var _iterator3 = opTree[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                var opTreeElement = _step3.value;
                                var fn = opTreeElement.fn;
                                var fnId = opTreeElement.fnId;
                                var args = opTreeElement.args;
                                switch (fnId | 0) {
                                  case _util.OPS.beginText:
                                    this.beginText();
                                    break;

                                  case _util.OPS.dependency:
                                    break;

                                  case _util.OPS.setLeading:
                                    this.setLeading(args);
                                    break;

                                  case _util.OPS.setLeadingMoveText:
                                    this.setLeadingMoveText(args[0], args[1]);
                                    break;

                                  case _util.OPS.setFont:
                                    this.setFont(args);
                                    break;

                                  case _util.OPS.showText:
                                    this.showText(args[0]);
                                    break;

                                  case _util.OPS.showSpacedText:
                                    this.showText(args[0]);
                                    break;

                                  case _util.OPS.endText:
                                    this.endText();
                                    break;

                                  case _util.OPS.moveText:
                                    this.moveText(args[0], args[1]);
                                    break;

                                  case _util.OPS.setCharSpacing:
                                    this.setCharSpacing(args[0]);
                                    break;

                                  case _util.OPS.setWordSpacing:
                                    this.setWordSpacing(args[0]);
                                    break;

                                  case _util.OPS.setHScale:
                                    this.setHScale(args[0]);
                                    break;

                                  case _util.OPS.setTextMatrix:
                                    this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                                    break;

                                  case _util.OPS.setTextRise:
                                    this.setTextRise(args[0]);
                                    break;

                                  case _util.OPS.setTextRenderingMode:
                                    this.setTextRenderingMode(args[0]);
                                    break;

                                  case _util.OPS.setLineWidth:
                                    this.setLineWidth(args[0]);
                                    break;

                                  case _util.OPS.setLineJoin:
                                    this.setLineJoin(args[0]);
                                    break;

                                  case _util.OPS.setLineCap:
                                    this.setLineCap(args[0]);
                                    break;

                                  case _util.OPS.setMiterLimit:
                                    this.setMiterLimit(args[0]);
                                    break;

                                  case _util.OPS.setFillRGBColor:
                                    this.setFillRGBColor(args[0], args[1], args[2]);
                                    break;

                                  case _util.OPS.setStrokeRGBColor:
                                    this.setStrokeRGBColor(args[0], args[1], args[2]);
                                    break;

                                  case _util.OPS.setStrokeColorN:
                                    this.setStrokeColorN(args);
                                    break;

                                  case _util.OPS.setFillColorN:
                                    this.setFillColorN(args);
                                    break;

                                  case _util.OPS.shadingFill:
                                    this.shadingFill(args[0]);
                                    break;

                                  case _util.OPS.setDash:
                                    this.setDash(args[0], args[1]);
                                    break;

                                  case _util.OPS.setRenderingIntent:
                                    this.setRenderingIntent(args[0]);
                                    break;

                                  case _util.OPS.setFlatness:
                                    this.setFlatness(args[0]);
                                    break;

                                  case _util.OPS.setGState:
                                    this.setGState(args[0]);
                                    break;

                                  case _util.OPS.fill:
                                    this.fill();
                                    break;

                                  case _util.OPS.eoFill:
                                    this.eoFill();
                                    break;

                                  case _util.OPS.stroke:
                                    this.stroke();
                                    break;

                                  case _util.OPS.fillStroke:
                                    this.fillStroke();
                                    break;

                                  case _util.OPS.eoFillStroke:
                                    this.eoFillStroke();
                                    break;

                                  case _util.OPS.clip:
                                    this.clip("nonzero");
                                    break;

                                  case _util.OPS.eoClip:
                                    this.clip("evenodd");
                                    break;

                                  case _util.OPS.paintSolidColorImageMask:
                                    this.paintSolidColorImageMask();
                                    break;

                                  case _util.OPS.paintJpegXObject:
                                    this.paintJpegXObject(args[0], args[1], args[2]);
                                    break;

                                  case _util.OPS.paintImageXObject:
                                    this.paintImageXObject(args[0]);
                                    break;

                                  case _util.OPS.paintInlineImageXObject:
                                    this.paintInlineImageXObject(args[0]);
                                    break;

                                  case _util.OPS.paintImageMaskXObject:
                                    this.paintImageMaskXObject(args[0]);
                                    break;

                                  case _util.OPS.paintFormXObjectBegin:
                                    this.paintFormXObjectBegin(args[0], args[1]);
                                    break;

                                  case _util.OPS.paintFormXObjectEnd:
                                    this.paintFormXObjectEnd();
                                    break;

                                  case _util.OPS.closePath:
                                    this.closePath();
                                    break;

                                  case _util.OPS.closeStroke:
                                    this.closeStroke();
                                    break;

                                  case _util.OPS.closeFillStroke:
                                    this.closeFillStroke();
                                    break;

                                  case _util.OPS.closeEOFillStroke:
                                    this.closeEOFillStroke();
                                    break;

                                  case _util.OPS.nextLine:
                                    this.nextLine();
                                    break;

                                  case _util.OPS.transform:
                                    this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
                                    break;

                                  case _util.OPS.constructPath:
                                    this.constructPath(args[0], args[1]);
                                    break;

                                  case _util.OPS.endPath:
                                    this.endPath();
                                    break;

                                  case 92:
                                    this.group(opTreeElement.items);
                                    break;

                                  default:
                                    (0, _util.warn)("Unimplemented operator ".concat(fn));
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                                    _iterator3["return"]();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }
                    }
                }, {
                    key: "setWordSpacing",
                    value: function setWordSpacing(wordSpacing) {
                        this.current.wordSpacing = wordSpacing;
                    }
                }, {
                    key: "setCharSpacing",
                    value: function setCharSpacing(charSpacing) {
                        this.current.charSpacing = charSpacing;
                    }
                }, {
                    key: "nextLine",
                    value: function nextLine() {
                        this.moveText(0, this.current.leading);
                    }
                }, {
                    key: "setTextMatrix",
                    value: function setTextMatrix(a, b, c, d, e, f) {
                        var current = this.current;
                        current.textMatrix = current.lineMatrix = [ a, b, c, d, e, f ];
                        current.textMatrixScale = Math.sqrt(a * a + b * b);
                        current.x = current.lineX = 0;
                        current.y = current.lineY = 0;
                        current.xcoords = [];
                        current.tspan = this.svgFactory.createElement("svg:tspan");
                        current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                        current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                        current.tspan.setAttributeNS(null, "y", pf(-current.y));
                        current.txtElement = this.svgFactory.createElement("svg:text");
                        current.txtElement.appendChild(current.tspan);
                    }
                }, {
                    key: "beginText",
                    value: function beginText() {
                        var current = this.current;
                        current.x = current.lineX = 0;
                        current.y = current.lineY = 0;
                        current.textMatrix = _util.IDENTITY_MATRIX;
                        current.lineMatrix = _util.IDENTITY_MATRIX;
                        current.textMatrixScale = 1;
                        current.tspan = this.svgFactory.createElement("svg:tspan");
                        current.txtElement = this.svgFactory.createElement("svg:text");
                        current.txtgrp = this.svgFactory.createElement("svg:g");
                        current.xcoords = [];
                    }
                }, {
                    key: "moveText",
                    value: function moveText(x, y) {
                        var current = this.current;
                        current.x = current.lineX += x;
                        current.y = current.lineY += y;
                        current.xcoords = [];
                        current.tspan = this.svgFactory.createElement("svg:tspan");
                        current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                        current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                        current.tspan.setAttributeNS(null, "y", pf(-current.y));
                    }
                }, {
                    key: "showText",
                    value: function showText(glyphs) {
                        var current = this.current;
                        var font = current.font;
                        var fontSize = current.fontSize;
                        if (fontSize === 0) {
                            return;
                        }
                        var charSpacing = current.charSpacing;
                        var wordSpacing = current.wordSpacing;
                        var fontDirection = current.fontDirection;
                        var textHScale = current.textHScale * fontDirection;
                        var vertical = font.vertical;
                        var widthAdvanceScale = fontSize * current.fontMatrix[0];
                        var x = 0;
                        var _iteratorNormalCompletion4 = true;
                        var _didIteratorError4 = false;
                        var _iteratorError4 = undefined;
                        try {
                            for (var _iterator4 = glyphs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                var glyph = _step4.value;
                                if (glyph === null) {
                                    x += fontDirection * wordSpacing;
                                    continue;
                                } else if ((0, _util.isNum)(glyph)) {
                                    x += -glyph * fontSize * .001;
                                    continue;
                                }
                                var width = glyph.width;
                                var character = glyph.fontChar;
                                var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                                var charWidth = width * widthAdvanceScale + spacing * fontDirection;
                                if (!glyph.isInFont && !font.missingFile) {
                                    x += charWidth;
                                    continue;
                                }
                                current.xcoords.push(current.x + x * textHScale);
                                current.tspan.textContent += character;
                                x += charWidth;
                            }
                        } catch (err) {
                            _didIteratorError4 = true;
                            _iteratorError4 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                                    _iterator4["return"]();
                                }
                            } finally {
                                if (_didIteratorError4) {
                                    throw _iteratorError4;
                                }
                            }
                        }
                        if (vertical) {
                            current.y -= x * textHScale;
                        } else {
                            current.x += x * textHScale;
                        }
                        current.tspan.setAttributeNS(null, "x", current.xcoords.map(pf).join(" "));
                        current.tspan.setAttributeNS(null, "y", pf(-current.y));
                        current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                        current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                        if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
                            current.tspan.setAttributeNS(null, "font-style", current.fontStyle);
                        }
                        if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
                            current.tspan.setAttributeNS(null, "font-weight", current.fontWeight);
                        }
                        var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
                        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                            if (current.fillColor !== SVG_DEFAULTS.fillColor) {
                                current.tspan.setAttributeNS(null, "fill", current.fillColor);
                            }
                            if (current.fillAlpha < 1) {
                                current.tspan.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                            }
                        } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {
                            current.tspan.setAttributeNS(null, "fill", "transparent");
                        } else {
                            current.tspan.setAttributeNS(null, "fill", "none");
                        }
                        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                            var lineWidthScale = 1 / (current.textMatrixScale || 1);
                            this._setStrokeAttributes(current.tspan, lineWidthScale);
                        }
                        var textMatrix = current.textMatrix;
                        if (current.textRise !== 0) {
                            textMatrix = textMatrix.slice();
                            textMatrix[5] += current.textRise;
                        }
                        current.txtElement.setAttributeNS(null, "transform", "".concat(pm(textMatrix), " scale(1, -1)"));
                        current.txtElement.setAttributeNS(XML_NS, "xml:space", "preserve");
                        current.txtElement.appendChild(current.tspan);
                        current.txtgrp.appendChild(current.txtElement);
                        this._ensureTransformGroup().appendChild(current.txtElement);
                    }
                }, {
                    key: "setLeadingMoveText",
                    value: function setLeadingMoveText(x, y) {
                        this.setLeading(-y);
                        this.moveText(x, y);
                    }
                }, {
                    key: "addFontStyle",
                    value: function addFontStyle(fontObj) {
                        if (!this.cssStyle) {
                            this.cssStyle = this.svgFactory.createElement("svg:style");
                            this.cssStyle.setAttributeNS(null, "type", "text/css");
                            this.defs.appendChild(this.cssStyle);
                        }
                        var url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);
                        this.cssStyle.textContent += '@font-face { font-family: "'.concat(fontObj.loadedName, '";') + " src: url(".concat(url, "); }\n");
                    }
                }, {
                    key: "setFont",
                    value: function setFont(details) {
                        var current = this.current;
                        var fontObj = this.commonObjs.get(details[0]);
                        var size = details[1];
                        current.font = fontObj;
                        if (this.embedFonts && fontObj.data && !this.embeddedFonts[fontObj.loadedName]) {
                            this.addFontStyle(fontObj);
                            this.embeddedFonts[fontObj.loadedName] = fontObj;
                        }
                        current.fontMatrix = fontObj.fontMatrix ? fontObj.fontMatrix : _util.FONT_IDENTITY_MATRIX;
                        var bold = fontObj.black ? fontObj.bold ? "bolder" : "bold" : fontObj.bold ? "bold" : "normal";
                        var italic = fontObj.italic ? "italic" : "normal";
                        if (size < 0) {
                            size = -size;
                            current.fontDirection = -1;
                        } else {
                            current.fontDirection = 1;
                        }
                        current.fontSize = size;
                        current.fontFamily = fontObj.loadedName;
                        current.fontWeight = bold;
                        current.fontStyle = italic;
                        current.tspan = this.svgFactory.createElement("svg:tspan");
                        current.tspan.setAttributeNS(null, "y", pf(-current.y));
                        current.xcoords = [];
                    }
                }, {
                    key: "endText",
                    value: function endText() {
                        var current = this.current;
                        if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement && current.txtElement.hasChildNodes()) {
                            current.element = current.txtElement;
                            this.clip("nonzero");
                            this.endPath();
                        }
                    }
                }, {
                    key: "setLineWidth",
                    value: function setLineWidth(width) {
                        if (width > 0) {
                            this.current.lineWidth = width;
                        }
                    }
                }, {
                    key: "setLineCap",
                    value: function setLineCap(style) {
                        this.current.lineCap = LINE_CAP_STYLES[style];
                    }
                }, {
                    key: "setLineJoin",
                    value: function setLineJoin(style) {
                        this.current.lineJoin = LINE_JOIN_STYLES[style];
                    }
                }, {
                    key: "setMiterLimit",
                    value: function setMiterLimit(limit) {
                        this.current.miterLimit = limit;
                    }
                }, {
                    key: "setStrokeAlpha",
                    value: function setStrokeAlpha(strokeAlpha) {
                        this.current.strokeAlpha = strokeAlpha;
                    }
                }, {
                    key: "setStrokeRGBColor",
                    value: function setStrokeRGBColor(r, g, b) {
                        this.current.strokeColor = _util.Util.makeCssRgb(r, g, b);
                    }
                }, {
                    key: "setFillAlpha",
                    value: function setFillAlpha(fillAlpha) {
                        this.current.fillAlpha = fillAlpha;
                    }
                }, {
                    key: "setFillRGBColor",
                    value: function setFillRGBColor(r, g, b) {
                        this.current.fillColor = _util.Util.makeCssRgb(r, g, b);
                        this.current.tspan = this.svgFactory.createElement("svg:tspan");
                        this.current.xcoords = [];
                    }
                }, {
                    key: "setStrokeColorN",
                    value: function setStrokeColorN(args) {
                        this.current.strokeColor = this._makeColorN_Pattern(args);
                    }
                }, {
                    key: "setFillColorN",
                    value: function setFillColorN(args) {
                        this.current.fillColor = this._makeColorN_Pattern(args);
                    }
                }, {
                    key: "shadingFill",
                    value: function shadingFill(args) {
                        var width = this.viewport.width;
                        var height = this.viewport.height;
                        var inv = _util.Util.inverseTransform(this.transformMatrix);
                        var bl = _util.Util.applyTransform([ 0, 0 ], inv);
                        var br = _util.Util.applyTransform([ 0, height ], inv);
                        var ul = _util.Util.applyTransform([ width, 0 ], inv);
                        var ur = _util.Util.applyTransform([ width, height ], inv);
                        var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
                        var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
                        var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
                        var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
                        var rect = this.svgFactory.createElement("svg:rect");
                        rect.setAttributeNS(null, "x", x0);
                        rect.setAttributeNS(null, "y", y0);
                        rect.setAttributeNS(null, "width", x1 - x0);
                        rect.setAttributeNS(null, "height", y1 - y0);
                        rect.setAttributeNS(null, "fill", this._makeShadingPattern(args));
                        this._ensureTransformGroup().appendChild(rect);
                    }
                }, {
                    key: "_makeColorN_Pattern",
                    value: function _makeColorN_Pattern(args) {
                        if (args[0] === "TilingPattern") {
                            (0, _util.warn)("Unimplemented pattern TilingPattern");
                            return null;
                        }
                        return this._makeShadingPattern(args);
                    }
                }, {
                    key: "_makeShadingPattern",
                    value: function _makeShadingPattern(args) {
                        switch (args[0]) {
                          case "RadialAxial":
                            var shadingId = "shading".concat(shadingCount++);
                            var colorStops = args[2];
                            var gradient;
                            switch (args[1]) {
                              case "axial":
                                var point0 = args[3];
                                var point1 = args[4];
                                gradient = this.svgFactory.createElement("svg:linearGradient");
                                gradient.setAttributeNS(null, "id", shadingId);
                                gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                                gradient.setAttributeNS(null, "x1", point0[0]);
                                gradient.setAttributeNS(null, "y1", point0[1]);
                                gradient.setAttributeNS(null, "x2", point1[0]);
                                gradient.setAttributeNS(null, "y2", point1[1]);
                                break;

                              case "radial":
                                var focalPoint = args[3];
                                var circlePoint = args[4];
                                var focalRadius = args[5];
                                var circleRadius = args[6];
                                gradient = this.svgFactory.createElement("svg:radialGradient");
                                gradient.setAttributeNS(null, "id", shadingId);
                                gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                                gradient.setAttributeNS(null, "cx", circlePoint[0]);
                                gradient.setAttributeNS(null, "cy", circlePoint[1]);
                                gradient.setAttributeNS(null, "r", circleRadius);
                                gradient.setAttributeNS(null, "fx", focalPoint[0]);
                                gradient.setAttributeNS(null, "fy", focalPoint[1]);
                                gradient.setAttributeNS(null, "fr", focalRadius);
                                break;

                              default:
                                throw new Error("Unknown RadialAxial type: ".concat(args[1]));
                            }
                            var _iteratorNormalCompletion5 = true;
                            var _didIteratorError5 = false;
                            var _iteratorError5 = undefined;
                            try {
                                for (var _iterator5 = colorStops[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                    var colorStop = _step5.value;
                                    var stop = this.svgFactory.createElement("svg:stop");
                                    stop.setAttributeNS(null, "offset", colorStop[0]);
                                    stop.setAttributeNS(null, "stop-color", colorStop[1]);
                                    gradient.appendChild(stop);
                                }
                            } catch (err) {
                                _didIteratorError5 = true;
                                _iteratorError5 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                                        _iterator5["return"]();
                                    }
                                } finally {
                                    if (_didIteratorError5) {
                                        throw _iteratorError5;
                                    }
                                }
                            }
                            this.defs.appendChild(gradient);
                            return "url(#".concat(shadingId, ")");

                          case "Mesh":
                            (0, _util.warn)("Unimplemented pattern Mesh");
                            return null;

                          case "Dummy":
                            return "hotpink";

                          default:
                            throw new Error("Unknown IR type: ".concat(args[0]));
                        }
                    }
                }, {
                    key: "setDash",
                    value: function setDash(dashArray, dashPhase) {
                        this.current.dashArray = dashArray;
                        this.current.dashPhase = dashPhase;
                    }
                }, {
                    key: "constructPath",
                    value: function constructPath(ops, args) {
                        var current = this.current;
                        var x = current.x, y = current.y;
                        var d = [];
                        var j = 0;
                        var _iteratorNormalCompletion6 = true;
                        var _didIteratorError6 = false;
                        var _iteratorError6 = undefined;
                        try {
                            for (var _iterator6 = ops[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                var op = _step6.value;
                                switch (op | 0) {
                                  case _util.OPS.rectangle:
                                    x = args[j++];
                                    y = args[j++];
                                    var width = args[j++];
                                    var height = args[j++];
                                    var xw = x + width;
                                    var yh = y + height;
                                    d.push("M", pf(x), pf(y), "L", pf(xw), pf(y), "L", pf(xw), pf(yh), "L", pf(x), pf(yh), "Z");
                                    break;

                                  case _util.OPS.moveTo:
                                    x = args[j++];
                                    y = args[j++];
                                    d.push("M", pf(x), pf(y));
                                    break;

                                  case _util.OPS.lineTo:
                                    x = args[j++];
                                    y = args[j++];
                                    d.push("L", pf(x), pf(y));
                                    break;

                                  case _util.OPS.curveTo:
                                    x = args[j + 4];
                                    y = args[j + 5];
                                    d.push("C", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
                                    j += 6;
                                    break;

                                  case _util.OPS.curveTo2:
                                    x = args[j + 2];
                                    y = args[j + 3];
                                    d.push("C", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
                                    j += 4;
                                    break;

                                  case _util.OPS.curveTo3:
                                    x = args[j + 2];
                                    y = args[j + 3];
                                    d.push("C", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
                                    j += 4;
                                    break;

                                  case _util.OPS.closePath:
                                    d.push("Z");
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError6 = true;
                            _iteratorError6 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                                    _iterator6["return"]();
                                }
                            } finally {
                                if (_didIteratorError6) {
                                    throw _iteratorError6;
                                }
                            }
                        }
                        d = d.join(" ");
                        if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {
                            d = current.path.getAttributeNS(null, "d") + d;
                        } else {
                            current.path = this.svgFactory.createElement("svg:path");
                            this._ensureTransformGroup().appendChild(current.path);
                        }
                        current.path.setAttributeNS(null, "d", d);
                        current.path.setAttributeNS(null, "fill", "none");
                        current.element = current.path;
                        current.setCurrentPoint(x, y);
                    }
                }, {
                    key: "endPath",
                    value: function endPath() {
                        var current = this.current;
                        current.path = null;
                        if (!this.pendingClip) {
                            return;
                        }
                        var clipId = "clippath".concat(clipCount++);
                        var clipPath = this.svgFactory.createElement("svg:clipPath");
                        clipPath.setAttributeNS(null, "id", clipId);
                        clipPath.setAttributeNS(null, "transform", pm(this.transformMatrix));
                        var clipElement = current.element.cloneNode(true);
                        if (this.pendingClip === "evenodd") {
                            clipElement.setAttributeNS(null, "clip-rule", "evenodd");
                        } else {
                            clipElement.setAttributeNS(null, "clip-rule", "nonzero");
                        }
                        this.pendingClip = null;
                        clipPath.appendChild(clipElement);
                        this.defs.appendChild(clipPath);
                        if (current.activeClipUrl) {
                            current.clipGroup = null;
                            this.extraStack.forEach(function(prev) {
                                prev.clipGroup = null;
                            });
                            clipPath.setAttributeNS(null, "clip-path", current.activeClipUrl);
                        }
                        current.activeClipUrl = "url(#".concat(clipId, ")");
                        this.tgrp = null;
                    }
                }, {
                    key: "clip",
                    value: function clip(type) {
                        this.pendingClip = type;
                    }
                }, {
                    key: "closePath",
                    value: function closePath() {
                        var current = this.current;
                        if (current.path) {
                            var d = "".concat(current.path.getAttributeNS(null, "d"), "Z");
                            current.path.setAttributeNS(null, "d", d);
                        }
                    }
                }, {
                    key: "setLeading",
                    value: function setLeading(leading) {
                        this.current.leading = -leading;
                    }
                }, {
                    key: "setTextRise",
                    value: function setTextRise(textRise) {
                        this.current.textRise = textRise;
                    }
                }, {
                    key: "setTextRenderingMode",
                    value: function setTextRenderingMode(textRenderingMode) {
                        this.current.textRenderingMode = textRenderingMode;
                    }
                }, {
                    key: "setHScale",
                    value: function setHScale(scale) {
                        this.current.textHScale = scale / 100;
                    }
                }, {
                    key: "setRenderingIntent",
                    value: function setRenderingIntent(intent) {}
                }, {
                    key: "setFlatness",
                    value: function setFlatness(flatness) {}
                }, {
                    key: "setGState",
                    value: function setGState(states) {
                        var _iteratorNormalCompletion7 = true;
                        var _didIteratorError7 = false;
                        var _iteratorError7 = undefined;
                        try {
                            for (var _iterator7 = states[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                var _step7$value = _slicedToArray(_step7.value, 2), key = _step7$value[0], value = _step7$value[1];
                                switch (key) {
                                  case "LW":
                                    this.setLineWidth(value);
                                    break;

                                  case "LC":
                                    this.setLineCap(value);
                                    break;

                                  case "LJ":
                                    this.setLineJoin(value);
                                    break;

                                  case "ML":
                                    this.setMiterLimit(value);
                                    break;

                                  case "D":
                                    this.setDash(value[0], value[1]);
                                    break;

                                  case "RI":
                                    this.setRenderingIntent(value);
                                    break;

                                  case "FL":
                                    this.setFlatness(value);
                                    break;

                                  case "Font":
                                    this.setFont(value);
                                    break;

                                  case "CA":
                                    this.setStrokeAlpha(value);
                                    break;

                                  case "ca":
                                    this.setFillAlpha(value);
                                    break;

                                  default:
                                    (0, _util.warn)("Unimplemented graphic state operator ".concat(key));
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError7 = true;
                            _iteratorError7 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                                    _iterator7["return"]();
                                }
                            } finally {
                                if (_didIteratorError7) {
                                    throw _iteratorError7;
                                }
                            }
                        }
                    }
                }, {
                    key: "fill",
                    value: function fill() {
                        var current = this.current;
                        if (current.element) {
                            current.element.setAttributeNS(null, "fill", current.fillColor);
                            current.element.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                            this.endPath();
                        }
                    }
                }, {
                    key: "stroke",
                    value: function stroke() {
                        var current = this.current;
                        if (current.element) {
                            this._setStrokeAttributes(current.element);
                            current.element.setAttributeNS(null, "fill", "none");
                            this.endPath();
                        }
                    }
                }, {
                    key: "_setStrokeAttributes",
                    value: function _setStrokeAttributes(element) {
                        var lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                        var current = this.current;
                        var dashArray = current.dashArray;
                        if (lineWidthScale !== 1 && dashArray.length > 0) {
                            dashArray = dashArray.map(function(value) {
                                return lineWidthScale * value;
                            });
                        }
                        element.setAttributeNS(null, "stroke", current.strokeColor);
                        element.setAttributeNS(null, "stroke-opacity", current.strokeAlpha);
                        element.setAttributeNS(null, "stroke-miterlimit", pf(current.miterLimit));
                        element.setAttributeNS(null, "stroke-linecap", current.lineCap);
                        element.setAttributeNS(null, "stroke-linejoin", current.lineJoin);
                        element.setAttributeNS(null, "stroke-width", pf(lineWidthScale * current.lineWidth) + "px");
                        element.setAttributeNS(null, "stroke-dasharray", dashArray.map(pf).join(" "));
                        element.setAttributeNS(null, "stroke-dashoffset", pf(lineWidthScale * current.dashPhase) + "px");
                    }
                }, {
                    key: "eoFill",
                    value: function eoFill() {
                        if (this.current.element) {
                            this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
                        }
                        this.fill();
                    }
                }, {
                    key: "fillStroke",
                    value: function fillStroke() {
                        this.stroke();
                        this.fill();
                    }
                }, {
                    key: "eoFillStroke",
                    value: function eoFillStroke() {
                        if (this.current.element) {
                            this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
                        }
                        this.fillStroke();
                    }
                }, {
                    key: "closeStroke",
                    value: function closeStroke() {
                        this.closePath();
                        this.stroke();
                    }
                }, {
                    key: "closeFillStroke",
                    value: function closeFillStroke() {
                        this.closePath();
                        this.fillStroke();
                    }
                }, {
                    key: "closeEOFillStroke",
                    value: function closeEOFillStroke() {
                        this.closePath();
                        this.eoFillStroke();
                    }
                }, {
                    key: "paintSolidColorImageMask",
                    value: function paintSolidColorImageMask() {
                        var rect = this.svgFactory.createElement("svg:rect");
                        rect.setAttributeNS(null, "x", "0");
                        rect.setAttributeNS(null, "y", "0");
                        rect.setAttributeNS(null, "width", "1px");
                        rect.setAttributeNS(null, "height", "1px");
                        rect.setAttributeNS(null, "fill", this.current.fillColor);
                        this._ensureTransformGroup().appendChild(rect);
                    }
                }, {
                    key: "paintJpegXObject",
                    value: function paintJpegXObject(objId, w, h) {
                        var imgObj = this.objs.get(objId);
                        var imgEl = this.svgFactory.createElement("svg:image");
                        imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgObj.src);
                        imgEl.setAttributeNS(null, "width", pf(w));
                        imgEl.setAttributeNS(null, "height", pf(h));
                        imgEl.setAttributeNS(null, "x", "0");
                        imgEl.setAttributeNS(null, "y", pf(-h));
                        imgEl.setAttributeNS(null, "transform", "scale(".concat(pf(1 / w), " ").concat(pf(-1 / h), ")"));
                        this._ensureTransformGroup().appendChild(imgEl);
                    }
                }, {
                    key: "paintImageXObject",
                    value: function paintImageXObject(objId) {
                        var imgData = this.objs.get(objId);
                        if (!imgData) {
                            (0, _util.warn)("Dependent image with object ID ".concat(objId, " is not ready yet"));
                            return;
                        }
                        this.paintInlineImageXObject(imgData);
                    }
                }, {
                    key: "paintInlineImageXObject",
                    value: function paintInlineImageXObject(imgData, mask) {
                        var width = imgData.width;
                        var height = imgData.height;
                        var imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);
                        var cliprect = this.svgFactory.createElement("svg:rect");
                        cliprect.setAttributeNS(null, "x", "0");
                        cliprect.setAttributeNS(null, "y", "0");
                        cliprect.setAttributeNS(null, "width", pf(width));
                        cliprect.setAttributeNS(null, "height", pf(height));
                        this.current.element = cliprect;
                        this.clip("nonzero");
                        var imgEl = this.svgFactory.createElement("svg:image");
                        imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgSrc);
                        imgEl.setAttributeNS(null, "x", "0");
                        imgEl.setAttributeNS(null, "y", pf(-height));
                        imgEl.setAttributeNS(null, "width", pf(width) + "px");
                        imgEl.setAttributeNS(null, "height", pf(height) + "px");
                        imgEl.setAttributeNS(null, "transform", "scale(".concat(pf(1 / width), " ").concat(pf(-1 / height), ")"));
                        if (mask) {
                            mask.appendChild(imgEl);
                        } else {
                            this._ensureTransformGroup().appendChild(imgEl);
                        }
                    }
                }, {
                    key: "paintImageMaskXObject",
                    value: function paintImageMaskXObject(imgData) {
                        var current = this.current;
                        var width = imgData.width;
                        var height = imgData.height;
                        var fillColor = current.fillColor;
                        current.maskId = "mask".concat(maskCount++);
                        var mask = this.svgFactory.createElement("svg:mask");
                        mask.setAttributeNS(null, "id", current.maskId);
                        var rect = this.svgFactory.createElement("svg:rect");
                        rect.setAttributeNS(null, "x", "0");
                        rect.setAttributeNS(null, "y", "0");
                        rect.setAttributeNS(null, "width", pf(width));
                        rect.setAttributeNS(null, "height", pf(height));
                        rect.setAttributeNS(null, "fill", fillColor);
                        rect.setAttributeNS(null, "mask", "url(#".concat(current.maskId, ")"));
                        this.defs.appendChild(mask);
                        this._ensureTransformGroup().appendChild(rect);
                        this.paintInlineImageXObject(imgData, mask);
                    }
                }, {
                    key: "paintFormXObjectBegin",
                    value: function paintFormXObjectBegin(matrix, bbox) {
                        if (Array.isArray(matrix) && matrix.length === 6) {
                            this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
                        }
                        if (bbox) {
                            var width = bbox[2] - bbox[0];
                            var height = bbox[3] - bbox[1];
                            var cliprect = this.svgFactory.createElement("svg:rect");
                            cliprect.setAttributeNS(null, "x", bbox[0]);
                            cliprect.setAttributeNS(null, "y", bbox[1]);
                            cliprect.setAttributeNS(null, "width", pf(width));
                            cliprect.setAttributeNS(null, "height", pf(height));
                            this.current.element = cliprect;
                            this.clip("nonzero");
                            this.endPath();
                        }
                    }
                }, {
                    key: "paintFormXObjectEnd",
                    value: function paintFormXObjectEnd() {}
                }, {
                    key: "_initialize",
                    value: function _initialize(viewport) {
                        var svg = this.svgFactory.create(viewport.width, viewport.height);
                        var definitions = this.svgFactory.createElement("svg:defs");
                        svg.appendChild(definitions);
                        this.defs = definitions;
                        var rootGroup = this.svgFactory.createElement("svg:g");
                        rootGroup.setAttributeNS(null, "transform", pm(viewport.transform));
                        svg.appendChild(rootGroup);
                        this.svg = rootGroup;
                        return svg;
                    }
                }, {
                    key: "_ensureClipGroup",
                    value: function _ensureClipGroup() {
                        if (!this.current.clipGroup) {
                            var clipGroup = this.svgFactory.createElement("svg:g");
                            clipGroup.setAttributeNS(null, "clip-path", this.current.activeClipUrl);
                            this.svg.appendChild(clipGroup);
                            this.current.clipGroup = clipGroup;
                        }
                        return this.current.clipGroup;
                    }
                }, {
                    key: "_ensureTransformGroup",
                    value: function _ensureTransformGroup() {
                        if (!this.tgrp) {
                            this.tgrp = this.svgFactory.createElement("svg:g");
                            this.tgrp.setAttributeNS(null, "transform", pm(this.transformMatrix));
                            if (this.current.activeClipUrl) {
                                this._ensureClipGroup().appendChild(this.tgrp);
                            } else {
                                this.svg.appendChild(this.tgrp);
                            }
                        }
                        return this.tgrp;
                    }
                } ]);
                return SVGGraphics;
            }();
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.PDFNodeStream = void 0;
        var _regenerator = _interopRequireDefault(__w_pdfjs_require__(148));
        var _util = __w_pdfjs_require__(1);
        var _network_utils = __w_pdfjs_require__(166);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        function _possibleConstructorReturn(self, call) {
            if (call && (_typeof(call) === "object" || typeof call === "function")) {
                return call;
            }
            return _assertThisInitialized(self);
        }
        function _assertThisInitialized(self) {
            if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self;
        }
        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        var fs = require("fs");
        var http = require("http");
        var https = require("https");
        var url = require("url");
        var fileUriRegex = /^file:\/\/\/[a-zA-Z]:\//;
        function parseUrl(sourceUrl) {
            var parsedUrl = url.parse(sourceUrl);
            if (parsedUrl.protocol === "file:" || parsedUrl.host) {
                return parsedUrl;
            }
            if (/^[a-z]:[\/\\]/i.test(sourceUrl)) {
                return url.parse("file:///".concat(sourceUrl));
            }
            if (!parsedUrl.host) {
                parsedUrl.protocol = "file:";
            }
            return parsedUrl;
        }
        var PDFNodeStream = function() {
            function PDFNodeStream(source) {
                _classCallCheck(this, PDFNodeStream);
                this.source = source;
                this.url = parseUrl(source.url);
                this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:";
                this.isFsUrl = this.url.protocol === "file:";
                this.httpHeaders = this.isHttp && source.httpHeaders || {};
                this._fullRequestReader = null;
                this._rangeRequestReaders = [];
            }
            _createClass(PDFNodeStream, [ {
                key: "getFullReader",
                value: function getFullReader() {
                    (0, _util.assert)(!this._fullRequestReader);
                    this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);
                    return this._fullRequestReader;
                }
            }, {
                key: "getRangeReader",
                value: function getRangeReader(start, end) {
                    if (end <= this._progressiveDataLength) {
                        return null;
                    }
                    var rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);
                    this._rangeRequestReaders.push(rangeReader);
                    return rangeReader;
                }
            }, {
                key: "cancelAllRequests",
                value: function cancelAllRequests(reason) {
                    if (this._fullRequestReader) {
                        this._fullRequestReader.cancel(reason);
                    }
                    var readers = this._rangeRequestReaders.slice(0);
                    readers.forEach(function(reader) {
                        reader.cancel(reason);
                    });
                }
            }, {
                key: "_progressiveDataLength",
                get: function get() {
                    return this._fullRequestReader ? this._fullRequestReader._loaded : 0;
                }
            } ]);
            return PDFNodeStream;
        }();
        exports.PDFNodeStream = PDFNodeStream;
        var BaseFullReader = function() {
            function BaseFullReader(stream) {
                _classCallCheck(this, BaseFullReader);
                this._url = stream.url;
                this._done = false;
                this._storedError = null;
                this.onProgress = null;
                var source = stream.source;
                this._contentLength = source.length;
                this._loaded = 0;
                this._filename = null;
                this._disableRange = source.disableRange || false;
                this._rangeChunkSize = source.rangeChunkSize;
                if (!this._rangeChunkSize && !this._disableRange) {
                    this._disableRange = true;
                }
                this._isStreamingSupported = !source.disableStream;
                this._isRangeSupported = !source.disableRange;
                this._readableStream = null;
                this._readCapability = (0, _util.createPromiseCapability)();
                this._headersCapability = (0, _util.createPromiseCapability)();
            }
            _createClass(BaseFullReader, [ {
                key: "read",
                value: function() {
                    var _read = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                        var chunk, buffer;
                        return _regenerator["default"].wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    _context.next = 2;
                                    return this._readCapability.promise;

                                  case 2:
                                    if (!this._done) {
                                        _context.next = 4;
                                        break;
                                    }
                                    return _context.abrupt("return", {
                                        value: undefined,
                                        done: true
                                    });

                                  case 4:
                                    if (!this._storedError) {
                                        _context.next = 6;
                                        break;
                                    }
                                    throw this._storedError;

                                  case 6:
                                    chunk = this._readableStream.read();
                                    if (!(chunk === null)) {
                                        _context.next = 10;
                                        break;
                                    }
                                    this._readCapability = (0, _util.createPromiseCapability)();
                                    return _context.abrupt("return", this.read());

                                  case 10:
                                    this._loaded += chunk.length;
                                    if (this.onProgress) {
                                        this.onProgress({
                                            loaded: this._loaded,
                                            total: this._contentLength
                                        });
                                    }
                                    buffer = new Uint8Array(chunk).buffer;
                                    return _context.abrupt("return", {
                                        value: buffer,
                                        done: false
                                    });

                                  case 14:
                                  case "end":
                                    return _context.stop();
                                }
                            }
                        }, _callee, this);
                    }));
                    function read() {
                        return _read.apply(this, arguments);
                    }
                    return read;
                }()
            }, {
                key: "cancel",
                value: function cancel(reason) {
                    if (!this._readableStream) {
                        this._error(reason);
                        return;
                    }
                    this._readableStream.destroy(reason);
                }
            }, {
                key: "_error",
                value: function _error(reason) {
                    this._storedError = reason;
                    this._readCapability.resolve();
                }
            }, {
                key: "_setReadableStream",
                value: function _setReadableStream(readableStream) {
                    var _this = this;
                    this._readableStream = readableStream;
                    readableStream.on("readable", function() {
                        _this._readCapability.resolve();
                    });
                    readableStream.on("end", function() {
                        readableStream.destroy();
                        _this._done = true;
                        _this._readCapability.resolve();
                    });
                    readableStream.on("error", function(reason) {
                        _this._error(reason);
                    });
                    if (!this._isStreamingSupported && this._isRangeSupported) {
                        this._error(new _util.AbortException("streaming is disabled"));
                    }
                    if (this._storedError) {
                        this._readableStream.destroy(this._storedError);
                    }
                }
            }, {
                key: "headersReady",
                get: function get() {
                    return this._headersCapability.promise;
                }
            }, {
                key: "filename",
                get: function get() {
                    return this._filename;
                }
            }, {
                key: "contentLength",
                get: function get() {
                    return this._contentLength;
                }
            }, {
                key: "isRangeSupported",
                get: function get() {
                    return this._isRangeSupported;
                }
            }, {
                key: "isStreamingSupported",
                get: function get() {
                    return this._isStreamingSupported;
                }
            } ]);
            return BaseFullReader;
        }();
        var BaseRangeReader = function() {
            function BaseRangeReader(stream) {
                _classCallCheck(this, BaseRangeReader);
                this._url = stream.url;
                this._done = false;
                this._storedError = null;
                this.onProgress = null;
                this._loaded = 0;
                this._readableStream = null;
                this._readCapability = (0, _util.createPromiseCapability)();
                var source = stream.source;
                this._isStreamingSupported = !source.disableStream;
            }
            _createClass(BaseRangeReader, [ {
                key: "read",
                value: function() {
                    var _read2 = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                        var chunk, buffer;
                        return _regenerator["default"].wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    _context2.next = 2;
                                    return this._readCapability.promise;

                                  case 2:
                                    if (!this._done) {
                                        _context2.next = 4;
                                        break;
                                    }
                                    return _context2.abrupt("return", {
                                        value: undefined,
                                        done: true
                                    });

                                  case 4:
                                    if (!this._storedError) {
                                        _context2.next = 6;
                                        break;
                                    }
                                    throw this._storedError;

                                  case 6:
                                    chunk = this._readableStream.read();
                                    if (!(chunk === null)) {
                                        _context2.next = 10;
                                        break;
                                    }
                                    this._readCapability = (0, _util.createPromiseCapability)();
                                    return _context2.abrupt("return", this.read());

                                  case 10:
                                    this._loaded += chunk.length;
                                    if (this.onProgress) {
                                        this.onProgress({
                                            loaded: this._loaded
                                        });
                                    }
                                    buffer = new Uint8Array(chunk).buffer;
                                    return _context2.abrupt("return", {
                                        value: buffer,
                                        done: false
                                    });

                                  case 14:
                                  case "end":
                                    return _context2.stop();
                                }
                            }
                        }, _callee2, this);
                    }));
                    function read() {
                        return _read2.apply(this, arguments);
                    }
                    return read;
                }()
            }, {
                key: "cancel",
                value: function cancel(reason) {
                    if (!this._readableStream) {
                        this._error(reason);
                        return;
                    }
                    this._readableStream.destroy(reason);
                }
            }, {
                key: "_error",
                value: function _error(reason) {
                    this._storedError = reason;
                    this._readCapability.resolve();
                }
            }, {
                key: "_setReadableStream",
                value: function _setReadableStream(readableStream) {
                    var _this2 = this;
                    this._readableStream = readableStream;
                    readableStream.on("readable", function() {
                        _this2._readCapability.resolve();
                    });
                    readableStream.on("end", function() {
                        readableStream.destroy();
                        _this2._done = true;
                        _this2._readCapability.resolve();
                    });
                    readableStream.on("error", function(reason) {
                        _this2._error(reason);
                    });
                    if (this._storedError) {
                        this._readableStream.destroy(this._storedError);
                    }
                }
            }, {
                key: "isStreamingSupported",
                get: function get() {
                    return this._isStreamingSupported;
                }
            } ]);
            return BaseRangeReader;
        }();
        function createRequestOptions(url, headers) {
            return {
                protocol: url.protocol,
                auth: url.auth,
                host: url.hostname,
                port: url.port,
                path: url.path,
                method: "GET",
                headers: headers
            };
        }
        var PDFNodeStreamFullReader = function(_BaseFullReader) {
            _inherits(PDFNodeStreamFullReader, _BaseFullReader);
            function PDFNodeStreamFullReader(stream) {
                var _this3;
                _classCallCheck(this, PDFNodeStreamFullReader);
                _this3 = _possibleConstructorReturn(this, _getPrototypeOf(PDFNodeStreamFullReader).call(this, stream));
                var handleResponse = function handleResponse(response) {
                    if (response.statusCode === 404) {
                        var error = new _util.MissingPDFException('Missing PDF "'.concat(_this3._url, '".'));
                        _this3._storedError = error;
                        _this3._headersCapability.reject(error);
                        return;
                    }
                    _this3._headersCapability.resolve();
                    _this3._setReadableStream(response);
                    var getResponseHeader = function getResponseHeader(name) {
                        return _this3._readableStream.headers[name.toLowerCase()];
                    };
                    var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
                        getResponseHeader: getResponseHeader,
                        isHttp: stream.isHttp,
                        rangeChunkSize: _this3._rangeChunkSize,
                        disableRange: _this3._disableRange
                    }), allowRangeRequests = _validateRangeRequest.allowRangeRequests, suggestedLength = _validateRangeRequest.suggestedLength;
                    _this3._isRangeSupported = allowRangeRequests;
                    _this3._contentLength = suggestedLength || _this3._contentLength;
                    _this3._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                };
                _this3._request = null;
                if (_this3._url.protocol === "http:") {
                    _this3._request = http.request(createRequestOptions(_this3._url, stream.httpHeaders), handleResponse);
                } else {
                    _this3._request = https.request(createRequestOptions(_this3._url, stream.httpHeaders), handleResponse);
                }
                _this3._request.on("error", function(reason) {
                    _this3._storedError = reason;
                    _this3._headersCapability.reject(reason);
                });
                _this3._request.end();
                return _this3;
            }
            return PDFNodeStreamFullReader;
        }(BaseFullReader);
        var PDFNodeStreamRangeReader = function(_BaseRangeReader) {
            _inherits(PDFNodeStreamRangeReader, _BaseRangeReader);
            function PDFNodeStreamRangeReader(stream, start, end) {
                var _this4;
                _classCallCheck(this, PDFNodeStreamRangeReader);
                _this4 = _possibleConstructorReturn(this, _getPrototypeOf(PDFNodeStreamRangeReader).call(this, stream));
                _this4._httpHeaders = {};
                for (var property in stream.httpHeaders) {
                    var value = stream.httpHeaders[property];
                    if (typeof value === "undefined") {
                        continue;
                    }
                    _this4._httpHeaders[property] = value;
                }
                _this4._httpHeaders["Range"] = "bytes=".concat(start, "-").concat(end - 1);
                var handleResponse = function handleResponse(response) {
                    if (response.statusCode === 404) {
                        var error = new _util.MissingPDFException('Missing PDF "'.concat(_this4._url, '".'));
                        _this4._storedError = error;
                        return;
                    }
                    _this4._setReadableStream(response);
                };
                _this4._request = null;
                if (_this4._url.protocol === "http:") {
                    _this4._request = http.request(createRequestOptions(_this4._url, _this4._httpHeaders), handleResponse);
                } else {
                    _this4._request = https.request(createRequestOptions(_this4._url, _this4._httpHeaders), handleResponse);
                }
                _this4._request.on("error", function(reason) {
                    _this4._storedError = reason;
                });
                _this4._request.end();
                return _this4;
            }
            return PDFNodeStreamRangeReader;
        }(BaseRangeReader);
        var PDFNodeStreamFsFullReader = function(_BaseFullReader2) {
            _inherits(PDFNodeStreamFsFullReader, _BaseFullReader2);
            function PDFNodeStreamFsFullReader(stream) {
                var _this5;
                _classCallCheck(this, PDFNodeStreamFsFullReader);
                _this5 = _possibleConstructorReturn(this, _getPrototypeOf(PDFNodeStreamFsFullReader).call(this, stream));
                var path = decodeURIComponent(_this5._url.path);
                if (fileUriRegex.test(_this5._url.href)) {
                    path = path.replace(/^\//, "");
                }
                fs.lstat(path, function(error, stat) {
                    if (error) {
                        if (error.code === "ENOENT") {
                            error = new _util.MissingPDFException('Missing PDF "'.concat(path, '".'));
                        }
                        _this5._storedError = error;
                        _this5._headersCapability.reject(error);
                        return;
                    }
                    _this5._contentLength = stat.size;
                    _this5._setReadableStream(fs.createReadStream(path));
                    _this5._headersCapability.resolve();
                });
                return _this5;
            }
            return PDFNodeStreamFsFullReader;
        }(BaseFullReader);
        var PDFNodeStreamFsRangeReader = function(_BaseRangeReader2) {
            _inherits(PDFNodeStreamFsRangeReader, _BaseRangeReader2);
            function PDFNodeStreamFsRangeReader(stream, start, end) {
                var _this6;
                _classCallCheck(this, PDFNodeStreamFsRangeReader);
                _this6 = _possibleConstructorReturn(this, _getPrototypeOf(PDFNodeStreamFsRangeReader).call(this, stream));
                var path = decodeURIComponent(_this6._url.path);
                if (fileUriRegex.test(_this6._url.href)) {
                    path = path.replace(/^\//, "");
                }
                _this6._setReadableStream(fs.createReadStream(path, {
                    start: start,
                    end: end - 1
                }));
                return _this6;
            }
            return PDFNodeStreamFsRangeReader;
        }(BaseRangeReader);
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createResponseStatusError = createResponseStatusError;
        exports.extractFilenameFromHeader = extractFilenameFromHeader;
        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;
        exports.validateResponseStatus = validateResponseStatus;
        var _util = __w_pdfjs_require__(1);
        var _content_disposition = __w_pdfjs_require__(167);
        function validateRangeRequestCapabilities(_ref) {
            var getResponseHeader = _ref.getResponseHeader, isHttp = _ref.isHttp, rangeChunkSize = _ref.rangeChunkSize, disableRange = _ref.disableRange;
            (0, _util.assert)(rangeChunkSize > 0, "Range chunk size must be larger than zero");
            var returnValues = {
                allowRangeRequests: false,
                suggestedLength: undefined
            };
            var length = parseInt(getResponseHeader("Content-Length"), 10);
            if (!Number.isInteger(length)) {
                return returnValues;
            }
            returnValues.suggestedLength = length;
            if (length <= 2 * rangeChunkSize) {
                return returnValues;
            }
            if (disableRange || !isHttp) {
                return returnValues;
            }
            if (getResponseHeader("Accept-Ranges") !== "bytes") {
                return returnValues;
            }
            var contentEncoding = getResponseHeader("Content-Encoding") || "identity";
            if (contentEncoding !== "identity") {
                return returnValues;
            }
            returnValues.allowRangeRequests = true;
            return returnValues;
        }
        function extractFilenameFromHeader(getResponseHeader) {
            var contentDisposition = getResponseHeader("Content-Disposition");
            if (contentDisposition) {
                var filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);
                if (/\.pdf$/i.test(filename)) {
                    return filename;
                }
            }
            return null;
        }
        function createResponseStatusError(status, url) {
            if (status === 404 || status === 0 && /^file:/.test(url)) {
                return new _util.MissingPDFException('Missing PDF "' + url + '".');
            }
            return new _util.UnexpectedResponseException("Unexpected server response (" + status + ') while retrieving PDF "' + url + '".', status);
        }
        function validateResponseStatus(status) {
            return status === 200 || status === 206;
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;
        function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
        }
        function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
        function _iterableToArrayLimit(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
        function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }
        function getFilenameFromContentDispositionHeader(contentDisposition) {
            var needsEncodingFixup = true;
            var tmp = toParamRegExp("filename\\*", "i").exec(contentDisposition);
            if (tmp) {
                tmp = tmp[1];
                var filename = rfc2616unquote(tmp);
                filename = unescape(filename);
                filename = rfc5987decode(filename);
                filename = rfc2047decode(filename);
                return fixupEncoding(filename);
            }
            tmp = rfc2231getparam(contentDisposition);
            if (tmp) {
                var _filename = rfc2047decode(tmp);
                return fixupEncoding(_filename);
            }
            tmp = toParamRegExp("filename", "i").exec(contentDisposition);
            if (tmp) {
                tmp = tmp[1];
                var _filename2 = rfc2616unquote(tmp);
                _filename2 = rfc2047decode(_filename2);
                return fixupEncoding(_filename2);
            }
            function toParamRegExp(attributePattern, flags) {
                return new RegExp("(?:^|;)\\s*" + attributePattern + "\\s*=\\s*" + "(" + '[^";\\s][^;\\s]*' + "|" + '"(?:[^"\\\\]|\\\\"?)+"?' + ")", flags);
            }
            function textdecode(encoding, value) {
                if (encoding) {
                    if (!/^[\x00-\xFF]+$/.test(value)) {
                        return value;
                    }
                    try {
                        var decoder = new TextDecoder(encoding, {
                            fatal: true
                        });
                        var bytes = Array.from(value, function(ch) {
                            return ch.charCodeAt(0) & 255;
                        });
                        value = decoder.decode(new Uint8Array(bytes));
                        needsEncodingFixup = false;
                    } catch (e) {
                        if (/^utf-?8$/i.test(encoding)) {
                            try {
                                value = decodeURIComponent(escape(value));
                                needsEncodingFixup = false;
                            } catch (err) {}
                        }
                    }
                }
                return value;
            }
            function fixupEncoding(value) {
                if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
                    value = textdecode("utf-8", value);
                    if (needsEncodingFixup) {
                        value = textdecode("iso-8859-1", value);
                    }
                }
                return value;
            }
            function rfc2231getparam(contentDisposition) {
                var matches = [], match;
                var iter = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
                while ((match = iter.exec(contentDisposition)) !== null) {
                    var _match = match, _match2 = _slicedToArray(_match, 4), n = _match2[1], quot = _match2[2], part = _match2[3];
                    n = parseInt(n, 10);
                    if (n in matches) {
                        if (n === 0) {
                            break;
                        }
                        continue;
                    }
                    matches[n] = [ quot, part ];
                }
                var parts = [];
                for (var n = 0; n < matches.length; ++n) {
                    if (!(n in matches)) {
                        break;
                    }
                    var _matches$n = _slicedToArray(matches[n], 2), quot = _matches$n[0], part = _matches$n[1];
                    part = rfc2616unquote(part);
                    if (quot) {
                        part = unescape(part);
                        if (n === 0) {
                            part = rfc5987decode(part);
                        }
                    }
                    parts.push(part);
                }
                return parts.join("");
            }
            function rfc2616unquote(value) {
                if (value.startsWith('"')) {
                    var parts = value.slice(1).split('\\"');
                    for (var i = 0; i < parts.length; ++i) {
                        var quotindex = parts[i].indexOf('"');
                        if (quotindex !== -1) {
                            parts[i] = parts[i].slice(0, quotindex);
                            parts.length = i + 1;
                        }
                        parts[i] = parts[i].replace(/\\(.)/g, "$1");
                    }
                    value = parts.join('"');
                }
                return value;
            }
            function rfc5987decode(extvalue) {
                var encodingend = extvalue.indexOf("'");
                if (encodingend === -1) {
                    return extvalue;
                }
                var encoding = extvalue.slice(0, encodingend);
                var langvalue = extvalue.slice(encodingend + 1);
                var value = langvalue.replace(/^[^']*'/, "");
                return textdecode(encoding, value);
            }
            function rfc2047decode(value) {
                if (!value.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value)) {
                    return value;
                }
                return value.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(_, charset, encoding, text) {
                    if (encoding === "q" || encoding === "Q") {
                        text = text.replace(/_/g, " ");
                        text = text.replace(/=([0-9a-fA-F]{2})/g, function(_, hex) {
                            return String.fromCharCode(parseInt(hex, 16));
                        });
                        return textdecode(charset, text);
                    }
                    try {
                        text = atob(text);
                    } catch (e) {}
                    return textdecode(charset, text);
                });
            }
            return "";
        }
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.PDFNetworkStream = PDFNetworkStream;
        exports.NetworkManager = NetworkManager;
        var _regenerator = _interopRequireDefault(__w_pdfjs_require__(148));
        var _util = __w_pdfjs_require__(1);
        var _network_utils = __w_pdfjs_require__(166);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        var OK_RESPONSE = 200;
        var PARTIAL_CONTENT_RESPONSE = 206;
        function NetworkManager(url, args) {
            this.url = url;
            args = args || {};
            this.isHttp = /^https?:/i.test(url);
            this.httpHeaders = this.isHttp && args.httpHeaders || {};
            this.withCredentials = args.withCredentials || false;
            this.getXhr = args.getXhr || function NetworkManager_getXhr() {
                return new XMLHttpRequest();
            };
            this.currXhrId = 0;
            this.pendingRequests = Object.create(null);
        }
        function getArrayBuffer(xhr) {
            var data = xhr.response;
            if (typeof data !== "string") {
                return data;
            }
            var array = (0, _util.stringToBytes)(data);
            return array.buffer;
        }
        NetworkManager.prototype = {
            requestRange: function NetworkManager_requestRange(begin, end, listeners) {
                var args = {
                    begin: begin,
                    end: end
                };
                for (var prop in listeners) {
                    args[prop] = listeners[prop];
                }
                return this.request(args);
            },
            requestFull: function NetworkManager_requestFull(listeners) {
                return this.request(listeners);
            },
            request: function NetworkManager_request(args) {
                var xhr = this.getXhr();
                var xhrId = this.currXhrId++;
                var pendingRequest = this.pendingRequests[xhrId] = {
                    xhr: xhr
                };
                xhr.open("GET", this.url);
                xhr.withCredentials = this.withCredentials;
                for (var property in this.httpHeaders) {
                    var value = this.httpHeaders[property];
                    if (typeof value === "undefined") {
                        continue;
                    }
                    xhr.setRequestHeader(property, value);
                }
                if (this.isHttp && "begin" in args && "end" in args) {
                    var rangeStr = args.begin + "-" + (args.end - 1);
                    xhr.setRequestHeader("Range", "bytes=" + rangeStr);
                    pendingRequest.expectedStatus = 206;
                } else {
                    pendingRequest.expectedStatus = 200;
                }
                xhr.responseType = "arraybuffer";
                if (args.onError) {
                    xhr.onerror = function(evt) {
                        args.onError(xhr.status);
                    };
                }
                xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
                xhr.onprogress = this.onProgress.bind(this, xhrId);
                pendingRequest.onHeadersReceived = args.onHeadersReceived;
                pendingRequest.onDone = args.onDone;
                pendingRequest.onError = args.onError;
                pendingRequest.onProgress = args.onProgress;
                xhr.send(null);
                return xhrId;
            },
            onProgress: function NetworkManager_onProgress(xhrId, evt) {
                var pendingRequest = this.pendingRequests[xhrId];
                if (!pendingRequest) {
                    return;
                }
                if (pendingRequest.onProgress) {
                    pendingRequest.onProgress(evt);
                }
            },
            onStateChange: function NetworkManager_onStateChange(xhrId, evt) {
                var pendingRequest = this.pendingRequests[xhrId];
                if (!pendingRequest) {
                    return;
                }
                var xhr = pendingRequest.xhr;
                if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
                    pendingRequest.onHeadersReceived();
                    delete pendingRequest.onHeadersReceived;
                }
                if (xhr.readyState !== 4) {
                    return;
                }
                if (!(xhrId in this.pendingRequests)) {
                    return;
                }
                delete this.pendingRequests[xhrId];
                if (xhr.status === 0 && this.isHttp) {
                    if (pendingRequest.onError) {
                        pendingRequest.onError(xhr.status);
                    }
                    return;
                }
                var xhrStatus = xhr.status || OK_RESPONSE;
                var ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;
                if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
                    if (pendingRequest.onError) {
                        pendingRequest.onError(xhr.status);
                    }
                    return;
                }
                var chunk = getArrayBuffer(xhr);
                if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
                    var rangeHeader = xhr.getResponseHeader("Content-Range");
                    var matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
                    var begin = parseInt(matches[1], 10);
                    pendingRequest.onDone({
                        begin: begin,
                        chunk: chunk
                    });
                } else if (chunk) {
                    pendingRequest.onDone({
                        begin: 0,
                        chunk: chunk
                    });
                } else if (pendingRequest.onError) {
                    pendingRequest.onError(xhr.status);
                }
            },
            hasPendingRequests: function NetworkManager_hasPendingRequests() {
                for (var xhrId in this.pendingRequests) {
                    return true;
                }
                return false;
            },
            getRequestXhr: function NetworkManager_getXhr(xhrId) {
                return this.pendingRequests[xhrId].xhr;
            },
            isPendingRequest: function NetworkManager_isPendingRequest(xhrId) {
                return xhrId in this.pendingRequests;
            },
            abortAllRequests: function NetworkManager_abortAllRequests() {
                for (var xhrId in this.pendingRequests) {
                    this.abortRequest(xhrId | 0);
                }
            },
            abortRequest: function NetworkManager_abortRequest(xhrId) {
                var xhr = this.pendingRequests[xhrId].xhr;
                delete this.pendingRequests[xhrId];
                xhr.abort();
            }
        };
        function PDFNetworkStream(source) {
            this._source = source;
            this._manager = new NetworkManager(source.url, {
                httpHeaders: source.httpHeaders,
                withCredentials: source.withCredentials
            });
            this._rangeChunkSize = source.rangeChunkSize;
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
        }
        PDFNetworkStream.prototype = {
            _onRangeRequestReaderClosed: function PDFNetworkStream_onRangeRequestReaderClosed(reader) {
                var i = this._rangeRequestReaders.indexOf(reader);
                if (i >= 0) {
                    this._rangeRequestReaders.splice(i, 1);
                }
            },
            getFullReader: function PDFNetworkStream_getFullReader() {
                (0, _util.assert)(!this._fullRequestReader);
                this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);
                return this._fullRequestReader;
            },
            getRangeReader: function PDFNetworkStream_getRangeReader(begin, end) {
                var reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
                reader.onClosed = this._onRangeRequestReaderClosed.bind(this);
                this._rangeRequestReaders.push(reader);
                return reader;
            },
            cancelAllRequests: function PDFNetworkStream_cancelAllRequests(reason) {
                if (this._fullRequestReader) {
                    this._fullRequestReader.cancel(reason);
                }
                var readers = this._rangeRequestReaders.slice(0);
                readers.forEach(function(reader) {
                    reader.cancel(reason);
                });
            }
        };
        function PDFNetworkStreamFullRequestReader(manager, source) {
            this._manager = manager;
            var args = {
                onHeadersReceived: this._onHeadersReceived.bind(this),
                onDone: this._onDone.bind(this),
                onError: this._onError.bind(this),
                onProgress: this._onProgress.bind(this)
            };
            this._url = source.url;
            this._fullRequestId = manager.requestFull(args);
            this._headersReceivedCapability = (0, _util.createPromiseCapability)();
            this._disableRange = source.disableRange || false;
            this._contentLength = source.length;
            this._rangeChunkSize = source.rangeChunkSize;
            if (!this._rangeChunkSize && !this._disableRange) {
                this._disableRange = true;
            }
            this._isStreamingSupported = false;
            this._isRangeSupported = false;
            this._cachedChunks = [];
            this._requests = [];
            this._done = false;
            this._storedError = undefined;
            this._filename = null;
            this.onProgress = null;
        }
        PDFNetworkStreamFullRequestReader.prototype = {
            _onHeadersReceived: function PDFNetworkStreamFullRequestReader_onHeadersReceived() {
                var fullRequestXhrId = this._fullRequestId;
                var fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);
                var getResponseHeader = function getResponseHeader(name) {
                    return fullRequestXhr.getResponseHeader(name);
                };
                var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
                    getResponseHeader: getResponseHeader,
                    isHttp: this._manager.isHttp,
                    rangeChunkSize: this._rangeChunkSize,
                    disableRange: this._disableRange
                }), allowRangeRequests = _validateRangeRequest.allowRangeRequests, suggestedLength = _validateRangeRequest.suggestedLength;
                if (allowRangeRequests) {
                    this._isRangeSupported = true;
                }
                this._contentLength = suggestedLength || this._contentLength;
                this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                if (this._isRangeSupported) {
                    this._manager.abortRequest(fullRequestXhrId);
                }
                this._headersReceivedCapability.resolve();
            },
            _onDone: function PDFNetworkStreamFullRequestReader_onDone(args) {
                if (args) {
                    if (this._requests.length > 0) {
                        var requestCapability = this._requests.shift();
                        requestCapability.resolve({
                            value: args.chunk,
                            done: false
                        });
                    } else {
                        this._cachedChunks.push(args.chunk);
                    }
                }
                this._done = true;
                if (this._cachedChunks.length > 0) {
                    return;
                }
                this._requests.forEach(function(requestCapability) {
                    requestCapability.resolve({
                        value: undefined,
                        done: true
                    });
                });
                this._requests = [];
            },
            _onError: function PDFNetworkStreamFullRequestReader_onError(status) {
                var url = this._url;
                var exception = (0, _network_utils.createResponseStatusError)(status, url);
                this._storedError = exception;
                this._headersReceivedCapability.reject(exception);
                this._requests.forEach(function(requestCapability) {
                    requestCapability.reject(exception);
                });
                this._requests = [];
                this._cachedChunks = [];
            },
            _onProgress: function PDFNetworkStreamFullRequestReader_onProgress(data) {
                if (this.onProgress) {
                    this.onProgress({
                        loaded: data.loaded,
                        total: data.lengthComputable ? data.total : this._contentLength
                    });
                }
            },
            get filename() {
                return this._filename;
            },
            get isRangeSupported() {
                return this._isRangeSupported;
            },
            get isStreamingSupported() {
                return this._isStreamingSupported;
            },
            get contentLength() {
                return this._contentLength;
            },
            get headersReady() {
                return this._headersReceivedCapability.promise;
            },
            read: function() {
                var _read = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                    var chunk, requestCapability;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                if (!this._storedError) {
                                    _context.next = 2;
                                    break;
                                }
                                throw this._storedError;

                              case 2:
                                if (!(this._cachedChunks.length > 0)) {
                                    _context.next = 5;
                                    break;
                                }
                                chunk = this._cachedChunks.shift();
                                return _context.abrupt("return", {
                                    value: chunk,
                                    done: false
                                });

                              case 5:
                                if (!this._done) {
                                    _context.next = 7;
                                    break;
                                }
                                return _context.abrupt("return", {
                                    value: undefined,
                                    done: true
                                });

                              case 7:
                                requestCapability = (0, _util.createPromiseCapability)();
                                this._requests.push(requestCapability);
                                return _context.abrupt("return", requestCapability.promise);

                              case 10:
                              case "end":
                                return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));
                function read() {
                    return _read.apply(this, arguments);
                }
                return read;
            }(),
            cancel: function PDFNetworkStreamFullRequestReader_cancel(reason) {
                this._done = true;
                this._headersReceivedCapability.reject(reason);
                this._requests.forEach(function(requestCapability) {
                    requestCapability.resolve({
                        value: undefined,
                        done: true
                    });
                });
                this._requests = [];
                if (this._manager.isPendingRequest(this._fullRequestId)) {
                    this._manager.abortRequest(this._fullRequestId);
                }
                this._fullRequestReader = null;
            }
        };
        function PDFNetworkStreamRangeRequestReader(manager, begin, end) {
            this._manager = manager;
            var args = {
                onDone: this._onDone.bind(this),
                onProgress: this._onProgress.bind(this)
            };
            this._requestId = manager.requestRange(begin, end, args);
            this._requests = [];
            this._queuedChunk = null;
            this._done = false;
            this.onProgress = null;
            this.onClosed = null;
        }
        PDFNetworkStreamRangeRequestReader.prototype = {
            _close: function PDFNetworkStreamRangeRequestReader_close() {
                if (this.onClosed) {
                    this.onClosed(this);
                }
            },
            _onDone: function PDFNetworkStreamRangeRequestReader_onDone(data) {
                var chunk = data.chunk;
                if (this._requests.length > 0) {
                    var requestCapability = this._requests.shift();
                    requestCapability.resolve({
                        value: chunk,
                        done: false
                    });
                } else {
                    this._queuedChunk = chunk;
                }
                this._done = true;
                this._requests.forEach(function(requestCapability) {
                    requestCapability.resolve({
                        value: undefined,
                        done: true
                    });
                });
                this._requests = [];
                this._close();
            },
            _onProgress: function PDFNetworkStreamRangeRequestReader_onProgress(evt) {
                if (!this.isStreamingSupported && this.onProgress) {
                    this.onProgress({
                        loaded: evt.loaded
                    });
                }
            },
            get isStreamingSupported() {
                return false;
            },
            read: function() {
                var _read2 = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                    var chunk, requestCapability;
                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                if (!(this._queuedChunk !== null)) {
                                    _context2.next = 4;
                                    break;
                                }
                                chunk = this._queuedChunk;
                                this._queuedChunk = null;
                                return _context2.abrupt("return", {
                                    value: chunk,
                                    done: false
                                });

                              case 4:
                                if (!this._done) {
                                    _context2.next = 6;
                                    break;
                                }
                                return _context2.abrupt("return", {
                                    value: undefined,
                                    done: true
                                });

                              case 6:
                                requestCapability = (0, _util.createPromiseCapability)();
                                this._requests.push(requestCapability);
                                return _context2.abrupt("return", requestCapability.promise);

                              case 9:
                              case "end":
                                return _context2.stop();
                            }
                        }
                    }, _callee2, this);
                }));
                function read() {
                    return _read2.apply(this, arguments);
                }
                return read;
            }(),
            cancel: function PDFNetworkStreamRangeRequestReader_cancel(reason) {
                this._done = true;
                this._requests.forEach(function(requestCapability) {
                    requestCapability.resolve({
                        value: undefined,
                        done: true
                    });
                });
                this._requests = [];
                if (this._manager.isPendingRequest(this._requestId)) {
                    this._manager.abortRequest(this._requestId);
                }
                this._close();
            }
        };
    }, function(module, exports, __w_pdfjs_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.PDFFetchStream = void 0;
        var _regenerator = _interopRequireDefault(__w_pdfjs_require__(148));
        var _util = __w_pdfjs_require__(1);
        var _network_utils = __w_pdfjs_require__(166);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function() {
                var self = this, args = arguments;
                return new Promise(function(resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        function createFetchOptions(headers, withCredentials, abortController) {
            return {
                method: "GET",
                headers: headers,
                signal: abortController && abortController.signal,
                mode: "cors",
                credentials: withCredentials ? "include" : "same-origin",
                redirect: "follow"
            };
        }
        var PDFFetchStream = function() {
            function PDFFetchStream(source) {
                _classCallCheck(this, PDFFetchStream);
                this.source = source;
                this.isHttp = /^https?:/i.test(source.url);
                this.httpHeaders = this.isHttp && source.httpHeaders || {};
                this._fullRequestReader = null;
                this._rangeRequestReaders = [];
            }
            _createClass(PDFFetchStream, [ {
                key: "getFullReader",
                value: function getFullReader() {
                    (0, _util.assert)(!this._fullRequestReader);
                    this._fullRequestReader = new PDFFetchStreamReader(this);
                    return this._fullRequestReader;
                }
            }, {
                key: "getRangeReader",
                value: function getRangeReader(begin, end) {
                    if (end <= this._progressiveDataLength) {
                        return null;
                    }
                    var reader = new PDFFetchStreamRangeReader(this, begin, end);
                    this._rangeRequestReaders.push(reader);
                    return reader;
                }
            }, {
                key: "cancelAllRequests",
                value: function cancelAllRequests(reason) {
                    if (this._fullRequestReader) {
                        this._fullRequestReader.cancel(reason);
                    }
                    var readers = this._rangeRequestReaders.slice(0);
                    readers.forEach(function(reader) {
                        reader.cancel(reason);
                    });
                }
            }, {
                key: "_progressiveDataLength",
                get: function get() {
                    return this._fullRequestReader ? this._fullRequestReader._loaded : 0;
                }
            } ]);
            return PDFFetchStream;
        }();
        exports.PDFFetchStream = PDFFetchStream;
        var PDFFetchStreamReader = function() {
            function PDFFetchStreamReader(stream) {
                var _this = this;
                _classCallCheck(this, PDFFetchStreamReader);
                this._stream = stream;
                this._reader = null;
                this._loaded = 0;
                this._filename = null;
                var source = stream.source;
                this._withCredentials = source.withCredentials;
                this._contentLength = source.length;
                this._headersCapability = (0, _util.createPromiseCapability)();
                this._disableRange = source.disableRange || false;
                this._rangeChunkSize = source.rangeChunkSize;
                if (!this._rangeChunkSize && !this._disableRange) {
                    this._disableRange = true;
                }
                if (typeof AbortController !== "undefined") {
                    this._abortController = new AbortController();
                }
                this._isStreamingSupported = !source.disableStream;
                this._isRangeSupported = !source.disableRange;
                this._headers = new Headers();
                for (var property in this._stream.httpHeaders) {
                    var value = this._stream.httpHeaders[property];
                    if (typeof value === "undefined") {
                        continue;
                    }
                    this._headers.append(property, value);
                }
                var url = source.url;
                fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function(response) {
                    if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                        throw (0, _network_utils.createResponseStatusError)(response.status, url);
                    }
                    _this._reader = response.body.getReader();
                    _this._headersCapability.resolve();
                    var getResponseHeader = function getResponseHeader(name) {
                        return response.headers.get(name);
                    };
                    var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
                        getResponseHeader: getResponseHeader,
                        isHttp: _this._stream.isHttp,
                        rangeChunkSize: _this._rangeChunkSize,
                        disableRange: _this._disableRange
                    }), allowRangeRequests = _validateRangeRequest.allowRangeRequests, suggestedLength = _validateRangeRequest.suggestedLength;
                    _this._isRangeSupported = allowRangeRequests;
                    _this._contentLength = suggestedLength || _this._contentLength;
                    _this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                    if (!_this._isStreamingSupported && _this._isRangeSupported) {
                        _this.cancel(new _util.AbortException("streaming is disabled"));
                    }
                })["catch"](this._headersCapability.reject);
                this.onProgress = null;
            }
            _createClass(PDFFetchStreamReader, [ {
                key: "read",
                value: function() {
                    var _read = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                        var _ref, value, done, buffer;
                        return _regenerator["default"].wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    _context.next = 2;
                                    return this._headersCapability.promise;

                                  case 2:
                                    _context.next = 4;
                                    return this._reader.read();

                                  case 4:
                                    _ref = _context.sent;
                                    value = _ref.value;
                                    done = _ref.done;
                                    if (!done) {
                                        _context.next = 9;
                                        break;
                                    }
                                    return _context.abrupt("return", {
                                        value: value,
                                        done: done
                                    });

                                  case 9:
                                    this._loaded += value.byteLength;
                                    if (this.onProgress) {
                                        this.onProgress({
                                            loaded: this._loaded,
                                            total: this._contentLength
                                        });
                                    }
                                    buffer = new Uint8Array(value).buffer;
                                    return _context.abrupt("return", {
                                        value: buffer,
                                        done: false
                                    });

                                  case 13:
                                  case "end":
                                    return _context.stop();
                                }
                            }
                        }, _callee, this);
                    }));
                    function read() {
                        return _read.apply(this, arguments);
                    }
                    return read;
                }()
            }, {
                key: "cancel",
                value: function cancel(reason) {
                    if (this._reader) {
                        this._reader.cancel(reason);
                    }
                    if (this._abortController) {
                        this._abortController.abort();
                    }
                }
            }, {
                key: "headersReady",
                get: function get() {
                    return this._headersCapability.promise;
                }
            }, {
                key: "filename",
                get: function get() {
                    return this._filename;
                }
            }, {
                key: "contentLength",
                get: function get() {
                    return this._contentLength;
                }
            }, {
                key: "isRangeSupported",
                get: function get() {
                    return this._isRangeSupported;
                }
            }, {
                key: "isStreamingSupported",
                get: function get() {
                    return this._isStreamingSupported;
                }
            } ]);
            return PDFFetchStreamReader;
        }();
        var PDFFetchStreamRangeReader = function() {
            function PDFFetchStreamRangeReader(stream, begin, end) {
                var _this2 = this;
                _classCallCheck(this, PDFFetchStreamRangeReader);
                this._stream = stream;
                this._reader = null;
                this._loaded = 0;
                var source = stream.source;
                this._withCredentials = source.withCredentials;
                this._readCapability = (0, _util.createPromiseCapability)();
                this._isStreamingSupported = !source.disableStream;
                if (typeof AbortController !== "undefined") {
                    this._abortController = new AbortController();
                }
                this._headers = new Headers();
                for (var property in this._stream.httpHeaders) {
                    var value = this._stream.httpHeaders[property];
                    if (typeof value === "undefined") {
                        continue;
                    }
                    this._headers.append(property, value);
                }
                var rangeStr = begin + "-" + (end - 1);
                this._headers.append("Range", "bytes=" + rangeStr);
                var url = source.url;
                fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function(response) {
                    if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                        throw (0, _network_utils.createResponseStatusError)(response.status, url);
                    }
                    _this2._readCapability.resolve();
                    _this2._reader = response.body.getReader();
                });
                this.onProgress = null;
            }
            _createClass(PDFFetchStreamRangeReader, [ {
                key: "read",
                value: function() {
                    var _read2 = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                        var _ref2, value, done, buffer;
                        return _regenerator["default"].wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    _context2.next = 2;
                                    return this._readCapability.promise;

                                  case 2:
                                    _context2.next = 4;
                                    return this._reader.read();

                                  case 4:
                                    _ref2 = _context2.sent;
                                    value = _ref2.value;
                                    done = _ref2.done;
                                    if (!done) {
                                        _context2.next = 9;
                                        break;
                                    }
                                    return _context2.abrupt("return", {
                                        value: value,
                                        done: done
                                    });

                                  case 9:
                                    this._loaded += value.byteLength;
                                    if (this.onProgress) {
                                        this.onProgress({
                                            loaded: this._loaded
                                        });
                                    }
                                    buffer = new Uint8Array(value).buffer;
                                    return _context2.abrupt("return", {
                                        value: buffer,
                                        done: false
                                    });

                                  case 13:
                                  case "end":
                                    return _context2.stop();
                                }
                            }
                        }, _callee2, this);
                    }));
                    function read() {
                        return _read2.apply(this, arguments);
                    }
                    return read;
                }()
            }, {
                key: "cancel",
                value: function cancel(reason) {
                    if (this._reader) {
                        this._reader.cancel(reason);
                    }
                    if (this._abortController) {
                        this._abortController.abort();
                    }
                }
            }, {
                key: "isStreamingSupported",
                get: function get() {
                    return this._isStreamingSupported;
                }
            } ]);
            return PDFFetchStreamRangeReader;
        }();
    } ]);
});

(function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports, Symbol.toStringTag, {
                value: "Module"
            });
        }
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    };
    __webpack_require__.t = function(value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule) return value;
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", {
            enumerable: true,
            value: value
        });
        if (mode & 2 && typeof value != "string") for (var key in value) __webpack_require__.d(ns, key, function(key) {
            return value[key];
        }.bind(null, key));
        return ns;
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module["default"];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, "a", getter);
        return getter;
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = 0);
})([ function(module, exports, __webpack_require__) {
    "use strict";
    var pdfjsWebApp, pdfjsWebAppOptions;
    {
        pdfjsWebApp = __webpack_require__(1);
        pdfjsWebAppOptions = __webpack_require__(6);
    }
    {
        __webpack_require__(36);
    }
    {
        __webpack_require__(41);
    }
    function getViewerConfiguration() {
        return {
            appContainer: document.body,
            mainContainer: document.getElementById("viewerContainer"),
            viewerContainer: document.getElementById("viewer"),
            eventBus: null,
            toolbar: {
                container: document.getElementById("toolbarViewer"),
                numPages: document.getElementById("numPages"),
                pageNumber: document.getElementById("pageNumber"),
                scaleSelectContainer: document.getElementById("scaleSelectContainer"),
                scaleSelect: document.getElementById("scaleSelect"),
                customScaleOption: document.getElementById("customScaleOption"),
                previous: document.getElementById("previous"),
                next: document.getElementById("next"),
                zoomIn: document.getElementById("zoomIn"),
                zoomOut: document.getElementById("zoomOut"),
                viewFind: document.getElementById("viewFind"),
                openFile: document.getElementById("openFile"),
                print: document.getElementById("print"),
                presentationModeButton: document.getElementById("presentationMode"),
                download: document.getElementById("download"),
                viewBookmark: document.getElementById("viewBookmark")
            },
            secondaryToolbar: {
                toolbar: document.getElementById("secondaryToolbar"),
                toggleButton: document.getElementById("secondaryToolbarToggle"),
                toolbarButtonContainer: document.getElementById("secondaryToolbarButtonContainer"),
                presentationModeButton: document.getElementById("secondaryPresentationMode"),
                openFileButton: document.getElementById("secondaryOpenFile"),
                printButton: document.getElementById("secondaryPrint"),
                downloadButton: document.getElementById("secondaryDownload"),
                viewBookmarkButton: document.getElementById("secondaryViewBookmark"),
                firstPageButton: document.getElementById("firstPage"),
                lastPageButton: document.getElementById("lastPage"),
                pageRotateCwButton: document.getElementById("pageRotateCw"),
                pageRotateCcwButton: document.getElementById("pageRotateCcw"),
                cursorSelectToolButton: document.getElementById("cursorSelectTool"),
                cursorHandToolButton: document.getElementById("cursorHandTool"),
                scrollVerticalButton: document.getElementById("scrollVertical"),
                scrollHorizontalButton: document.getElementById("scrollHorizontal"),
                scrollWrappedButton: document.getElementById("scrollWrapped"),
                spreadNoneButton: document.getElementById("spreadNone"),
                spreadOddButton: document.getElementById("spreadOdd"),
                spreadEvenButton: document.getElementById("spreadEven"),
                documentPropertiesButton: document.getElementById("documentProperties")
            },
            fullscreen: {
                contextFirstPage: document.getElementById("contextFirstPage"),
                contextLastPage: document.getElementById("contextLastPage"),
                contextPageRotateCw: document.getElementById("contextPageRotateCw"),
                contextPageRotateCcw: document.getElementById("contextPageRotateCcw")
            },
            sidebar: {
                outerContainer: document.getElementById("outerContainer"),
                viewerContainer: document.getElementById("viewerContainer"),
                toggleButton: document.getElementById("sidebarToggle"),
                thumbnailButton: document.getElementById("viewThumbnail"),
                outlineButton: document.getElementById("viewOutline"),
                attachmentsButton: document.getElementById("viewAttachments"),
                thumbnailView: document.getElementById("thumbnailView"),
                outlineView: document.getElementById("outlineView"),
                attachmentsView: document.getElementById("attachmentsView")
            },
            sidebarResizer: {
                outerContainer: document.getElementById("outerContainer"),
                resizer: document.getElementById("sidebarResizer")
            },
            findBar: {
                bar: document.getElementById("findbar"),
                toggleButton: document.getElementById("viewFind"),
                findField: document.getElementById("findInput"),
                highlightAllCheckbox: document.getElementById("findHighlightAll"),
                caseSensitiveCheckbox: document.getElementById("findMatchCase"),
                entireWordCheckbox: document.getElementById("findEntireWord"),
                findMsg: document.getElementById("findMsg"),
                findResultsCount: document.getElementById("findResultsCount"),
                findPreviousButton: document.getElementById("findPrevious"),
                findNextButton: document.getElementById("findNext")
            },
            passwordOverlay: {
                overlayName: "passwordOverlay",
                container: document.getElementById("passwordOverlay"),
                label: document.getElementById("passwordText"),
                input: document.getElementById("password"),
                submitButton: document.getElementById("passwordSubmit"),
                cancelButton: document.getElementById("passwordCancel")
            },
            documentProperties: {
                overlayName: "documentPropertiesOverlay",
                container: document.getElementById("documentPropertiesOverlay"),
                closeButton: document.getElementById("documentPropertiesClose"),
                fields: {
                    fileName: document.getElementById("fileNameField"),
                    fileSize: document.getElementById("fileSizeField"),
                    title: document.getElementById("titleField"),
                    author: document.getElementById("authorField"),
                    subject: document.getElementById("subjectField"),
                    keywords: document.getElementById("keywordsField"),
                    creationDate: document.getElementById("creationDateField"),
                    modificationDate: document.getElementById("modificationDateField"),
                    creator: document.getElementById("creatorField"),
                    producer: document.getElementById("producerField"),
                    version: document.getElementById("versionField"),
                    pageCount: document.getElementById("pageCountField"),
                    pageSize: document.getElementById("pageSizeField"),
                    linearized: document.getElementById("linearizedField")
                }
            },
            errorWrapper: {
                container: document.getElementById("errorWrapper"),
                errorMessage: document.getElementById("errorMessage"),
                closeButton: document.getElementById("errorClose"),
                errorMoreInfo: document.getElementById("errorMoreInfo"),
                moreInfoButton: document.getElementById("errorShowMore"),
                lessInfoButton: document.getElementById("errorShowLess")
            },
            printContainer: document.getElementById("printContainer"),
            openFileInputName: "fileInput",
            debuggerScriptPath: "./debugger.js"
        };
    }
    function webViewerLoad() {
        debugger;
        var config = getViewerConfiguration();
        pdfjsWebApp.PDFViewerApplication.run(config);
    }
    document.addEventListener("InitMyViewer", webViewerLoad, true);
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFPrintServiceFactory = exports.DefaultExternalServices = exports.PDFViewerApplication = void 0;
    var _regenerator = _interopRequireDefault(__webpack_require__(2));
    var _ui_utils = __webpack_require__(5);
    var _app_options = __webpack_require__(6);
    var _pdfjsLib = __webpack_require__(7);
    var _pdf_cursor_tools = __webpack_require__(9);
    var _pdf_rendering_queue = __webpack_require__(11);
    var _pdf_sidebar = __webpack_require__(12);
    var _overlay_manager = __webpack_require__(13);
    var _password_prompt = __webpack_require__(14);
    var _pdf_attachment_viewer = __webpack_require__(15);
    var _pdf_document_properties = __webpack_require__(16);
    var _pdf_find_bar = __webpack_require__(17);
    var _pdf_find_controller = __webpack_require__(18);
    var _pdf_history = __webpack_require__(20);
    var _pdf_link_service = __webpack_require__(21);
    var _pdf_outline_viewer = __webpack_require__(22);
    var _pdf_presentation_mode = __webpack_require__(23);
    var _pdf_sidebar_resizer = __webpack_require__(24);
    var _pdf_thumbnail_viewer = __webpack_require__(25);
    var _pdf_viewer = __webpack_require__(27);
    var _secondary_toolbar = __webpack_require__(32);
    var _toolbar = __webpack_require__(34);
    var _view_history = __webpack_require__(35);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _asyncToGenerator(fn) {
        return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    var DEFAULT_SCALE_DELTA = 1.1;
    var DISABLE_AUTO_FETCH_LOADING_BAR_TIMEOUT = 5e3;
    var FORCE_PAGES_LOADED_TIMEOUT = 1e4;
    var WHEEL_ZOOM_DISABLED_TIMEOUT = 1e3;
    var ViewOnLoad = {
        UNKNOWN: -1,
        PREVIOUS: 0,
        INITIAL: 1
    };
    var DefaultExternalServices = {
        updateFindControlState: function updateFindControlState(data) {},
        updateFindMatchesCount: function updateFindMatchesCount(data) {},
        initPassiveLoading: function initPassiveLoading(callbacks) {},
        fallback: function fallback(data, callback) {},
        reportTelemetry: function reportTelemetry(data) {},
        createDownloadManager: function createDownloadManager(options) {
            throw new Error("Not implemented: createDownloadManager");
        },
        createPreferences: function createPreferences() {
            throw new Error("Not implemented: createPreferences");
        },
        createL10n: function createL10n(options) {
            throw new Error("Not implemented: createL10n");
        },
        supportsIntegratedFind: false,
        supportsDocumentFonts: true,
        supportsDocumentColors: true,
        supportedMouseWheelZoomModifierKeys: {
            ctrlKey: true,
            metaKey: true
        }
    };
    exports.DefaultExternalServices = DefaultExternalServices;
    var PDFViewerApplication = {
        initialBookmark: document.location.hash.substring(1),
        initialized: false,
        fellback: false,
        appConfig: null,
        pdfDocument: null,
        pdfLoadingTask: null,
        printService: null,
        pdfViewer: null,
        pdfThumbnailViewer: null,
        pdfRenderingQueue: null,
        pdfPresentationMode: null,
        pdfDocumentProperties: null,
        pdfLinkService: null,
        pdfHistory: null,
        pdfSidebar: null,
        pdfSidebarResizer: null,
        pdfOutlineViewer: null,
        pdfAttachmentViewer: null,
        pdfCursorTools: null,
        store: null,
        downloadManager: null,
        overlayManager: null,
        preferences: null,
        toolbar: null,
        secondaryToolbar: null,
        eventBus: null,
        l10n: null,
        isInitialViewSet: false,
        downloadComplete: false,
        isViewerEmbedded: window.parent !== window,
        url: "",
        baseUrl: "",
        externalServices: DefaultExternalServices,
        _boundEvents: {},
        contentDispositionFilename: null,
        initialize: function() {
            var _initialize = _asyncToGenerator(_regenerator["default"].mark(function _callee(appConfig) {
                var _this = this;
                var appContainer;
                return _regenerator["default"].wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            this.preferences = this.externalServices.createPreferences();
                            this.appConfig = appConfig;
                            _context.next = 4;
                            return this._readPreferences();

                          case 4:
                            _context.next = 6;
                            return this._parseHashParameters();

                          case 6:
                            _context.next = 8;
                            return this._initializeL10n();

                          case 8:
                            if (this.isViewerEmbedded && _app_options.AppOptions.get("externalLinkTarget") === _pdfjsLib.LinkTarget.NONE) {
                                _app_options.AppOptions.set("externalLinkTarget", _pdfjsLib.LinkTarget.TOP);
                            }
                            _context.next = 11;
                            return this._initializeViewerComponents();

                          case 11:
                            this.bindEvents();
                            this.bindWindowEvents();
                            appContainer = appConfig.appContainer || document.documentElement;
                            this.l10n.translate(appContainer).then(function() {
                                _this.eventBus.dispatch("localized", {
                                    source: _this
                                });
                            });
                            this.initialized = true;

                          case 16:
                          case "end":
                            return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
            function initialize(_x) {
                return _initialize.apply(this, arguments);
            }
            return initialize;
        }(),
        _readPreferences: function() {
            var _readPreferences2 = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                var prefs, name;
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (!(_app_options.AppOptions.get("disablePreferences") === true)) {
                                _context2.next = 2;
                                break;
                            }
                            return _context2.abrupt("return");

                          case 2:
                            _context2.prev = 2;
                            _context2.next = 5;
                            return this.preferences.getAll();

                          case 5:
                            prefs = _context2.sent;
                            for (name in prefs) {
                                _app_options.AppOptions.set(name, prefs[name]);
                            }
                            _context2.next = 12;
                            break;

                          case 9:
                            _context2.prev = 9;
                            _context2.t0 = _context2["catch"](2);
                            console.error('_readPreferences: "'.concat(_context2.t0.message, '".'));

                          case 12:
                          case "end":
                            return _context2.stop();
                        }
                    }
                }, _callee2, this, [ [ 2, 9 ] ]);
            }));
            function _readPreferences() {
                return _readPreferences2.apply(this, arguments);
            }
            return _readPreferences;
        }(),
        _parseHashParameters: function() {
            var _parseHashParameters2 = _asyncToGenerator(_regenerator["default"].mark(function _callee3() {
                var waitOn, hash, hashParams, viewer, enabled;
                return _regenerator["default"].wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            if (_app_options.AppOptions.get("pdfBugEnabled")) {
                                _context3.next = 2;
                                break;
                            }
                            return _context3.abrupt("return");

                          case 2:
                            waitOn = [];
                            hash = document.location.hash.substring(1);
                            hashParams = (0, _ui_utils.parseQueryString)(hash);
                            if ("disableworker" in hashParams && hashParams["disableworker"] === "true") {
                                waitOn.push(loadFakeWorker());
                            }
                            if ("disablerange" in hashParams) {
                                _app_options.AppOptions.set("disableRange", hashParams["disablerange"] === "true");
                            }
                            if ("disablestream" in hashParams) {
                                _app_options.AppOptions.set("disableStream", hashParams["disablestream"] === "true");
                            }
                            if ("disableautofetch" in hashParams) {
                                _app_options.AppOptions.set("disableAutoFetch", hashParams["disableautofetch"] === "true");
                            }
                            if ("disablefontface" in hashParams) {
                                _app_options.AppOptions.set("disableFontFace", hashParams["disablefontface"] === "true");
                            }
                            if ("disablehistory" in hashParams) {
                                _app_options.AppOptions.set("disableHistory", hashParams["disablehistory"] === "true");
                            }
                            if ("webgl" in hashParams) {
                                _app_options.AppOptions.set("enableWebGL", hashParams["webgl"] === "true");
                            }
                            if ("useonlycsszoom" in hashParams) {
                                _app_options.AppOptions.set("useOnlyCssZoom", hashParams["useonlycsszoom"] === "true");
                            }
                            if ("verbosity" in hashParams) {
                                _app_options.AppOptions.set("verbosity", hashParams["verbosity"] | 0);
                            }
                            if (!("textlayer" in hashParams)) {
                                _context3.next = 23;
                                break;
                            }
                            _context3.t0 = hashParams["textlayer"];
                            _context3.next = _context3.t0 === "off" ? 18 : _context3.t0 === "visible" ? 20 : _context3.t0 === "shadow" ? 20 : _context3.t0 === "hover" ? 20 : 23;
                            break;

                          case 18:
                            _app_options.AppOptions.set("textLayerMode", _ui_utils.TextLayerMode.DISABLE);
                            return _context3.abrupt("break", 23);

                          case 20:
                            viewer = this.appConfig.viewerContainer;
                            viewer.classList.add("textLayer-" + hashParams["textlayer"]);
                            return _context3.abrupt("break", 23);

                          case 23:
                            if ("pdfbug" in hashParams) {
                                _app_options.AppOptions.set("pdfBug", true);
                                enabled = hashParams["pdfbug"].split(",");
                                waitOn.push(loadAndEnablePDFBug(enabled));
                            }
                            if ("locale" in hashParams) {
                                _app_options.AppOptions.set("locale", hashParams["locale"]);
                            }
                            return _context3.abrupt("return", Promise.all(waitOn)["catch"](function(reason) {
                                console.error('_parseHashParameters: "'.concat(reason.message, '".'));
                            }));

                          case 26:
                          case "end":
                            return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
            function _parseHashParameters() {
                return _parseHashParameters2.apply(this, arguments);
            }
            return _parseHashParameters;
        }(),
        _initializeL10n: function() {
            var _initializeL10n2 = _asyncToGenerator(_regenerator["default"].mark(function _callee4() {
                var dir;
                return _regenerator["default"].wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            this.l10n = this.externalServices.createL10n({
                                locale: _app_options.AppOptions.get("locale")
                            });
                            _context4.next = 3;
                            return this.l10n.getDirection();

                          case 3:
                            dir = _context4.sent;
                            document.getElementsByTagName("html")[0].dir = dir;

                          case 5:
                          case "end":
                            return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));
            function _initializeL10n() {
                return _initializeL10n2.apply(this, arguments);
            }
            return _initializeL10n;
        }(),
        _initializeViewerComponents: function() {
            var _initializeViewerComponents2 = _asyncToGenerator(_regenerator["default"].mark(function _callee5() {
                var appConfig, eventBus, pdfRenderingQueue, pdfLinkService, downloadManager, findController, container, viewer;
                return _regenerator["default"].wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            console.log("XXX _initializeViewerComponents");
                            appConfig = this.appConfig;
                            this.overlayManager = new _overlay_manager.OverlayManager();
                            eventBus = appConfig.eventBus || (0, _ui_utils.getGlobalEventBus)(_app_options.AppOptions.get("eventBusDispatchToDOM"));
                            this.eventBus = eventBus;
                            pdfRenderingQueue = new _pdf_rendering_queue.PDFRenderingQueue();
                            pdfRenderingQueue.onIdle = this.cleanup.bind(this);
                            this.pdfRenderingQueue = pdfRenderingQueue;
                            pdfLinkService = new _pdf_link_service.PDFLinkService({
                                eventBus: eventBus,
                                externalLinkTarget: _app_options.AppOptions.get("externalLinkTarget"),
                                externalLinkRel: _app_options.AppOptions.get("externalLinkRel")
                            });
                            this.pdfLinkService = pdfLinkService;
                            downloadManager = this.externalServices.createDownloadManager({
                                disableCreateObjectURL: _app_options.AppOptions.get("disableCreateObjectURL")
                            });
                            this.downloadManager = downloadManager;
                            findController = new _pdf_find_controller.PDFFindController({
                                linkService: pdfLinkService,
                                eventBus: eventBus
                            });
                            this.findController = findController;
                            container = appConfig.mainContainer;
                            viewer = appConfig.viewerContainer;
                            this.pdfViewer = new _pdf_viewer.PDFViewer({
                                container: container,
                                viewer: viewer,
                                eventBus: eventBus,
                                renderingQueue: pdfRenderingQueue,
                                linkService: pdfLinkService,
                                downloadManager: downloadManager,
                                findController: findController,
                                renderer: _app_options.AppOptions.get("renderer"),
                                enableWebGL: _app_options.AppOptions.get("enableWebGL"),
                                l10n: this.l10n,
                                textLayerMode: _app_options.AppOptions.get("textLayerMode"),
                                imageResourcesPath: _app_options.AppOptions.get("imageResourcesPath"),
                                renderInteractiveForms: _app_options.AppOptions.get("renderInteractiveForms"),
                                enablePrintAutoRotate: _app_options.AppOptions.get("enablePrintAutoRotate"),
                                useOnlyCssZoom: _app_options.AppOptions.get("useOnlyCssZoom"),
                                maxCanvasPixels: _app_options.AppOptions.get("maxCanvasPixels")
                            });
                            pdfRenderingQueue.setViewer(this.pdfViewer);
                            pdfLinkService.setViewer(this.pdfViewer);
                            this.pdfThumbnailViewer = new _pdf_thumbnail_viewer.PDFThumbnailViewer({
                                container: appConfig.sidebar.thumbnailView,
                                renderingQueue: pdfRenderingQueue,
                                linkService: pdfLinkService,
                                l10n: this.l10n
                            });
                            pdfRenderingQueue.setThumbnailViewer(this.pdfThumbnailViewer);
                            this.pdfHistory = new _pdf_history.PDFHistory({
                                linkService: pdfLinkService,
                                eventBus: eventBus
                            });
                            pdfLinkService.setHistory(this.pdfHistory);
                            this.findBar = new _pdf_find_bar.PDFFindBar(appConfig.findBar, eventBus, this.l10n);
                            this.pdfDocumentProperties = new _pdf_document_properties.PDFDocumentProperties(appConfig.documentProperties, this.overlayManager, eventBus, this.l10n);
                            this.pdfCursorTools = new _pdf_cursor_tools.PDFCursorTools({
                                container: container,
                                eventBus: eventBus,
                                cursorToolOnLoad: _app_options.AppOptions.get("cursorToolOnLoad")
                            });
                            this.toolbar = new _toolbar.Toolbar(appConfig.toolbar, eventBus, this.l10n);
                            this.secondaryToolbar = new _secondary_toolbar.SecondaryToolbar(appConfig.secondaryToolbar, container, eventBus);
                            if (this.supportsFullscreen) {
                                this.pdfPresentationMode = new _pdf_presentation_mode.PDFPresentationMode({
                                    container: container,
                                    viewer: viewer,
                                    pdfViewer: this.pdfViewer,
                                    eventBus: eventBus,
                                    contextMenuItems: appConfig.fullscreen
                                });
                            }
                            this.passwordPrompt = new _password_prompt.PasswordPrompt(appConfig.passwordOverlay, this.overlayManager, this.l10n);
                            this.pdfOutlineViewer = new _pdf_outline_viewer.PDFOutlineViewer({
                                container: appConfig.sidebar.outlineView,
                                eventBus: eventBus,
                                linkService: pdfLinkService
                            });
                            this.pdfAttachmentViewer = new _pdf_attachment_viewer.PDFAttachmentViewer({
                                container: appConfig.sidebar.attachmentsView,
                                eventBus: eventBus,
                                downloadManager: downloadManager
                            });
                            this.pdfSidebar = new _pdf_sidebar.PDFSidebar({
                                elements: appConfig.sidebar,
                                pdfViewer: this.pdfViewer,
                                pdfThumbnailViewer: this.pdfThumbnailViewer,
                                eventBus: eventBus,
                                l10n: this.l10n
                            });
                            this.pdfSidebar.onToggled = this.forceRendering.bind(this);
                            this.pdfSidebarResizer = new _pdf_sidebar_resizer.PDFSidebarResizer(appConfig.sidebarResizer, eventBus, this.l10n);

                          case 35:
                          case "end":
                            return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));
            function _initializeViewerComponents() {
                return _initializeViewerComponents2.apply(this, arguments);
            }
            return _initializeViewerComponents;
        }(),
        run: function run(config) {
            this.initialize(config).then(webViewerInitialized);
        },
        zoomIn: function zoomIn(ticks) {
            var newScale = this.pdfViewer.currentScale;
            do {
                newScale = (newScale * DEFAULT_SCALE_DELTA).toFixed(2);
                newScale = Math.ceil(newScale * 10) / 10;
                newScale = Math.min(_ui_utils.MAX_SCALE, newScale);
            } while (--ticks > 0 && newScale < _ui_utils.MAX_SCALE);
            this.pdfViewer.currentScaleValue = newScale;
        },
        zoomOut: function zoomOut(ticks) {
            var newScale = this.pdfViewer.currentScale;
            do {
                newScale = (newScale / DEFAULT_SCALE_DELTA).toFixed(2);
                newScale = Math.floor(newScale * 10) / 10;
                newScale = Math.max(_ui_utils.MIN_SCALE, newScale);
            } while (--ticks > 0 && newScale > _ui_utils.MIN_SCALE);
            this.pdfViewer.currentScaleValue = newScale;
        },
        zoomReset: function zoomReset() {
            var ignoreDuplicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            if (this.pdfViewer.isInPresentationMode) {
                return;
            } else if (ignoreDuplicate && this.pdfViewer.currentScaleValue === _ui_utils.DEFAULT_SCALE_VALUE) {
                return;
            }
            this.pdfViewer.currentScaleValue = _ui_utils.DEFAULT_SCALE_VALUE;
        },
        get pagesCount() {
            return this.pdfDocument ? this.pdfDocument.numPages : 0;
        },
        set page(val) {
            this.pdfViewer.currentPageNumber = val;
        },
        get page() {
            return this.pdfViewer.currentPageNumber;
        },
        get printing() {
            return !!this.printService;
        },
        get supportsPrinting() {
            return PDFPrintServiceFactory.instance.supportsPrinting;
        },
        get supportsFullscreen() {
            var support;
            var doc = document.documentElement;
            support = !!(doc.requestFullscreen || doc.mozRequestFullScreen || doc.webkitRequestFullScreen || doc.msRequestFullscreen);
            if (document.fullscreenEnabled === false || document.mozFullScreenEnabled === false || document.webkitFullscreenEnabled === false || document.msFullscreenEnabled === false) {
                support = false;
            }
            return (0, _pdfjsLib.shadow)(this, "supportsFullscreen", support);
        },
        get supportsIntegratedFind() {
            return this.externalServices.supportsIntegratedFind;
        },
        get supportsDocumentFonts() {
            return this.externalServices.supportsDocumentFonts;
        },
        get supportsDocumentColors() {
            return this.externalServices.supportsDocumentColors;
        },
        get loadingBar() {
            var bar = new _ui_utils.ProgressBar("#loadingBar");
            return (0, _pdfjsLib.shadow)(this, "loadingBar", bar);
        },
        get supportedMouseWheelZoomModifierKeys() {
            return this.externalServices.supportedMouseWheelZoomModifierKeys;
        },
        initPassiveLoading: function initPassiveLoading() {
            throw new Error("Not implemented: initPassiveLoading");
        },
        setTitleUsingUrl: function setTitleUsingUrl() {
            var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            this.url = url;
            this.baseUrl = url.split("#")[0];
            var title = (0, _ui_utils.getPDFFileNameFromURL)(url, "");
            if (!title) {
                try {
                    title = decodeURIComponent((0, _pdfjsLib.getFilenameFromUrl)(url)) || url;
                } catch (ex) {
                    title = url;
                }
            }
            this.setTitle(title);
        },
        setTitle: function setTitle(title) {
            if (this.isViewerEmbedded) {
                return;
            }
            document.title = title;
        },
        close: function() {
            var _close = _asyncToGenerator(_regenerator["default"].mark(function _callee6() {
                var errorWrapper, promise;
                return _regenerator["default"].wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            errorWrapper = this.appConfig.errorWrapper.container;
                            errorWrapper.setAttribute("hidden", "true");
                            if (this.pdfLoadingTask) {
                                _context6.next = 4;
                                break;
                            }
                            return _context6.abrupt("return");

                          case 4:
                            promise = this.pdfLoadingTask.destroy();
                            this.pdfLoadingTask = null;
                            if (this.pdfDocument) {
                                this.pdfDocument = null;
                                this.pdfThumbnailViewer.setDocument(null);
                                this.pdfViewer.setDocument(null);
                                this.pdfLinkService.setDocument(null);
                                this.pdfDocumentProperties.setDocument(null);
                            }
                            this.store = null;
                            this.isInitialViewSet = false;
                            this.downloadComplete = false;
                            this.url = "";
                            this.baseUrl = "";
                            this.contentDispositionFilename = null;
                            this.pdfSidebar.reset();
                            this.pdfOutlineViewer.reset();
                            this.pdfAttachmentViewer.reset();
                            this.findBar.reset();
                            this.toolbar.reset();
                            this.secondaryToolbar.reset();
                            if (typeof PDFBug !== "undefined") {
                                PDFBug.cleanup();
                            }
                            return _context6.abrupt("return", promise);

                          case 21:
                          case "end":
                            return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));
            function close() {
                return _close.apply(this, arguments);
            }
            return close;
        }(),
        open: function() {
            var _open = _asyncToGenerator(_regenerator["default"].mark(function _callee7(file, args) {
                var _this2 = this;
                var workerParameters, key, parameters, apiParameters, _key, prop, loadingTask;
                return _regenerator["default"].wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                          case 0:
                            if (!this.pdfLoadingTask) {
                                _context7.next = 3;
                                break;
                            }
                            _context7.next = 3;
                            return this.close();

                          case 3:
                            workerParameters = _app_options.AppOptions.getAll(_app_options.OptionKind.WORKER);
                            for (key in workerParameters) {
                                _pdfjsLib.GlobalWorkerOptions[key] = workerParameters[key];
                            }
                            parameters = Object.create(null);
                            if (typeof file === "string") {
                                this.setTitleUsingUrl(file);
                                parameters.url = file;
                            } else if (file && "byteLength" in file) {
                                parameters.data = file;
                            } else if (file.url && file.originalUrl) {
                                this.setTitleUsingUrl(file.originalUrl);
                                parameters.url = file.url;
                            }
                            apiParameters = _app_options.AppOptions.getAll(_app_options.OptionKind.API);
                            for (_key in apiParameters) {
                                parameters[_key] = apiParameters[_key];
                            }
                            if (args) {
                                for (prop in args) {
                                    if (prop === "length") {
                                        this.pdfDocumentProperties.setFileSize(args[prop]);
                                    }
                                    parameters[prop] = args[prop];
                                }
                            }
                            loadingTask = (0, _pdfjsLib.getDocument)(parameters);
                            this.pdfLoadingTask = loadingTask;
                            loadingTask.onPassword = function(updateCallback, reason) {
                                _this2.passwordPrompt.setUpdateCallback(updateCallback, reason);
                                _this2.passwordPrompt.open();
                            };
                            loadingTask.onProgress = function(_ref) {
                                var loaded = _ref.loaded, total = _ref.total;
                                _this2.progress(loaded / total);
                            };
                            loadingTask.onUnsupportedFeature = this.fallback.bind(this);
                            return _context7.abrupt("return", loadingTask.promise.then(function(pdfDocument) {
                                _this2.load(pdfDocument);
                            }, function(exception) {
                                if (loadingTask !== _this2.pdfLoadingTask) {
                                    return;
                                }
                                var message = exception && exception.message;
                                var loadingErrorMessage;
                                if (exception instanceof _pdfjsLib.InvalidPDFException) {
                                    loadingErrorMessage = _this2.l10n.get("invalid_file_error", null, "Invalid or corrupted PDF file.");
                                } else if (exception instanceof _pdfjsLib.MissingPDFException) {
                                    loadingErrorMessage = _this2.l10n.get("missing_file_error", null, "Missing PDF file.");
                                } else if (exception instanceof _pdfjsLib.UnexpectedResponseException) {
                                    loadingErrorMessage = _this2.l10n.get("unexpected_response_error", null, "Unexpected server response.");
                                } else {
                                    loadingErrorMessage = _this2.l10n.get("loading_error", null, "An error occurred while loading the PDF.");
                                }
                                return loadingErrorMessage.then(function(msg) {
                                    _this2.error(msg, {
                                        message: message
                                    });
                                    throw new Error(msg);
                                });
                            }));

                          case 16:
                          case "end":
                            return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));
            function open(_x2, _x3) {
                return _open.apply(this, arguments);
            }
            return open;
        }(),
        download: function download() {
            var _this3 = this;
            function downloadByUrl() {
                downloadManager.downloadUrl(url, filename);
            }
            var url = this.baseUrl;
            var filename = this.contentDispositionFilename || (0, _ui_utils.getPDFFileNameFromURL)(this.url);
            var downloadManager = this.downloadManager;
            downloadManager.onerror = function(err) {
                _this3.error("PDF failed to download: ".concat(err));
            };
            if (!this.pdfDocument || !this.downloadComplete) {
                downloadByUrl();
                return;
            }
            this.pdfDocument.getData().then(function(data) {
                var blob = new Blob([ data ], {
                    type: "application/pdf"
                });
                downloadManager.download(blob, url, filename);
            })["catch"](downloadByUrl);
        },
        fallback: function fallback(featureId) {},
        error: function error(message, moreInfo) {
            var moreInfoText = [ this.l10n.get("error_version_info", {
                version: _pdfjsLib.version || "?",
                build: _pdfjsLib.build || "?"
            }, "PDF.js v{{version}} (build: {{build}})") ];
            if (moreInfo) {
                moreInfoText.push(this.l10n.get("error_message", {
                    message: moreInfo.message
                }, "Message: {{message}}"));
                if (moreInfo.stack) {
                    moreInfoText.push(this.l10n.get("error_stack", {
                        stack: moreInfo.stack
                    }, "Stack: {{stack}}"));
                } else {
                    if (moreInfo.filename) {
                        moreInfoText.push(this.l10n.get("error_file", {
                            file: moreInfo.filename
                        }, "File: {{file}}"));
                    }
                    if (moreInfo.lineNumber) {
                        moreInfoText.push(this.l10n.get("error_line", {
                            line: moreInfo.lineNumber
                        }, "Line: {{line}}"));
                    }
                }
            }
            var errorWrapperConfig = this.appConfig.errorWrapper;
            var errorWrapper = errorWrapperConfig.container;
            errorWrapper.removeAttribute("hidden");
            var errorMessage = errorWrapperConfig.errorMessage;
            errorMessage.textContent = message;
            var closeButton = errorWrapperConfig.closeButton;
            closeButton.onclick = function() {
                errorWrapper.setAttribute("hidden", "true");
            };
            var errorMoreInfo = errorWrapperConfig.errorMoreInfo;
            var moreInfoButton = errorWrapperConfig.moreInfoButton;
            var lessInfoButton = errorWrapperConfig.lessInfoButton;
            moreInfoButton.onclick = function() {
                errorMoreInfo.removeAttribute("hidden");
                moreInfoButton.setAttribute("hidden", "true");
                lessInfoButton.removeAttribute("hidden");
                errorMoreInfo.style.height = errorMoreInfo.scrollHeight + "px";
            };
            lessInfoButton.onclick = function() {
                errorMoreInfo.setAttribute("hidden", "true");
                moreInfoButton.removeAttribute("hidden");
                lessInfoButton.setAttribute("hidden", "true");
            };
            moreInfoButton.oncontextmenu = _ui_utils.noContextMenuHandler;
            lessInfoButton.oncontextmenu = _ui_utils.noContextMenuHandler;
            closeButton.oncontextmenu = _ui_utils.noContextMenuHandler;
            moreInfoButton.removeAttribute("hidden");
            lessInfoButton.setAttribute("hidden", "true");
            Promise.all(moreInfoText).then(function(parts) {
                errorMoreInfo.value = parts.join("\n");
            });
        },
        progress: function progress(level) {
            var _this4 = this;
            if (this.downloadComplete) {
                return;
            }
            var percent = Math.round(level * 100);
            if (percent > this.loadingBar.percent || isNaN(percent)) {
                this.loadingBar.percent = percent;
                var disableAutoFetch = this.pdfDocument ? this.pdfDocument.loadingParams["disableAutoFetch"] : _app_options.AppOptions.get("disableAutoFetch");
                if (disableAutoFetch && percent) {
                    if (this.disableAutoFetchLoadingBarTimeout) {
                        clearTimeout(this.disableAutoFetchLoadingBarTimeout);
                        this.disableAutoFetchLoadingBarTimeout = null;
                    }
                    this.loadingBar.show();
                    this.disableAutoFetchLoadingBarTimeout = setTimeout(function() {
                        _this4.loadingBar.hide();
                        _this4.disableAutoFetchLoadingBarTimeout = null;
                    }, DISABLE_AUTO_FETCH_LOADING_BAR_TIMEOUT);
                }
            }
        },
        load: function load(pdfDocument) {
            var _this5 = this;
            this.pdfDocument = pdfDocument;
            pdfDocument.getDownloadInfo().then(function() {
                _this5.downloadComplete = true;
                _this5.loadingBar.hide();
                firstPagePromise.then(function() {
                    _this5.eventBus.dispatch("documentloaded", {
                        source: _this5
                    });
                });
            });
            var pageLayoutPromise = pdfDocument.getPageLayout()["catch"](function() {});
            var pageModePromise = pdfDocument.getPageMode()["catch"](function() {});
            var openActionDestPromise = pdfDocument.getOpenActionDestination()["catch"](function() {});
            this.toolbar.setPagesCount(pdfDocument.numPages, false);
            this.secondaryToolbar.setPagesCount(pdfDocument.numPages);
            var store = this.store = new _view_history.ViewHistory(pdfDocument.fingerprint);
            var baseDocumentUrl;
            baseDocumentUrl = null;
            this.pdfLinkService.setDocument(pdfDocument, baseDocumentUrl);
            this.pdfDocumentProperties.setDocument(pdfDocument, this.url);
            var pdfViewer = this.pdfViewer;
            pdfViewer.setDocument(pdfDocument);
            var firstPagePromise = pdfViewer.firstPagePromise;
            var pagesPromise = pdfViewer.pagesPromise;
            var onePageRendered = pdfViewer.onePageRendered;
            var pdfThumbnailViewer = this.pdfThumbnailViewer;
            pdfThumbnailViewer.setDocument(pdfDocument);
            firstPagePromise.then(function(pdfPage) {
                _this5.loadingBar.setWidth(_this5.appConfig.viewerContainer);
                var storePromise = store.getMultiple({
                    page: null,
                    zoom: _ui_utils.DEFAULT_SCALE_VALUE,
                    scrollLeft: "0",
                    scrollTop: "0",
                    rotation: null,
                    sidebarView: _pdf_sidebar.SidebarView.UNKNOWN,
                    scrollMode: _ui_utils.ScrollMode.UNKNOWN,
                    spreadMode: _ui_utils.SpreadMode.UNKNOWN
                })["catch"](function() {});
                Promise.all([ storePromise, pageLayoutPromise, pageModePromise, openActionDestPromise ]).then(function() {
                    var _ref3 = _asyncToGenerator(_regenerator["default"].mark(function _callee8(_ref2) {
                        var _ref4, _ref4$, values, pageLayout, pageMode, openActionDest, viewOnLoad, initialBookmark, zoom, hash, rotation, sidebarView, scrollMode, spreadMode;
                        return _regenerator["default"].wrap(function _callee8$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                  case 0:
                                    _ref4 = _slicedToArray(_ref2, 4), _ref4$ = _ref4[0], values = _ref4$ === void 0 ? {} : _ref4$, 
                                    pageLayout = _ref4[1], pageMode = _ref4[2], openActionDest = _ref4[3];
                                    viewOnLoad = _app_options.AppOptions.get("viewOnLoad");
                                    _this5._initializePdfHistory({
                                        fingerprint: pdfDocument.fingerprint,
                                        viewOnLoad: viewOnLoad,
                                        initialDest: openActionDest
                                    });
                                    initialBookmark = _this5.initialBookmark;
                                    zoom = _app_options.AppOptions.get("defaultZoomValue");
                                    hash = zoom ? "zoom=".concat(zoom) : null;
                                    rotation = null;
                                    sidebarView = _app_options.AppOptions.get("sidebarViewOnLoad");
                                    scrollMode = _app_options.AppOptions.get("scrollModeOnLoad");
                                    spreadMode = _app_options.AppOptions.get("spreadModeOnLoad");
                                    if (values.page && viewOnLoad !== ViewOnLoad.INITIAL) {
                                        hash = "page=".concat(values.page, "&zoom=").concat(zoom || values.zoom, ",") + "".concat(values.scrollLeft, ",").concat(values.scrollTop);
                                        rotation = parseInt(values.rotation, 10);
                                        if (sidebarView === _pdf_sidebar.SidebarView.UNKNOWN) {
                                            sidebarView = values.sidebarView | 0;
                                        }
                                        if (scrollMode === _ui_utils.ScrollMode.UNKNOWN) {
                                            scrollMode = values.scrollMode | 0;
                                        }
                                        if (spreadMode === _ui_utils.SpreadMode.UNKNOWN) {
                                            spreadMode = values.spreadMode | 0;
                                        }
                                    }
                                    if (pageMode && sidebarView === _pdf_sidebar.SidebarView.UNKNOWN) {
                                        sidebarView = apiPageModeToSidebarView(pageMode);
                                    }
                                    if (pageLayout && spreadMode === _ui_utils.SpreadMode.UNKNOWN) {
                                        spreadMode = apiPageLayoutToSpreadMode(pageLayout);
                                    }
                                    _this5.setInitialView(hash, {
                                        rotation: rotation,
                                        sidebarView: sidebarView,
                                        scrollMode: scrollMode,
                                        spreadMode: spreadMode
                                    });
                                    _this5.eventBus.dispatch("documentinit", {
                                        source: _this5
                                    });
                                    if (!_this5.isViewerEmbedded) {
                                        pdfViewer.focus();
                                    }
                                    _context8.next = 18;
                                    return Promise.race([ pagesPromise, new Promise(function(resolve) {
                                        setTimeout(resolve, FORCE_PAGES_LOADED_TIMEOUT);
                                    }) ]);

                                  case 18:
                                    if (!(!initialBookmark && !hash)) {
                                        _context8.next = 20;
                                        break;
                                    }
                                    return _context8.abrupt("return");

                                  case 20:
                                    if (!pdfViewer.hasEqualPageSizes) {
                                        _context8.next = 22;
                                        break;
                                    }
                                    return _context8.abrupt("return");

                                  case 22:
                                    _this5.initialBookmark = initialBookmark;
                                    pdfViewer.currentScaleValue = pdfViewer.currentScaleValue;
                                    _this5.setInitialView(hash);

                                  case 25:
                                  case "end":
                                    return _context8.stop();
                                }
                            }
                        }, _callee8);
                    }));
                    return function(_x4) {
                        return _ref3.apply(this, arguments);
                    };
                }())["catch"](function() {
                    _this5.setInitialView();
                }).then(function() {
                    pdfViewer.update();
                });
            });
            pdfDocument.getPageLabels().then(function(labels) {
                if (!labels || _app_options.AppOptions.get("disablePageLabels")) {
                    return;
                }
                var i = 0, numLabels = labels.length;
                if (numLabels !== _this5.pagesCount) {
                    console.error("The number of Page Labels does not match " + "the number of pages in the document.");
                    return;
                }
                while (i < numLabels && labels[i] === (i + 1).toString()) {
                    i++;
                }
                if (i === numLabels) {
                    return;
                }
                pdfViewer.setPageLabels(labels);
                pdfThumbnailViewer.setPageLabels(labels);
                _this5.toolbar.setPagesCount(pdfDocument.numPages, true);
                _this5.toolbar.setPageNumber(pdfViewer.currentPageNumber, pdfViewer.currentPageLabel);
            });
            pagesPromise.then(function() {
                if (!_this5.supportsPrinting) {
                    return;
                }
                pdfDocument.getJavaScript().then(function(javaScript) {
                    if (!javaScript) {
                        return;
                    }
                    javaScript.some(function(js) {
                        if (!js) {
                            return false;
                        }
                        console.warn("Warning: JavaScript is not supported");
                        _this5.fallback(_pdfjsLib.UNSUPPORTED_FEATURES.javaScript);
                        return true;
                    });
                    var regex = /\bprint\s*\(/;
                    for (var i = 0, ii = javaScript.length; i < ii; i++) {
                        var js = javaScript[i];
                        if (js && regex.test(js)) {
                            setTimeout(function() {
                                window.print();
                            });
                            return;
                        }
                    }
                });
            });
            Promise.all([ onePageRendered, _ui_utils.animationStarted ]).then(function() {
                pdfDocument.getOutline().then(function(outline) {
                    _this5.pdfOutlineViewer.render({
                        outline: outline
                    });
                });
                pdfDocument.getAttachments().then(function(attachments) {
                    _this5.pdfAttachmentViewer.render({
                        attachments: attachments
                    });
                });
            });
            pdfDocument.getMetadata().then(function(_ref5) {
                var info = _ref5.info, metadata = _ref5.metadata, contentDispositionFilename = _ref5.contentDispositionFilename;
                _this5.documentInfo = info;
                _this5.metadata = metadata;
                _this5.contentDispositionFilename = contentDispositionFilename;
                console.log("PDF " + pdfDocument.fingerprint + " [" + info.PDFFormatVersion + " " + (info.Producer || "-").trim() + " / " + (info.Creator || "-").trim() + "]" + " (PDF.js: " + (_pdfjsLib.version || "-") + (_app_options.AppOptions.get("enableWebGL") ? " [WebGL]" : "") + ")");
                var pdfTitle;
                if (metadata && metadata.has("dc:title")) {
                    var title = metadata.get("dc:title");
                    if (title !== "Untitled") {
                        pdfTitle = title;
                    }
                }
                if (!pdfTitle && info && info["Title"]) {
                    pdfTitle = info["Title"];
                }
                if (pdfTitle) {
                    _this5.setTitle("".concat(pdfTitle, " - ").concat(contentDispositionFilename || document.title));
                } else if (contentDispositionFilename) {
                    _this5.setTitle(contentDispositionFilename);
                }
                if (info.IsAcroFormPresent) {
                    console.warn("Warning: AcroForm/XFA is not supported");
                    _this5.fallback(_pdfjsLib.UNSUPPORTED_FEATURES.forms);
                }
            });
        },
        _initializePdfHistory: function _initializePdfHistory(_ref6) {
            var fingerprint = _ref6.fingerprint, viewOnLoad = _ref6.viewOnLoad, _ref6$initialDest = _ref6.initialDest, initialDest = _ref6$initialDest === void 0 ? null : _ref6$initialDest;
            if (_app_options.AppOptions.get("disableHistory") || this.isViewerEmbedded) {
                return;
            }
            this.pdfHistory.initialize({
                fingerprint: fingerprint,
                resetHistory: viewOnLoad === ViewOnLoad.INITIAL,
                updateUrl: _app_options.AppOptions.get("historyUpdateUrl")
            });
            if (this.pdfHistory.initialBookmark) {
                this.initialBookmark = this.pdfHistory.initialBookmark;
                this.initialRotation = this.pdfHistory.initialRotation;
            }
            if (initialDest && !this.initialBookmark && viewOnLoad === ViewOnLoad.UNKNOWN) {
                this.initialBookmark = JSON.stringify(initialDest);
                this.pdfHistory.push({
                    explicitDest: initialDest,
                    pageNumber: null
                });
            }
        },
        setInitialView: function setInitialView(storedHash) {
            var _this6 = this;
            var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, rotation = _ref7.rotation, sidebarView = _ref7.sidebarView, scrollMode = _ref7.scrollMode, spreadMode = _ref7.spreadMode;
            var setRotation = function setRotation(angle) {
                if ((0, _ui_utils.isValidRotation)(angle)) {
                    _this6.pdfViewer.pagesRotation = angle;
                }
            };
            var setViewerModes = function setViewerModes(scroll, spread) {
                if ((0, _ui_utils.isValidScrollMode)(scroll)) {
                    _this6.pdfViewer.scrollMode = scroll;
                }
                if ((0, _ui_utils.isValidSpreadMode)(spread)) {
                    _this6.pdfViewer.spreadMode = spread;
                }
            };
            this.isInitialViewSet = true;
            this.pdfSidebar.setInitialView(sidebarView);
            setViewerModes(scrollMode, spreadMode);
            if (this.initialBookmark) {
                setRotation(this.initialRotation);
                delete this.initialRotation;
                this.pdfLinkService.setHash(this.initialBookmark);
                this.initialBookmark = null;
            } else if (storedHash) {
                setRotation(rotation);
                this.pdfLinkService.setHash(storedHash);
            }
            this.toolbar.setPageNumber(this.pdfViewer.currentPageNumber, this.pdfViewer.currentPageLabel);
            this.secondaryToolbar.setPageNumber(this.pdfViewer.currentPageNumber);
            if (!this.pdfViewer.currentScaleValue) {
                this.pdfViewer.currentScaleValue = _ui_utils.DEFAULT_SCALE_VALUE;
            }
        },
        cleanup: function cleanup() {
            if (!this.pdfDocument) {
                return;
            }
            this.pdfViewer.cleanup();
            this.pdfThumbnailViewer.cleanup();
            if (this.pdfViewer.renderer !== _ui_utils.RendererType.SVG) {
                this.pdfDocument.cleanup();
            }
        },
        forceRendering: function forceRendering() {
            this.pdfRenderingQueue.printing = this.printing;
            this.pdfRenderingQueue.isThumbnailViewEnabled = this.pdfSidebar.isThumbnailViewVisible;
            this.pdfRenderingQueue.renderHighestPriority();
        },
        beforePrint: function beforePrint() {
            var _this7 = this;
            if (this.printService) {
                return;
            }
            if (!this.supportsPrinting) {
                this.l10n.get("printing_not_supported", null, "Warning: Printing is not fully supported by " + "this browser.").then(function(printMessage) {
                    _this7.error(printMessage);
                });
                return;
            }
            if (!this.pdfViewer.pageViewsReady) {
                this.l10n.get("printing_not_ready", null, "Warning: The PDF is not fully loaded for printing.").then(function(notReadyMessage) {
                    window.alert(notReadyMessage);
                });
                return;
            }
            var pagesOverview = this.pdfViewer.getPagesOverview();
            var printContainer = this.appConfig.printContainer;
            var printService = PDFPrintServiceFactory.instance.createPrintService(this.pdfDocument, pagesOverview, printContainer, this.l10n);
            this.printService = printService;
            this.forceRendering();
            printService.layout();
        },
        afterPrint: function pdfViewSetupAfterPrint() {
            if (this.printService) {
                this.printService.destroy();
                this.printService = null;
            }
            this.forceRendering();
        },
        rotatePages: function rotatePages(delta) {
            if (!this.pdfDocument) {
                return;
            }
            var newRotation = (this.pdfViewer.pagesRotation + 360 + delta) % 360;
            this.pdfViewer.pagesRotation = newRotation;
        },
        requestPresentationMode: function requestPresentationMode() {
            if (!this.pdfPresentationMode) {
                return;
            }
            this.pdfPresentationMode.request();
        },
        bindEvents: function bindEvents() {
            var eventBus = this.eventBus, _boundEvents = this._boundEvents;
            _boundEvents.beforePrint = this.beforePrint.bind(this);
            _boundEvents.afterPrint = this.afterPrint.bind(this);
            eventBus.on("resize", webViewerResize);
            eventBus.on("hashchange", webViewerHashchange);
            eventBus.on("beforeprint", _boundEvents.beforePrint);
            eventBus.on("afterprint", _boundEvents.afterPrint);
            eventBus.on("pagerendered", webViewerPageRendered);
            eventBus.on("textlayerrendered", webViewerTextLayerRendered);
            eventBus.on("updateviewarea", webViewerUpdateViewarea);
            eventBus.on("pagechanging", webViewerPageChanging);
            eventBus.on("scalechanging", webViewerScaleChanging);
            eventBus.on("rotationchanging", webViewerRotationChanging);
            eventBus.on("sidebarviewchanged", webViewerSidebarViewChanged);
            eventBus.on("pagemode", webViewerPageMode);
            eventBus.on("namedaction", webViewerNamedAction);
            eventBus.on("presentationmodechanged", webViewerPresentationModeChanged);
            eventBus.on("presentationmode", webViewerPresentationMode);
            eventBus.on("openfile", webViewerOpenFile);
            eventBus.on("print", webViewerPrint);
            eventBus.on("download", webViewerDownload);
            eventBus.on("firstpage", webViewerFirstPage);
            eventBus.on("lastpage", webViewerLastPage);
            eventBus.on("nextpage", webViewerNextPage);
            eventBus.on("previouspage", webViewerPreviousPage);
            eventBus.on("zoomin", webViewerZoomIn);
            eventBus.on("zoomout", webViewerZoomOut);
            eventBus.on("zoomreset", webViewerZoomReset);
            eventBus.on("pagenumberchanged", webViewerPageNumberChanged);
            eventBus.on("scalechanged", webViewerScaleChanged);
            eventBus.on("rotatecw", webViewerRotateCw);
            eventBus.on("rotateccw", webViewerRotateCcw);
            eventBus.on("switchscrollmode", webViewerSwitchScrollMode);
            eventBus.on("scrollmodechanged", webViewerScrollModeChanged);
            eventBus.on("switchspreadmode", webViewerSwitchSpreadMode);
            eventBus.on("spreadmodechanged", webViewerSpreadModeChanged);
            eventBus.on("documentproperties", webViewerDocumentProperties);
            eventBus.on("find", webViewerFind);
            eventBus.on("findfromurlhash", webViewerFindFromUrlHash);
            eventBus.on("updatefindmatchescount", webViewerUpdateFindMatchesCount);
            eventBus.on("updatefindcontrolstate", webViewerUpdateFindControlState);
            eventBus.on("fileinputchange", webViewerFileInputChange);
        },
        bindWindowEvents: function bindWindowEvents() {
            var eventBus = this.eventBus, _boundEvents = this._boundEvents;
            _boundEvents.windowResize = function() {
                eventBus.dispatch("resize", {
                    source: window
                });
            };
            _boundEvents.windowHashChange = function() {
                eventBus.dispatch("hashchange", {
                    source: window,
                    hash: document.location.hash.substring(1)
                });
            };
            _boundEvents.windowBeforePrint = function() {
                eventBus.dispatch("beforeprint", {
                    source: window
                });
            };
            _boundEvents.windowAfterPrint = function() {
                eventBus.dispatch("afterprint", {
                    source: window
                });
            };
            window.addEventListener("visibilitychange", webViewerVisibilityChange);
            window.addEventListener("wheel", webViewerWheel);
            window.addEventListener("click", webViewerClick);
            window.addEventListener("keydown", webViewerKeyDown);
            window.addEventListener("resize", _boundEvents.windowResize);
            window.addEventListener("hashchange", _boundEvents.windowHashChange);
            window.addEventListener("beforeprint", _boundEvents.windowBeforePrint);
            window.addEventListener("afterprint", _boundEvents.windowAfterPrint);
        },
        unbindEvents: function unbindEvents() {
            var eventBus = this.eventBus, _boundEvents = this._boundEvents;
            eventBus.off("resize", webViewerResize);
            eventBus.off("hashchange", webViewerHashchange);
            eventBus.off("beforeprint", _boundEvents.beforePrint);
            eventBus.off("afterprint", _boundEvents.afterPrint);
            eventBus.off("pagerendered", webViewerPageRendered);
            eventBus.off("textlayerrendered", webViewerTextLayerRendered);
            eventBus.off("updateviewarea", webViewerUpdateViewarea);
            eventBus.off("pagechanging", webViewerPageChanging);
            eventBus.off("scalechanging", webViewerScaleChanging);
            eventBus.off("rotationchanging", webViewerRotationChanging);
            eventBus.off("sidebarviewchanged", webViewerSidebarViewChanged);
            eventBus.off("pagemode", webViewerPageMode);
            eventBus.off("namedaction", webViewerNamedAction);
            eventBus.off("presentationmodechanged", webViewerPresentationModeChanged);
            eventBus.off("presentationmode", webViewerPresentationMode);
            eventBus.off("openfile", webViewerOpenFile);
            eventBus.off("print", webViewerPrint);
            eventBus.off("download", webViewerDownload);
            eventBus.off("firstpage", webViewerFirstPage);
            eventBus.off("lastpage", webViewerLastPage);
            eventBus.off("nextpage", webViewerNextPage);
            eventBus.off("previouspage", webViewerPreviousPage);
            eventBus.off("zoomin", webViewerZoomIn);
            eventBus.off("zoomout", webViewerZoomOut);
            eventBus.off("zoomreset", webViewerZoomReset);
            eventBus.off("pagenumberchanged", webViewerPageNumberChanged);
            eventBus.off("scalechanged", webViewerScaleChanged);
            eventBus.off("rotatecw", webViewerRotateCw);
            eventBus.off("rotateccw", webViewerRotateCcw);
            eventBus.off("switchscrollmode", webViewerSwitchScrollMode);
            eventBus.off("scrollmodechanged", webViewerScrollModeChanged);
            eventBus.off("switchspreadmode", webViewerSwitchSpreadMode);
            eventBus.off("spreadmodechanged", webViewerSpreadModeChanged);
            eventBus.off("documentproperties", webViewerDocumentProperties);
            eventBus.off("find", webViewerFind);
            eventBus.off("findfromurlhash", webViewerFindFromUrlHash);
            eventBus.off("updatefindmatchescount", webViewerUpdateFindMatchesCount);
            eventBus.off("updatefindcontrolstate", webViewerUpdateFindControlState);
            eventBus.off("fileinputchange", webViewerFileInputChange);
            _boundEvents.beforePrint = null;
            _boundEvents.afterPrint = null;
        },
        unbindWindowEvents: function unbindWindowEvents() {
            var _boundEvents = this._boundEvents;
            window.removeEventListener("visibilitychange", webViewerVisibilityChange);
            window.removeEventListener("wheel", webViewerWheel);
            window.removeEventListener("click", webViewerClick);
            window.removeEventListener("keydown", webViewerKeyDown);
            window.removeEventListener("resize", _boundEvents.windowResize);
            window.removeEventListener("hashchange", _boundEvents.windowHashChange);
            window.removeEventListener("beforeprint", _boundEvents.windowBeforePrint);
            window.removeEventListener("afterprint", _boundEvents.windowAfterPrint);
            _boundEvents.windowResize = null;
            _boundEvents.windowHashChange = null;
            _boundEvents.windowBeforePrint = null;
            _boundEvents.windowAfterPrint = null;
        }
    };
    exports.PDFViewerApplication = PDFViewerApplication;
    var validateFileURL;
    {
        var HOSTED_VIEWER_ORIGINS = [ "null", "http://mozilla.github.io", "https://mozilla.github.io" ];
        validateFileURL = function validateFileURL(file) {
            if (file === undefined) {
                return;
            }
            try {
                var viewerOrigin = new _pdfjsLib.URL(window.location.href).origin || "null";
                if (HOSTED_VIEWER_ORIGINS.includes(viewerOrigin)) {
                    return;
                }
                var _ref8 = new _pdfjsLib.URL(file, window.location.href), origin = _ref8.origin, protocol = _ref8.protocol;
                if (origin !== viewerOrigin && protocol !== "blob:") {
                    throw new Error("file origin does not match viewer's");
                }
            } catch (ex) {
                var message = ex && ex.message;
                PDFViewerApplication.l10n.get("loading_error", null, "An error occurred while loading the PDF.").then(function(loadingErrorMessage) {
                    PDFViewerApplication.error(loadingErrorMessage, {
                        message: message
                    });
                });
                throw ex;
            }
        };
    }
    function loadFakeWorker() {
        if (!_pdfjsLib.GlobalWorkerOptions.workerSrc) {
            _pdfjsLib.GlobalWorkerOptions.workerSrc = _app_options.AppOptions.get("workerSrc");
        }
        return (0, _pdfjsLib.loadScript)(_pdfjsLib.PDFWorker.getWorkerSrc());
    }
    function loadAndEnablePDFBug(enabledTabs) {
        var appConfig = PDFViewerApplication.appConfig;
        return (0, _pdfjsLib.loadScript)(appConfig.debuggerScriptPath).then(function() {
            PDFBug.enable(enabledTabs);
            PDFBug.init({
                OPS: _pdfjsLib.OPS,
                createObjectURL: _pdfjsLib.createObjectURL
            }, appConfig.mainContainer);
        });
    }
    function webViewerInitialized() {
        var appConfig = PDFViewerApplication.appConfig;
        var file;
        var queryString = document.location.search.substring(1);
        var params = (0, _ui_utils.parseQueryString)(queryString);
        file = "file" in params ? params.file : _app_options.AppOptions.get("defaultUrl");
        validateFileURL(file);
        var fileInput = document.createElement("input");
        fileInput.id = appConfig.openFileInputName;
        fileInput.className = "fileInput";
        fileInput.setAttribute("type", "file");
        fileInput.oncontextmenu = _ui_utils.noContextMenuHandler;
        document.body.appendChild(fileInput);
        if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
            appConfig.toolbar.openFile.setAttribute("hidden", "true");
            appConfig.secondaryToolbar.openFileButton.setAttribute("hidden", "true");
        } else {
            fileInput.value = null;
        }
        fileInput.addEventListener("change", function(evt) {
            var files = evt.target.files;
            if (!files || files.length === 0) {
                return;
            }
            PDFViewerApplication.eventBus.dispatch("fileinputchange", {
                source: this,
                fileInput: evt.target
            });
        });
        appConfig.mainContainer.addEventListener("dragover", function(evt) {
            evt.preventDefault();
            evt.dataTransfer.dropEffect = "move";
        });
        appConfig.mainContainer.addEventListener("drop", function(evt) {
            evt.preventDefault();
            var files = evt.dataTransfer.files;
            if (!files || files.length === 0) {
                return;
            }
            PDFViewerApplication.eventBus.dispatch("fileinputchange", {
                source: this,
                fileInput: evt.dataTransfer
            });
        });
        if (!PDFViewerApplication.supportsPrinting) {
            appConfig.toolbar.print.classList.add("hidden");
            appConfig.secondaryToolbar.printButton.classList.add("hidden");
        }
        if (!PDFViewerApplication.supportsFullscreen) {
            appConfig.toolbar.presentationModeButton.classList.add("hidden");
            appConfig.secondaryToolbar.presentationModeButton.classList.add("hidden");
        }
        if (PDFViewerApplication.supportsIntegratedFind) {
            appConfig.toolbar.viewFind.classList.add("hidden");
        }
        appConfig.mainContainer.addEventListener("transitionend", function(evt) {
            if (evt.target === this) {
                PDFViewerApplication.eventBus.dispatch("resize", {
                    source: this
                });
            }
        }, true);
        appConfig.sidebar.toggleButton.addEventListener("click", function() {
            PDFViewerApplication.pdfSidebar.toggle();
        });
        try {
            webViewerOpenFileViaURL(file);
        } catch (reason) {
            PDFViewerApplication.l10n.get("loading_error", null, "An error occurred while loading the PDF.").then(function(msg) {
                PDFViewerApplication.error(msg, reason);
            });
        }
    }
    var webViewerOpenFileViaURL;
    {
        webViewerOpenFileViaURL = function webViewerOpenFileViaURL(file) {
            if (file && file.lastIndexOf("file:", 0) === 0) {
                PDFViewerApplication.setTitleUsingUrl(file);
                var xhr = new XMLHttpRequest();
                xhr.onload = function() {
                    PDFViewerApplication.open(new Uint8Array(xhr.response));
                };
                xhr.open("GET", file);
                xhr.responseType = "arraybuffer";
                xhr.send();
                return;
            }
            if (file) {
                PDFViewerApplication.open(file);
            }
        };
    }
    function webViewerPageRendered(evt) {
        var pageNumber = evt.pageNumber;
        var pageIndex = pageNumber - 1;
        var pageView = PDFViewerApplication.pdfViewer.getPageView(pageIndex);
        if (pageNumber === PDFViewerApplication.page) {
            PDFViewerApplication.toolbar.updateLoadingIndicatorState(false);
        }
        if (!pageView) {
            return;
        }
        if (PDFViewerApplication.pdfSidebar.isThumbnailViewVisible) {
            var thumbnailView = PDFViewerApplication.pdfThumbnailViewer.getThumbnail(pageIndex);
            thumbnailView.setImage(pageView);
        }
        if (typeof Stats !== "undefined" && Stats.enabled && pageView.stats) {
            Stats.add(pageNumber, pageView.stats);
        }
        if (pageView.error) {
            PDFViewerApplication.l10n.get("rendering_error", null, "An error occurred while rendering the page.").then(function(msg) {
                PDFViewerApplication.error(msg, pageView.error);
            });
        }
    }
    function webViewerTextLayerRendered(evt) {}
    function webViewerPageMode(evt) {
        var mode = evt.mode, view;
        switch (mode) {
          case "thumbs":
            view = _pdf_sidebar.SidebarView.THUMBS;
            break;

          case "bookmarks":
          case "outline":
            view = _pdf_sidebar.SidebarView.OUTLINE;
            break;

          case "attachments":
            view = _pdf_sidebar.SidebarView.ATTACHMENTS;
            break;

          case "none":
            view = _pdf_sidebar.SidebarView.NONE;
            break;

          default:
            console.error('Invalid "pagemode" hash parameter: ' + mode);
            return;
        }
        PDFViewerApplication.pdfSidebar.switchView(view, true);
    }
    function webViewerNamedAction(evt) {
        var action = evt.action;
        switch (action) {
          case "GoToPage":
            PDFViewerApplication.appConfig.toolbar.pageNumber.select();
            break;

          case "Find":
            if (!PDFViewerApplication.supportsIntegratedFind) {
                PDFViewerApplication.findBar.toggle();
            }
            break;
        }
    }
    function webViewerPresentationModeChanged(evt) {
        var active = evt.active, switchInProgress = evt.switchInProgress;
        PDFViewerApplication.pdfViewer.presentationModeState = switchInProgress ? _ui_utils.PresentationModeState.CHANGING : active ? _ui_utils.PresentationModeState.FULLSCREEN : _ui_utils.PresentationModeState.NORMAL;
    }
    function webViewerSidebarViewChanged(evt) {
        PDFViewerApplication.pdfRenderingQueue.isThumbnailViewEnabled = PDFViewerApplication.pdfSidebar.isThumbnailViewVisible;
        var store = PDFViewerApplication.store;
        if (store && PDFViewerApplication.isInitialViewSet) {
            store.set("sidebarView", evt.view)["catch"](function() {});
        }
    }
    function webViewerUpdateViewarea(evt) {
        var location = evt.location, store = PDFViewerApplication.store;
        if (store && PDFViewerApplication.isInitialViewSet) {
            store.setMultiple({
                page: location.pageNumber,
                zoom: location.scale,
                scrollLeft: location.left,
                scrollTop: location.top,
                rotation: location.rotation
            })["catch"](function() {});
        }
        var href = PDFViewerApplication.pdfLinkService.getAnchorUrl(location.pdfOpenParams);
        PDFViewerApplication.appConfig.toolbar.viewBookmark.href = href;
        PDFViewerApplication.appConfig.secondaryToolbar.viewBookmarkButton.href = href;
        var currentPage = PDFViewerApplication.pdfViewer.getPageView(PDFViewerApplication.page - 1);
        var loading = currentPage.renderingState !== _pdf_rendering_queue.RenderingStates.FINISHED;
        PDFViewerApplication.toolbar.updateLoadingIndicatorState(loading);
    }
    function webViewerScrollModeChanged(evt) {
        var store = PDFViewerApplication.store;
        if (store && PDFViewerApplication.isInitialViewSet) {
            store.set("scrollMode", evt.mode)["catch"](function() {});
        }
    }
    function webViewerSpreadModeChanged(evt) {
        var store = PDFViewerApplication.store;
        if (store && PDFViewerApplication.isInitialViewSet) {
            store.set("spreadMode", evt.mode)["catch"](function() {});
        }
    }
    function webViewerResize() {
        var pdfDocument = PDFViewerApplication.pdfDocument, pdfViewer = PDFViewerApplication.pdfViewer;
        if (!pdfDocument) {
            return;
        }
        var currentScaleValue = pdfViewer.currentScaleValue;
        if (currentScaleValue === "auto" || currentScaleValue === "page-fit" || currentScaleValue === "page-width") {
            pdfViewer.currentScaleValue = currentScaleValue;
        }
        pdfViewer.update();
    }
    function webViewerHashchange(evt) {
        var hash = evt.hash;
        if (!hash) {
            return;
        }
        if (!PDFViewerApplication.isInitialViewSet) {
            PDFViewerApplication.initialBookmark = hash;
        } else if (!PDFViewerApplication.pdfHistory.popStateInProgress) {
            PDFViewerApplication.pdfLinkService.setHash(hash);
        }
    }
    var webViewerFileInputChange;
    {
        webViewerFileInputChange = function webViewerFileInputChange(evt) {
            if (PDFViewerApplication.pdfViewer && PDFViewerApplication.pdfViewer.isInPresentationMode) {
                return;
            }
            var file = evt.fileInput.files[0];
            if (_pdfjsLib.URL.createObjectURL && !_app_options.AppOptions.get("disableCreateObjectURL")) {
                var url = _pdfjsLib.URL.createObjectURL(file);
                if (file.name) {
                    url = {
                        url: url,
                        originalUrl: file.name
                    };
                }
                PDFViewerApplication.open(url);
            } else {
                PDFViewerApplication.setTitleUsingUrl(file.name);
                var fileReader = new FileReader();
                fileReader.onload = function webViewerChangeFileReaderOnload(evt) {
                    var buffer = evt.target.result;
                    PDFViewerApplication.open(new Uint8Array(buffer));
                };
                fileReader.readAsArrayBuffer(file);
            }
            var appConfig = PDFViewerApplication.appConfig;
            appConfig.toolbar.viewBookmark.setAttribute("hidden", "true");
            appConfig.secondaryToolbar.viewBookmarkButton.setAttribute("hidden", "true");
            appConfig.toolbar.download.setAttribute("hidden", "true");
            appConfig.secondaryToolbar.downloadButton.setAttribute("hidden", "true");
        };
    }
    function webViewerPresentationMode() {
        PDFViewerApplication.requestPresentationMode();
    }
    function webViewerOpenFile() {
        var openFileInputName = PDFViewerApplication.appConfig.openFileInputName;
        document.getElementById(openFileInputName).click();
    }
    function webViewerPrint() {
        window.print();
    }
    function webViewerDownload() {
        PDFViewerApplication.download();
    }
    function webViewerFirstPage() {
        if (PDFViewerApplication.pdfDocument) {
            PDFViewerApplication.page = 1;
        }
    }
    function webViewerLastPage() {
        if (PDFViewerApplication.pdfDocument) {
            PDFViewerApplication.page = PDFViewerApplication.pagesCount;
        }
    }
    function webViewerNextPage() {
        PDFViewerApplication.page++;
    }
    function webViewerPreviousPage() {
        PDFViewerApplication.page--;
    }
    function webViewerZoomIn() {
        PDFViewerApplication.zoomIn();
    }
    function webViewerZoomOut() {
        PDFViewerApplication.zoomOut();
    }
    function webViewerZoomReset(evt) {
        PDFViewerApplication.zoomReset(evt && evt.ignoreDuplicate);
    }
    function webViewerPageNumberChanged(evt) {
        var pdfViewer = PDFViewerApplication.pdfViewer;
        if (evt.value !== "") {
            pdfViewer.currentPageLabel = evt.value;
        }
        if (evt.value !== pdfViewer.currentPageNumber.toString() && evt.value !== pdfViewer.currentPageLabel) {
            PDFViewerApplication.toolbar.setPageNumber(pdfViewer.currentPageNumber, pdfViewer.currentPageLabel);
        }
    }
    function webViewerScaleChanged(evt) {
        PDFViewerApplication.pdfViewer.currentScaleValue = evt.value;
    }
    function webViewerRotateCw() {
        PDFViewerApplication.rotatePages(90);
    }
    function webViewerRotateCcw() {
        PDFViewerApplication.rotatePages(-90);
    }
    function webViewerSwitchScrollMode(evt) {
        PDFViewerApplication.pdfViewer.scrollMode = evt.mode;
    }
    function webViewerSwitchSpreadMode(evt) {
        PDFViewerApplication.pdfViewer.spreadMode = evt.mode;
    }
    function webViewerDocumentProperties() {
        PDFViewerApplication.pdfDocumentProperties.open();
    }
    function webViewerFind(evt) {
        PDFViewerApplication.findController.executeCommand("find" + evt.type, {
            query: evt.query,
            phraseSearch: evt.phraseSearch,
            caseSensitive: evt.caseSensitive,
            entireWord: evt.entireWord,
            highlightAll: evt.highlightAll,
            findPrevious: evt.findPrevious
        });
    }
    function webViewerFindFromUrlHash(evt) {
        PDFViewerApplication.findController.executeCommand("find", {
            query: evt.query,
            phraseSearch: evt.phraseSearch,
            caseSensitive: false,
            entireWord: false,
            highlightAll: true,
            findPrevious: false
        });
    }
    function webViewerUpdateFindMatchesCount(_ref9) {
        var matchesCount = _ref9.matchesCount;
        if (PDFViewerApplication.supportsIntegratedFind) {
            PDFViewerApplication.externalServices.updateFindMatchesCount(matchesCount);
        } else {
            PDFViewerApplication.findBar.updateResultsCount(matchesCount);
        }
    }
    function webViewerUpdateFindControlState(_ref10) {
        var state = _ref10.state, previous = _ref10.previous, matchesCount = _ref10.matchesCount;
        if (PDFViewerApplication.supportsIntegratedFind) {
            PDFViewerApplication.externalServices.updateFindControlState({
                result: state,
                findPrevious: previous,
                matchesCount: matchesCount
            });
        } else {
            PDFViewerApplication.findBar.updateUIState(state, previous, matchesCount);
        }
    }
    function webViewerScaleChanging(evt) {
        PDFViewerApplication.toolbar.setPageScale(evt.presetValue, evt.scale);
        PDFViewerApplication.pdfViewer.update();
    }
    function webViewerRotationChanging(evt) {
        PDFViewerApplication.pdfThumbnailViewer.pagesRotation = evt.pagesRotation;
        PDFViewerApplication.forceRendering();
        PDFViewerApplication.pdfViewer.currentPageNumber = evt.pageNumber;
    }
    function webViewerPageChanging(evt) {
        var page = evt.pageNumber;
        PDFViewerApplication.toolbar.setPageNumber(page, evt.pageLabel || null);
        PDFViewerApplication.secondaryToolbar.setPageNumber(page);
        if (PDFViewerApplication.pdfSidebar.isThumbnailViewVisible) {
            PDFViewerApplication.pdfThumbnailViewer.scrollThumbnailIntoView(page);
        }
        if (typeof Stats !== "undefined" && Stats.enabled) {
            var pageView = PDFViewerApplication.pdfViewer.getPageView(page - 1);
            if (pageView && pageView.stats) {
                Stats.add(page, pageView.stats);
            }
        }
    }
    function webViewerVisibilityChange(evt) {
        if (document.visibilityState === "visible") {
            setZoomDisabledTimeout();
        }
    }
    var zoomDisabledTimeout = null;
    function setZoomDisabledTimeout() {
        if (zoomDisabledTimeout) {
            clearTimeout(zoomDisabledTimeout);
        }
        zoomDisabledTimeout = setTimeout(function() {
            zoomDisabledTimeout = null;
        }, WHEEL_ZOOM_DISABLED_TIMEOUT);
    }
    function webViewerWheel(evt) {
        var pdfViewer = PDFViewerApplication.pdfViewer;
        if (pdfViewer.isInPresentationMode) {
            return;
        }
        if (evt.ctrlKey || evt.metaKey) {
            var support = PDFViewerApplication.supportedMouseWheelZoomModifierKeys;
            if (evt.ctrlKey && !support.ctrlKey || evt.metaKey && !support.metaKey) {
                return;
            }
            evt.preventDefault();
            if (zoomDisabledTimeout || document.visibilityState === "hidden") {
                return;
            }
            var previousScale = pdfViewer.currentScale;
            var delta = (0, _ui_utils.normalizeWheelEventDelta)(evt);
            var MOUSE_WHEEL_DELTA_PER_PAGE_SCALE = 3;
            var ticks = delta * MOUSE_WHEEL_DELTA_PER_PAGE_SCALE;
            if (ticks < 0) {
                PDFViewerApplication.zoomOut(-ticks);
            } else {
                PDFViewerApplication.zoomIn(ticks);
            }
            var currentScale = pdfViewer.currentScale;
            if (previousScale !== currentScale) {
                var scaleCorrectionFactor = currentScale / previousScale - 1;
                var rect = pdfViewer.container.getBoundingClientRect();
                var dx = evt.clientX - rect.left;
                var dy = evt.clientY - rect.top;
                pdfViewer.container.scrollLeft += dx * scaleCorrectionFactor;
                pdfViewer.container.scrollTop += dy * scaleCorrectionFactor;
            }
        } else {
            setZoomDisabledTimeout();
        }
    }
    function webViewerClick(evt) {
        if (!PDFViewerApplication.secondaryToolbar.isOpen) {
            return;
        }
        var appConfig = PDFViewerApplication.appConfig;
        if (PDFViewerApplication.pdfViewer.containsElement(evt.target) || appConfig.toolbar.container.contains(evt.target) && evt.target !== appConfig.secondaryToolbar.toggleButton) {
            PDFViewerApplication.secondaryToolbar.close();
        }
    }
    function webViewerKeyDown(evt) {
        if (PDFViewerApplication.overlayManager.active) {
            return;
        }
        var handled = false, ensureViewerFocused = false;
        var cmd = (evt.ctrlKey ? 1 : 0) | (evt.altKey ? 2 : 0) | (evt.shiftKey ? 4 : 0) | (evt.metaKey ? 8 : 0);
        var pdfViewer = PDFViewerApplication.pdfViewer;
        var isViewerInPresentationMode = pdfViewer && pdfViewer.isInPresentationMode;
        if (cmd === 1 || cmd === 8 || cmd === 5 || cmd === 12) {
            switch (evt.keyCode) {
              case 70:
                if (!PDFViewerApplication.supportsIntegratedFind) {
                    PDFViewerApplication.findBar.open();
                    handled = true;
                }
                break;

              case 71:
                if (!PDFViewerApplication.supportsIntegratedFind) {
                    var findState = PDFViewerApplication.findController.state;
                    if (findState) {
                        PDFViewerApplication.findController.executeCommand("findagain", {
                            query: findState.query,
                            phraseSearch: findState.phraseSearch,
                            caseSensitive: findState.caseSensitive,
                            entireWord: findState.entireWord,
                            highlightAll: findState.highlightAll,
                            findPrevious: cmd === 5 || cmd === 12
                        });
                    }
                    handled = true;
                }
                break;

              case 61:
              case 107:
              case 187:
              case 171:
                if (!isViewerInPresentationMode) {
                    PDFViewerApplication.zoomIn();
                }
                handled = true;
                break;

              case 173:
              case 109:
              case 189:
                if (!isViewerInPresentationMode) {
                    PDFViewerApplication.zoomOut();
                }
                handled = true;
                break;

              case 48:
              case 96:
                if (!isViewerInPresentationMode) {
                    setTimeout(function() {
                        PDFViewerApplication.zoomReset();
                    });
                    handled = false;
                }
                break;

              case 38:
                if (isViewerInPresentationMode || PDFViewerApplication.page > 1) {
                    PDFViewerApplication.page = 1;
                    handled = true;
                    ensureViewerFocused = true;
                }
                break;

              case 40:
                if (isViewerInPresentationMode || PDFViewerApplication.page < PDFViewerApplication.pagesCount) {
                    PDFViewerApplication.page = PDFViewerApplication.pagesCount;
                    handled = true;
                    ensureViewerFocused = true;
                }
                break;
            }
        }
        if (cmd === 1 || cmd === 8) {
            switch (evt.keyCode) {
              case 83:
                PDFViewerApplication.download();
                handled = true;
                break;
            }
        }
        if (cmd === 3 || cmd === 10) {
            switch (evt.keyCode) {
              case 80:
                PDFViewerApplication.requestPresentationMode();
                handled = true;
                break;

              case 71:
                PDFViewerApplication.appConfig.toolbar.pageNumber.select();
                handled = true;
                break;
            }
        }
        if (handled) {
            if (ensureViewerFocused && !isViewerInPresentationMode) {
                pdfViewer.focus();
            }
            evt.preventDefault();
            return;
        }
        var curElement = document.activeElement || document.querySelector(":focus");
        var curElementTagName = curElement && curElement.tagName.toUpperCase();
        if (curElementTagName === "INPUT" || curElementTagName === "TEXTAREA" || curElementTagName === "SELECT") {
            if (evt.keyCode !== 27) {
                return;
            }
        }
        if (cmd === 0) {
            var turnPage = 0, turnOnlyIfPageFit = false;
            switch (evt.keyCode) {
              case 38:
              case 33:
                if (pdfViewer.isVerticalScrollbarEnabled) {
                    turnOnlyIfPageFit = true;
                }
                turnPage = -1;
                break;

              case 8:
                if (!isViewerInPresentationMode) {
                    turnOnlyIfPageFit = true;
                }
                turnPage = -1;
                break;

              case 37:
                if (pdfViewer.isHorizontalScrollbarEnabled) {
                    turnOnlyIfPageFit = true;
                }

              case 75:
              case 80:
                turnPage = -1;
                break;

              case 27:
                if (PDFViewerApplication.secondaryToolbar.isOpen) {
                    PDFViewerApplication.secondaryToolbar.close();
                    handled = true;
                }
                if (!PDFViewerApplication.supportsIntegratedFind && PDFViewerApplication.findBar.opened) {
                    PDFViewerApplication.findBar.close();
                    handled = true;
                }
                break;

              case 40:
              case 34:
                if (pdfViewer.isVerticalScrollbarEnabled) {
                    turnOnlyIfPageFit = true;
                }
                turnPage = 1;
                break;

              case 13:
              case 32:
                if (!isViewerInPresentationMode) {
                    turnOnlyIfPageFit = true;
                }
                turnPage = 1;
                break;

              case 39:
                if (pdfViewer.isHorizontalScrollbarEnabled) {
                    turnOnlyIfPageFit = true;
                }

              case 74:
              case 78:
                turnPage = 1;
                break;

              case 36:
                if (isViewerInPresentationMode || PDFViewerApplication.page > 1) {
                    PDFViewerApplication.page = 1;
                    handled = true;
                    ensureViewerFocused = true;
                }
                break;

              case 35:
                if (isViewerInPresentationMode || PDFViewerApplication.page < PDFViewerApplication.pagesCount) {
                    PDFViewerApplication.page = PDFViewerApplication.pagesCount;
                    handled = true;
                    ensureViewerFocused = true;
                }
                break;

              case 83:
                PDFViewerApplication.pdfCursorTools.switchTool(_pdf_cursor_tools.CursorTool.SELECT);
                break;

              case 72:
                PDFViewerApplication.pdfCursorTools.switchTool(_pdf_cursor_tools.CursorTool.HAND);
                break;

              case 82:
                PDFViewerApplication.rotatePages(90);
                break;

              case 115:
                PDFViewerApplication.pdfSidebar.toggle();
                break;
            }
            if (turnPage !== 0 && (!turnOnlyIfPageFit || pdfViewer.currentScaleValue === "page-fit")) {
                if (turnPage > 0) {
                    if (PDFViewerApplication.page < PDFViewerApplication.pagesCount) {
                        PDFViewerApplication.page++;
                    }
                } else {
                    if (PDFViewerApplication.page > 1) {
                        PDFViewerApplication.page--;
                    }
                }
                handled = true;
            }
        }
        if (cmd === 4) {
            switch (evt.keyCode) {
              case 13:
              case 32:
                if (!isViewerInPresentationMode && pdfViewer.currentScaleValue !== "page-fit") {
                    break;
                }
                if (PDFViewerApplication.page > 1) {
                    PDFViewerApplication.page--;
                }
                handled = true;
                break;

              case 82:
                PDFViewerApplication.rotatePages(-90);
                break;
            }
        }
        if (!handled && !isViewerInPresentationMode) {
            if (evt.keyCode >= 33 && evt.keyCode <= 40 || evt.keyCode === 32 && curElementTagName !== "BUTTON") {
                ensureViewerFocused = true;
            }
        }
        if (ensureViewerFocused && !pdfViewer.containsElement(curElement)) {
            pdfViewer.focus();
        }
        if (handled) {
            evt.preventDefault();
        }
    }
    function apiPageLayoutToSpreadMode(layout) {
        switch (layout) {
          case "SinglePage":
          case "OneColumn":
            return _ui_utils.SpreadMode.NONE;

          case "TwoColumnLeft":
          case "TwoPageLeft":
            return _ui_utils.SpreadMode.ODD;

          case "TwoColumnRight":
          case "TwoPageRight":
            return _ui_utils.SpreadMode.EVEN;
        }
        return _ui_utils.SpreadMode.NONE;
    }
    function apiPageModeToSidebarView(mode) {
        switch (mode) {
          case "UseNone":
            return _pdf_sidebar.SidebarView.NONE;

          case "UseThumbs":
            return _pdf_sidebar.SidebarView.THUMBS;

          case "UseOutlines":
            return _pdf_sidebar.SidebarView.OUTLINE;

          case "UseAttachments":
            return _pdf_sidebar.SidebarView.ATTACHMENTS;

          case "UseOC":
        }
        return _pdf_sidebar.SidebarView.NONE;
    }
    var PDFPrintServiceFactory = {
        instance: {
            supportsPrinting: false,
            createPrintService: function createPrintService() {
                throw new Error("Not implemented: createPrintService");
            }
        }
    };
    exports.PDFPrintServiceFactory = PDFPrintServiceFactory;
}, function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = __webpack_require__(3);
}, function(module, exports, __webpack_require__) {
    "use strict";
    (function(module) {
        function _typeof(obj) {
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj;
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
            }
            return _typeof(obj);
        }
        var runtime = function(exports) {
            "use strict";
            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var undefined;
            var $Symbol = typeof Symbol === "function" ? Symbol : {};
            var iteratorSymbol = $Symbol.iterator || "@@iterator";
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
            function wrap(innerFn, outerFn, self, tryLocsList) {
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);
                generator._invoke = makeInvokeMethod(innerFn, self, context);
                return generator;
            }
            exports.wrap = wrap;
            function tryCatch(fn, obj, arg) {
                try {
                    return {
                        type: "normal",
                        arg: fn.call(obj, arg)
                    };
                } catch (err) {
                    return {
                        type: "throw",
                        arg: err
                    };
                }
            }
            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed";
            var ContinueSentinel = {};
            function Generator() {}
            function GeneratorFunction() {}
            function GeneratorFunctionPrototype() {}
            var IteratorPrototype = {};
            IteratorPrototype[iteratorSymbol] = function() {
                return this;
            };
            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
            if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                IteratorPrototype = NativeIteratorPrototype;
            }
            var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
            GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
            GeneratorFunctionPrototype.constructor = GeneratorFunction;
            GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
            function defineIteratorMethods(prototype) {
                [ "next", "throw", "return" ].forEach(function(method) {
                    prototype[method] = function(arg) {
                        return this._invoke(method, arg);
                    };
                });
            }
            exports.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
            };
            exports.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    if (!(toStringTagSymbol in genFun)) {
                        genFun[toStringTagSymbol] = "GeneratorFunction";
                    }
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
            };
            exports.awrap = function(arg) {
                return {
                    __await: arg
                };
            };
            function AsyncIterator(generator) {
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") {
                        reject(record.arg);
                    } else {
                        var result = record.arg;
                        var value = result.value;
                        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
                            return Promise.resolve(value.__await).then(function(value) {
                                invoke("next", value, resolve, reject);
                            }, function(err) {
                                invoke("throw", err, resolve, reject);
                            });
                        }
                        return Promise.resolve(value).then(function(unwrapped) {
                            result.value = unwrapped;
                            resolve(result);
                        }, function(error) {
                            return invoke("throw", error, resolve, reject);
                        });
                    }
                }
                var previousPromise;
                function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                        return new Promise(function(resolve, reject) {
                            invoke(method, arg, resolve, reject);
                        });
                    }
                    return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                }
                this._invoke = enqueue;
            }
            defineIteratorMethods(AsyncIterator.prototype);
            AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                return this;
            };
            exports.AsyncIterator = AsyncIterator;
            exports.async = function(innerFn, outerFn, self, tryLocsList) {
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
                return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                    return result.done ? result.value : iter.next();
                });
            };
            function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                    if (state === GenStateExecuting) {
                        throw new Error("Generator is already running");
                    }
                    if (state === GenStateCompleted) {
                        if (method === "throw") {
                            throw arg;
                        }
                        return doneResult();
                    }
                    context.method = method;
                    context.arg = arg;
                    while (true) {
                        var delegate = context.delegate;
                        if (delegate) {
                            var delegateResult = maybeInvokeDelegate(delegate, context);
                            if (delegateResult) {
                                if (delegateResult === ContinueSentinel) continue;
                                return delegateResult;
                            }
                        }
                        if (context.method === "next") {
                            context.sent = context._sent = context.arg;
                        } else if (context.method === "throw") {
                            if (state === GenStateSuspendedStart) {
                                state = GenStateCompleted;
                                throw context.arg;
                            }
                            context.dispatchException(context.arg);
                        } else if (context.method === "return") {
                            context.abrupt("return", context.arg);
                        }
                        state = GenStateExecuting;
                        var record = tryCatch(innerFn, self, context);
                        if (record.type === "normal") {
                            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                            if (record.arg === ContinueSentinel) {
                                continue;
                            }
                            return {
                                value: record.arg,
                                done: context.done
                            };
                        } else if (record.type === "throw") {
                            state = GenStateCompleted;
                            context.method = "throw";
                            context.arg = record.arg;
                        }
                    }
                };
            }
            function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined) {
                    context.delegate = null;
                    if (context.method === "throw") {
                        if (delegate.iterator["return"]) {
                            context.method = "return";
                            context.arg = undefined;
                            maybeInvokeDelegate(delegate, context);
                            if (context.method === "throw") {
                                return ContinueSentinel;
                            }
                        }
                        context.method = "throw";
                        context.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                }
                if (info.done) {
                    context[delegate.resultName] = info.value;
                    context.next = delegate.nextLoc;
                    if (context.method !== "return") {
                        context.method = "next";
                        context.arg = undefined;
                    }
                } else {
                    return info;
                }
                context.delegate = null;
                return ContinueSentinel;
            }
            defineIteratorMethods(Gp);
            Gp[toStringTagSymbol] = "Generator";
            Gp[iteratorSymbol] = function() {
                return this;
            };
            Gp.toString = function() {
                return "[object Generator]";
            };
            function pushTryEntry(locs) {
                var entry = {
                    tryLoc: locs[0]
                };
                if (1 in locs) {
                    entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
            }
            function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }
            function Context(tryLocsList) {
                this.tryEntries = [ {
                    tryLoc: "root"
                } ];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }
            exports.keys = function(object) {
                var keys = [];
                for (var key in object) {
                    keys.push(key);
                }
                keys.reverse();
                return function next() {
                    while (keys.length) {
                        var key = keys.pop();
                        if (key in object) {
                            next.value = key;
                            next.done = false;
                            return next;
                        }
                    }
                    next.done = true;
                    return next;
                };
            };
            function values(iterable) {
                if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) {
                        return iteratorMethod.call(iterable);
                    }
                    if (typeof iterable.next === "function") {
                        return iterable;
                    }
                    if (!isNaN(iterable.length)) {
                        var i = -1, next = function next() {
                            while (++i < iterable.length) {
                                if (hasOwn.call(iterable, i)) {
                                    next.value = iterable[i];
                                    next.done = false;
                                    return next;
                                }
                            }
                            next.value = undefined;
                            next.done = true;
                            return next;
                        };
                        return next.next = next;
                    }
                }
                return {
                    next: doneResult
                };
            }
            exports.values = values;
            function doneResult() {
                return {
                    value: undefined,
                    done: true
                };
            }
            Context.prototype = {
                constructor: Context,
                reset: function reset(skipTempReset) {
                    this.prev = 0;
                    this.next = 0;
                    this.sent = this._sent = undefined;
                    this.done = false;
                    this.delegate = null;
                    this.method = "next";
                    this.arg = undefined;
                    this.tryEntries.forEach(resetTryEntry);
                    if (!skipTempReset) {
                        for (var name in this) {
                            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                                this[name] = undefined;
                            }
                        }
                    }
                },
                stop: function stop() {
                    this.done = true;
                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") {
                        throw rootRecord.arg;
                    }
                    return this.rval;
                },
                dispatchException: function dispatchException(exception) {
                    if (this.done) {
                        throw exception;
                    }
                    var context = this;
                    function handle(loc, caught) {
                        record.type = "throw";
                        record.arg = exception;
                        context.next = loc;
                        if (caught) {
                            context.method = "next";
                            context.arg = undefined;
                        }
                        return !!caught;
                    }
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        var record = entry.completion;
                        if (entry.tryLoc === "root") {
                            return handle("end");
                        }
                        if (entry.tryLoc <= this.prev) {
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            var hasFinally = hasOwn.call(entry, "finallyLoc");
                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                } else if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }
                            } else if (hasCatch) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                }
                            } else if (hasFinally) {
                                if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }
                            } else {
                                throw new Error("try statement without catch or finally");
                            }
                        }
                    }
                },
                abrupt: function abrupt(type, arg) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }
                    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                        finallyEntry = null;
                    }
                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;
                    if (finallyEntry) {
                        this.method = "next";
                        this.next = finallyEntry.finallyLoc;
                        return ContinueSentinel;
                    }
                    return this.complete(record);
                },
                complete: function complete(record, afterLoc) {
                    if (record.type === "throw") {
                        throw record.arg;
                    }
                    if (record.type === "break" || record.type === "continue") {
                        this.next = record.arg;
                    } else if (record.type === "return") {
                        this.rval = this.arg = record.arg;
                        this.method = "return";
                        this.next = "end";
                    } else if (record.type === "normal" && afterLoc) {
                        this.next = afterLoc;
                    }
                    return ContinueSentinel;
                },
                finish: function finish(finallyLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            this.complete(entry.completion, entry.afterLoc);
                            resetTryEntry(entry);
                            return ContinueSentinel;
                        }
                    }
                },
                catch: function _catch(tryLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === tryLoc) {
                            var record = entry.completion;
                            if (record.type === "throw") {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    }
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                    this.delegate = {
                        iterator: values(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    };
                    if (this.method === "next") {
                        this.arg = undefined;
                    }
                    return ContinueSentinel;
                }
            };
            return exports;
        }((false ? undefined : _typeof(module)) === "object" ? module.exports : {});
        try {
            regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
            Function("r", "regeneratorRuntime = r")(runtime);
        }
    }).call(this, __webpack_require__(4)(module));
}, function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = function(module) {
        if (!module.webpackPolyfill) {
            module.deprecate = function() {};
            module.paths = [];
            if (!module.children) module.children = [];
            Object.defineProperty(module, "loaded", {
                enumerable: true,
                get: function get() {
                    return module.l;
                }
            });
            Object.defineProperty(module, "id", {
                enumerable: true,
                get: function get() {
                    return module.i;
                }
            });
            module.webpackPolyfill = 1;
        }
        return module;
    };
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isValidRotation = isValidRotation;
    exports.isValidScrollMode = isValidScrollMode;
    exports.isValidSpreadMode = isValidSpreadMode;
    exports.isPortraitOrientation = isPortraitOrientation;
    exports.getGlobalEventBus = getGlobalEventBus;
    exports.getPDFFileNameFromURL = getPDFFileNameFromURL;
    exports.noContextMenuHandler = noContextMenuHandler;
    exports.parseQueryString = parseQueryString;
    exports.backtrackBeforeAllVisibleElements = backtrackBeforeAllVisibleElements;
    exports.getVisibleElements = getVisibleElements;
    exports.roundToDivide = roundToDivide;
    exports.getPageSizeInches = getPageSizeInches;
    exports.approximateFraction = approximateFraction;
    exports.getOutputScale = getOutputScale;
    exports.scrollIntoView = scrollIntoView;
    exports.watchScroll = watchScroll;
    exports.binarySearchFirstItem = binarySearchFirstItem;
    exports.normalizeWheelEventDelta = normalizeWheelEventDelta;
    exports.waitOnEventOrTimeout = waitOnEventOrTimeout;
    exports.moveToEndOfArray = moveToEndOfArray;
    exports.WaitOnType = exports.animationStarted = exports.ProgressBar = exports.EventBus = exports.NullL10n = exports.SpreadMode = exports.ScrollMode = exports.TextLayerMode = exports.RendererType = exports.PresentationModeState = exports.VERTICAL_PADDING = exports.SCROLLBAR_PADDING = exports.MAX_AUTO_SCALE = exports.UNKNOWN_SCALE = exports.MAX_SCALE = exports.MIN_SCALE = exports.DEFAULT_SCALE = exports.DEFAULT_SCALE_VALUE = exports.CSS_UNITS = void 0;
    var _regenerator = _interopRequireDefault(__webpack_require__(2));
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _asyncToGenerator(fn) {
        return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    var CSS_UNITS = 96 / 72;
    exports.CSS_UNITS = CSS_UNITS;
    var DEFAULT_SCALE_VALUE = "auto";
    exports.DEFAULT_SCALE_VALUE = DEFAULT_SCALE_VALUE;
    var DEFAULT_SCALE = 1;
    exports.DEFAULT_SCALE = DEFAULT_SCALE;
    var MIN_SCALE = .1;
    exports.MIN_SCALE = MIN_SCALE;
    var MAX_SCALE = 10;
    exports.MAX_SCALE = MAX_SCALE;
    var UNKNOWN_SCALE = 0;
    exports.UNKNOWN_SCALE = UNKNOWN_SCALE;
    var MAX_AUTO_SCALE = 1.25;
    exports.MAX_AUTO_SCALE = MAX_AUTO_SCALE;
    var SCROLLBAR_PADDING = 40;
    exports.SCROLLBAR_PADDING = SCROLLBAR_PADDING;
    var VERTICAL_PADDING = 5;
    exports.VERTICAL_PADDING = VERTICAL_PADDING;
    var PresentationModeState = {
        UNKNOWN: 0,
        NORMAL: 1,
        CHANGING: 2,
        FULLSCREEN: 3
    };
    exports.PresentationModeState = PresentationModeState;
    var RendererType = {
        CANVAS: "canvas",
        SVG: "svg"
    };
    exports.RendererType = RendererType;
    var TextLayerMode = {
        DISABLE: 0,
        ENABLE: 1,
        ENABLE_ENHANCE: 2
    };
    exports.TextLayerMode = TextLayerMode;
    var ScrollMode = {
        UNKNOWN: -1,
        VERTICAL: 0,
        HORIZONTAL: 1,
        WRAPPED: 2
    };
    exports.ScrollMode = ScrollMode;
    var SpreadMode = {
        UNKNOWN: -1,
        NONE: 0,
        ODD: 1,
        EVEN: 2
    };
    exports.SpreadMode = SpreadMode;
    function formatL10nValue(text, args) {
        if (!args) {
            return text;
        }
        return text.replace(/\{\{\s*(\w+)\s*\}\}/g, function(all, name) {
            return name in args ? args[name] : "{{" + name + "}}";
        });
    }
    var NullL10n = {
        getLanguage: function() {
            var _getLanguage = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                return _regenerator["default"].wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            return _context.abrupt("return", "en-us");

                          case 1:
                          case "end":
                            return _context.stop();
                        }
                    }
                }, _callee);
            }));
            function getLanguage() {
                return _getLanguage.apply(this, arguments);
            }
            return getLanguage;
        }(),
        getDirection: function() {
            var _getDirection = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            return _context2.abrupt("return", "ltr");

                          case 1:
                          case "end":
                            return _context2.stop();
                        }
                    }
                }, _callee2);
            }));
            function getDirection() {
                return _getDirection.apply(this, arguments);
            }
            return getDirection;
        }(),
        get: function() {
            var _get = _asyncToGenerator(_regenerator["default"].mark(function _callee3(property, args, fallback) {
                return _regenerator["default"].wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            return _context3.abrupt("return", formatL10nValue(fallback, args));

                          case 1:
                          case "end":
                            return _context3.stop();
                        }
                    }
                }, _callee3);
            }));
            function get(_x, _x2, _x3) {
                return _get.apply(this, arguments);
            }
            return get;
        }(),
        translate: function() {
            var _translate = _asyncToGenerator(_regenerator["default"].mark(function _callee4(element) {
                return _regenerator["default"].wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                          case "end":
                            return _context4.stop();
                        }
                    }
                }, _callee4);
            }));
            function translate(_x4) {
                return _translate.apply(this, arguments);
            }
            return translate;
        }()
    };
    exports.NullL10n = NullL10n;
    function getOutputScale(ctx) {
        var devicePixelRatio = window.devicePixelRatio || 1;
        var backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
        var pixelRatio = devicePixelRatio / backingStoreRatio;
        return {
            sx: pixelRatio,
            sy: pixelRatio,
            scaled: pixelRatio !== 1
        };
    }
    function scrollIntoView(element, spot) {
        var skipOverflowHiddenElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var parent = element.offsetParent;
        if (!parent) {
            console.error("offsetParent is not set -- cannot scroll");
            return;
        }
        var offsetY = element.offsetTop + element.clientTop;
        var offsetX = element.offsetLeft + element.clientLeft;
        while (parent.clientHeight === parent.scrollHeight && parent.clientWidth === parent.scrollWidth || skipOverflowHiddenElements && getComputedStyle(parent).overflow === "hidden") {
            if (parent.dataset._scaleY) {
                offsetY /= parent.dataset._scaleY;
                offsetX /= parent.dataset._scaleX;
            }
            offsetY += parent.offsetTop;
            offsetX += parent.offsetLeft;
            parent = parent.offsetParent;
            if (!parent) {
                return;
            }
        }
        if (spot) {
            if (spot.top !== undefined) {
                offsetY += spot.top;
            }
            if (spot.left !== undefined) {
                offsetX += spot.left;
                parent.scrollLeft = offsetX;
            }
        }
        parent.scrollTop = offsetY;
    }
    function watchScroll(viewAreaElement, callback) {
        var debounceScroll = function debounceScroll(evt) {
            if (rAF) {
                return;
            }
            rAF = window.requestAnimationFrame(function viewAreaElementScrolled() {
                rAF = null;
                var currentX = viewAreaElement.scrollLeft;
                var lastX = state.lastX;
                if (currentX !== lastX) {
                    state.right = currentX > lastX;
                }
                state.lastX = currentX;
                var currentY = viewAreaElement.scrollTop;
                var lastY = state.lastY;
                if (currentY !== lastY) {
                    state.down = currentY > lastY;
                }
                state.lastY = currentY;
                callback(state);
            });
        };
        var state = {
            right: true,
            down: true,
            lastX: viewAreaElement.scrollLeft,
            lastY: viewAreaElement.scrollTop,
            _eventHandler: debounceScroll
        };
        var rAF = null;
        viewAreaElement.addEventListener("scroll", debounceScroll, true);
        return state;
    }
    function parseQueryString(query) {
        var parts = query.split("&");
        var params = Object.create(null);
        for (var i = 0, ii = parts.length; i < ii; ++i) {
            var param = parts[i].split("=");
            var key = param[0].toLowerCase();
            var value = param.length > 1 ? param[1] : null;
            params[decodeURIComponent(key)] = decodeURIComponent(value);
        }
        return params;
    }
    function binarySearchFirstItem(items, condition) {
        var minIndex = 0;
        var maxIndex = items.length - 1;
        if (items.length === 0 || !condition(items[maxIndex])) {
            return items.length;
        }
        if (condition(items[minIndex])) {
            return minIndex;
        }
        while (minIndex < maxIndex) {
            var currentIndex = minIndex + maxIndex >> 1;
            var currentItem = items[currentIndex];
            if (condition(currentItem)) {
                maxIndex = currentIndex;
            } else {
                minIndex = currentIndex + 1;
            }
        }
        return minIndex;
    }
    function approximateFraction(x) {
        if (Math.floor(x) === x) {
            return [ x, 1 ];
        }
        var xinv = 1 / x;
        var limit = 8;
        if (xinv > limit) {
            return [ 1, limit ];
        } else if (Math.floor(xinv) === xinv) {
            return [ 1, xinv ];
        }
        var x_ = x > 1 ? xinv : x;
        var a = 0, b = 1, c = 1, d = 1;
        while (true) {
            var p = a + c, q = b + d;
            if (q > limit) {
                break;
            }
            if (x_ <= p / q) {
                c = p;
                d = q;
            } else {
                a = p;
                b = q;
            }
        }
        var result;
        if (x_ - a / b < c / d - x_) {
            result = x_ === x ? [ a, b ] : [ b, a ];
        } else {
            result = x_ === x ? [ c, d ] : [ d, c ];
        }
        return result;
    }
    function roundToDivide(x, div) {
        var r = x % div;
        return r === 0 ? x : Math.round(x - r + div);
    }
    function getPageSizeInches(_ref) {
        var view = _ref.view, userUnit = _ref.userUnit, rotate = _ref.rotate;
        var _view = _slicedToArray(view, 4), x1 = _view[0], y1 = _view[1], x2 = _view[2], y2 = _view[3];
        var changeOrientation = rotate % 180 !== 0;
        var width = (x2 - x1) / 72 * userUnit;
        var height = (y2 - y1) / 72 * userUnit;
        return {
            width: changeOrientation ? height : width,
            height: changeOrientation ? width : height
        };
    }
    function backtrackBeforeAllVisibleElements(index, views, top) {
        if (index < 2) {
            return index;
        }
        var elt = views[index].div;
        var pageTop = elt.offsetTop + elt.clientTop;
        if (pageTop >= top) {
            elt = views[index - 1].div;
            pageTop = elt.offsetTop + elt.clientTop;
        }
        for (var i = index - 2; i >= 0; --i) {
            elt = views[i].div;
            if (elt.offsetTop + elt.clientTop + elt.clientHeight <= pageTop) {
                break;
            }
            index = i;
        }
        return index;
    }
    function getVisibleElements(scrollEl, views) {
        var sortByVisibility = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var horizontal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var top = scrollEl.scrollTop, bottom = top + scrollEl.clientHeight;
        var left = scrollEl.scrollLeft, right = left + scrollEl.clientWidth;
        function isElementBottomAfterViewTop(view) {
            var element = view.div;
            var elementBottom = element.offsetTop + element.clientTop + element.clientHeight;
            return elementBottom > top;
        }
        function isElementRightAfterViewLeft(view) {
            var element = view.div;
            var elementRight = element.offsetLeft + element.clientLeft + element.clientWidth;
            return elementRight > left;
        }
        var visible = [], numViews = views.length;
        var firstVisibleElementInd = numViews === 0 ? 0 : binarySearchFirstItem(views, horizontal ? isElementRightAfterViewLeft : isElementBottomAfterViewTop);
        if (firstVisibleElementInd > 0 && firstVisibleElementInd < numViews && !horizontal) {
            firstVisibleElementInd = backtrackBeforeAllVisibleElements(firstVisibleElementInd, views, top);
        }
        var lastEdge = horizontal ? right : -1;
        for (var i = firstVisibleElementInd; i < numViews; i++) {
            var view = views[i], element = view.div;
            var currentWidth = element.offsetLeft + element.clientLeft;
            var currentHeight = element.offsetTop + element.clientTop;
            var viewWidth = element.clientWidth, viewHeight = element.clientHeight;
            var viewRight = currentWidth + viewWidth;
            var viewBottom = currentHeight + viewHeight;
            if (lastEdge === -1) {
                if (viewBottom >= bottom) {
                    lastEdge = viewBottom;
                }
            } else if ((horizontal ? currentWidth : currentHeight) > lastEdge) {
                break;
            }
            if (viewBottom <= top || currentHeight >= bottom || viewRight <= left || currentWidth >= right) {
                continue;
            }
            var hiddenHeight = Math.max(0, top - currentHeight) + Math.max(0, viewBottom - bottom);
            var hiddenWidth = Math.max(0, left - currentWidth) + Math.max(0, viewRight - right);
            var percent = (viewHeight - hiddenHeight) * (viewWidth - hiddenWidth) * 100 / viewHeight / viewWidth | 0;
            visible.push({
                id: view.id,
                x: currentWidth,
                y: currentHeight,
                view: view,
                percent: percent
            });
        }
        var first = visible[0], last = visible[visible.length - 1];
        if (sortByVisibility) {
            visible.sort(function(a, b) {
                var pc = a.percent - b.percent;
                if (Math.abs(pc) > .001) {
                    return -pc;
                }
                return a.id - b.id;
            });
        }
        return {
            first: first,
            last: last,
            views: visible
        };
    }
    function noContextMenuHandler(evt) {
        evt.preventDefault();
    }
    function isDataSchema(url) {
        var i = 0, ii = url.length;
        while (i < ii && url[i].trim() === "") {
            i++;
        }
        return url.substring(i, i + 5).toLowerCase() === "data:";
    }
    function getPDFFileNameFromURL(url) {
        var defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "document.pdf";
        if (typeof url !== "string") {
            return defaultFilename;
        }
        if (isDataSchema(url)) {
            console.warn("getPDFFileNameFromURL: " + 'ignoring "data:" URL for performance reasons.');
            return defaultFilename;
        }
        var reURI = /^(?:(?:[^:]+:)?\/\/[^\/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/;
        var reFilename = /[^\/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
        var splitURI = reURI.exec(url);
        var suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);
        if (suggestedFilename) {
            suggestedFilename = suggestedFilename[0];
            if (suggestedFilename.includes("%")) {
                try {
                    suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];
                } catch (ex) {}
            }
        }
        return suggestedFilename || defaultFilename;
    }
    function normalizeWheelEventDelta(evt) {
        var delta = Math.sqrt(evt.deltaX * evt.deltaX + evt.deltaY * evt.deltaY);
        var angle = Math.atan2(evt.deltaY, evt.deltaX);
        if (-.25 * Math.PI < angle && angle < .75 * Math.PI) {
            delta = -delta;
        }
        var MOUSE_DOM_DELTA_PIXEL_MODE = 0;
        var MOUSE_DOM_DELTA_LINE_MODE = 1;
        var MOUSE_PIXELS_PER_LINE = 30;
        var MOUSE_LINES_PER_PAGE = 30;
        if (evt.deltaMode === MOUSE_DOM_DELTA_PIXEL_MODE) {
            delta /= MOUSE_PIXELS_PER_LINE * MOUSE_LINES_PER_PAGE;
        } else if (evt.deltaMode === MOUSE_DOM_DELTA_LINE_MODE) {
            delta /= MOUSE_LINES_PER_PAGE;
        }
        return delta;
    }
    function isValidRotation(angle) {
        return Number.isInteger(angle) && angle % 90 === 0;
    }
    function isValidScrollMode(mode) {
        return Number.isInteger(mode) && Object.values(ScrollMode).includes(mode) && mode !== ScrollMode.UNKNOWN;
    }
    function isValidSpreadMode(mode) {
        return Number.isInteger(mode) && Object.values(SpreadMode).includes(mode) && mode !== SpreadMode.UNKNOWN;
    }
    function isPortraitOrientation(size) {
        return size.width <= size.height;
    }
    var WaitOnType = {
        EVENT: "event",
        TIMEOUT: "timeout"
    };
    exports.WaitOnType = WaitOnType;
    function waitOnEventOrTimeout(_ref2) {
        var target = _ref2.target, name = _ref2.name, _ref2$delay = _ref2.delay, delay = _ref2$delay === void 0 ? 0 : _ref2$delay;
        return new Promise(function(resolve, reject) {
            if (_typeof(target) !== "object" || !(name && typeof name === "string") || !(Number.isInteger(delay) && delay >= 0)) {
                throw new Error("waitOnEventOrTimeout - invalid parameters.");
            }
            function handler(type) {
                if (target instanceof EventBus) {
                    target.off(name, eventHandler);
                } else {
                    target.removeEventListener(name, eventHandler);
                }
                if (timeout) {
                    clearTimeout(timeout);
                }
                resolve(type);
            }
            var eventHandler = handler.bind(null, WaitOnType.EVENT);
            if (target instanceof EventBus) {
                target.on(name, eventHandler);
            } else {
                target.addEventListener(name, eventHandler);
            }
            var timeoutHandler = handler.bind(null, WaitOnType.TIMEOUT);
            var timeout = setTimeout(timeoutHandler, delay);
        });
    }
    var animationStarted = new Promise(function(resolve) {
        window.requestAnimationFrame(resolve);
    });
    exports.animationStarted = animationStarted;
    var EventBus = function() {
        function EventBus() {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref3$dispatchToDOM = _ref3.dispatchToDOM, dispatchToDOM = _ref3$dispatchToDOM === void 0 ? false : _ref3$dispatchToDOM;
            _classCallCheck(this, EventBus);
            this._listeners = Object.create(null);
            this._dispatchToDOM = dispatchToDOM === true;
        }
        _createClass(EventBus, [ {
            key: "on",
            value: function on(eventName, listener) {
                var eventListeners = this._listeners[eventName];
                if (!eventListeners) {
                    eventListeners = [];
                    this._listeners[eventName] = eventListeners;
                }
                eventListeners.push(listener);
            }
        }, {
            key: "off",
            value: function off(eventName, listener) {
                var eventListeners = this._listeners[eventName];
                var i;
                if (!eventListeners || (i = eventListeners.indexOf(listener)) < 0) {
                    return;
                }
                eventListeners.splice(i, 1);
            }
        }, {
            key: "dispatch",
            value: function dispatch(eventName) {
                var eventListeners = this._listeners[eventName];
                if (!eventListeners || eventListeners.length === 0) {
                    if (this._dispatchToDOM) {
                        var _args5 = Array.prototype.slice.call(arguments, 1);
                        this._dispatchDOMEvent(eventName, _args5);
                    }
                    return;
                }
                var args = Array.prototype.slice.call(arguments, 1);
                eventListeners.slice(0).forEach(function(listener) {
                    listener.apply(null, args);
                });
                if (this._dispatchToDOM) {
                    this._dispatchDOMEvent(eventName, args);
                }
            }
        }, {
            key: "_dispatchDOMEvent",
            value: function _dispatchDOMEvent(eventName) {
                var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var details = Object.create(null);
                if (args && args.length > 0) {
                    var obj = args[0];
                    for (var key in obj) {
                        var value = obj[key];
                        if (key === "source") {
                            if (value === window || value === document) {
                                return;
                            }
                            continue;
                        }
                        details[key] = value;
                    }
                }
                var event = document.createEvent("CustomEvent");
                event.initCustomEvent(eventName, true, true, details);
                document.dispatchEvent(event);
            }
        } ]);
        return EventBus;
    }();
    exports.EventBus = EventBus;
    var globalEventBus = null;
    function getGlobalEventBus() {
        var dispatchToDOM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (!globalEventBus) {
            globalEventBus = new EventBus({
                dispatchToDOM: dispatchToDOM
            });
        }
        return globalEventBus;
    }
    function clamp(v, min, max) {
        return Math.min(Math.max(v, min), max);
    }
    var ProgressBar = function() {
        function ProgressBar(id) {
            var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, height = _ref4.height, width = _ref4.width, units = _ref4.units;
            _classCallCheck(this, ProgressBar);
            this.visible = true;
            this.div = document.querySelector(id + " .progress");
            this.bar = this.div.parentNode;
            this.height = height || 100;
            this.width = width || 100;
            this.units = units || "%";
            this.div.style.height = this.height + this.units;
            this.percent = 0;
        }
        _createClass(ProgressBar, [ {
            key: "_updateBar",
            value: function _updateBar() {
                if (this._indeterminate) {
                    this.div.classList.add("indeterminate");
                    this.div.style.width = this.width + this.units;
                    return;
                }
                this.div.classList.remove("indeterminate");
                var progressSize = this.width * this._percent / 100;
                this.div.style.width = progressSize + this.units;
            }
        }, {
            key: "setWidth",
            value: function setWidth(viewer) {
                if (!viewer) {
                    return;
                }
                var container = viewer.parentNode;
                var scrollbarWidth = container.offsetWidth - viewer.offsetWidth;
                if (scrollbarWidth > 0) {
                    this.bar.setAttribute("style", "width: calc(100% - " + scrollbarWidth + "px);");
                }
            }
        }, {
            key: "hide",
            value: function hide() {
                if (!this.visible) {
                    return;
                }
                this.visible = false;
                this.bar.classList.add("hidden");
                document.body.classList.remove("loadingInProgress");
            }
        }, {
            key: "show",
            value: function show() {
                if (this.visible) {
                    return;
                }
                this.visible = true;
                document.body.classList.add("loadingInProgress");
                this.bar.classList.remove("hidden");
            }
        }, {
            key: "percent",
            get: function get() {
                return this._percent;
            },
            set: function set(val) {
                this._indeterminate = isNaN(val);
                this._percent = clamp(val, 0, 100);
                this._updateBar();
            }
        } ]);
        return ProgressBar;
    }();
    exports.ProgressBar = ProgressBar;
    function moveToEndOfArray(arr, condition) {
        var moved = [], len = arr.length;
        var write = 0;
        for (var read = 0; read < len; ++read) {
            if (condition(arr[read])) {
                moved.push(arr[read]);
            } else {
                arr[write] = arr[read];
                ++write;
            }
        }
        for (var _read = 0; write < len; ++_read, ++write) {
            arr[write] = moved[_read];
        }
    }
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.OptionKind = exports.AppOptions = void 0;
    var _pdfjsLib = __webpack_require__(7);
    var _viewer_compatibility = __webpack_require__(8);
    function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var OptionKind = {
        VIEWER: 2,
        API: 4,
        WORKER: 8,
        PREFERENCE: 128
    };
    exports.OptionKind = OptionKind;
    var defaultOptions = {
        cursorToolOnLoad: {
            value: 0,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        defaultUrl: {
            value: "compressed.tracemonkey-pldi-09.pdf",
            kind: OptionKind.VIEWER
        },
        defaultZoomValue: {
            value: "",
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        disableHistory: {
            value: false,
            kind: OptionKind.VIEWER
        },
        disablePageLabels: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        enablePrintAutoRotate: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        enableWebGL: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        eventBusDispatchToDOM: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        externalLinkRel: {
            value: "noopener noreferrer nofollow",
            kind: OptionKind.VIEWER
        },
        externalLinkTarget: {
            value: 0,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        historyUpdateUrl: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        imageResourcesPath: {
            value: "./images/",
            kind: OptionKind.VIEWER
        },
        maxCanvasPixels: {
            value: 16777216,
            compatibility: _viewer_compatibility.viewerCompatibilityParams.maxCanvasPixels,
            kind: OptionKind.VIEWER
        },
        pdfBugEnabled: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        renderer: {
            value: "canvas",
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        renderInteractiveForms: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        sidebarViewOnLoad: {
            value: -1,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        scrollModeOnLoad: {
            value: -1,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        spreadModeOnLoad: {
            value: -1,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        textLayerMode: {
            value: 1,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        useOnlyCssZoom: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        viewOnLoad: {
            value: 0,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
        },
        cMapPacked: {
            value: true,
            kind: OptionKind.API
        },
        cMapUrl: {
            value: "../web/cmaps/",
            kind: OptionKind.API
        },
        disableAutoFetch: {
            value: false,
            kind: OptionKind.API + OptionKind.PREFERENCE
        },
        disableCreateObjectURL: {
            value: false,
            compatibility: _pdfjsLib.apiCompatibilityParams.disableCreateObjectURL,
            kind: OptionKind.API
        },
        disableFontFace: {
            value: false,
            kind: OptionKind.API + OptionKind.PREFERENCE
        },
        disableRange: {
            value: false,
            kind: OptionKind.API + OptionKind.PREFERENCE
        },
        disableStream: {
            value: false,
            kind: OptionKind.API + OptionKind.PREFERENCE
        },
        isEvalSupported: {
            value: true,
            kind: OptionKind.API
        },
        maxImageSize: {
            value: -1,
            kind: OptionKind.API
        },
        pdfBug: {
            value: false,
            kind: OptionKind.API
        },
        postMessageTransfers: {
            value: true,
            kind: OptionKind.API
        },
        verbosity: {
            value: 1,
            kind: OptionKind.API
        },
        workerPort: {
            value: null,
            kind: OptionKind.WORKER
        },
        workerSrc: {
            value: "../build/pdf.worker.js",
            kind: OptionKind.WORKER
        }
    };
    {
        defaultOptions.disablePreferences = {
            value: false,
            kind: OptionKind.VIEWER
        };
        defaultOptions.locale = {
            value: typeof navigator !== "undefined" ? navigator.language : "en-US",
            kind: OptionKind.VIEWER
        };
    }
    var userOptions = Object.create(null);
    var AppOptions = function() {
        function AppOptions() {
            _classCallCheck(this, AppOptions);
            throw new Error("Cannot initialize AppOptions.");
        }
        _createClass(AppOptions, null, [ {
            key: "get",
            value: function get(name) {
                var userOption = userOptions[name];
                if (userOption !== undefined) {
                    return userOption;
                }
                var defaultOption = defaultOptions[name];
                if (defaultOption !== undefined) {
                    return defaultOption.compatibility || defaultOption.value;
                }
                return undefined;
            }
        }, {
            key: "getAll",
            value: function getAll() {
                var kind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                var options = Object.create(null);
                for (var name in defaultOptions) {
                    var defaultOption = defaultOptions[name];
                    if (kind) {
                        if ((kind & defaultOption.kind) === 0) {
                            continue;
                        }
                        if (kind === OptionKind.PREFERENCE) {
                            var value = defaultOption.value, valueType = _typeof(value);
                            if (valueType === "boolean" || valueType === "string" || valueType === "number" && Number.isInteger(value)) {
                                options[name] = value;
                                continue;
                            }
                            throw new Error("Invalid type for preference: ".concat(name));
                        }
                    }
                    var userOption = userOptions[name];
                    options[name] = userOption !== undefined ? userOption : defaultOption.compatibility || defaultOption.value;
                }
                return options;
            }
        }, {
            key: "set",
            value: function set(name, value) {
                userOptions[name] = value;
            }
        }, {
            key: "remove",
            value: function remove(name) {
                delete userOptions[name];
            }
        } ]);
        return AppOptions;
    }();
    exports.AppOptions = AppOptions;
}, function(module, exports, __webpack_require__) {
    "use strict";
    var pdfjsLib;
    if (typeof window !== "undefined" && window["pdfjs-dist/build/pdf"]) {
        pdfjsLib = window["pdfjs-dist/build/pdf"];
    } else {
        pdfjsLib = require("../build/pdf.js");
    }
    module.exports = pdfjsLib;
}, function(module, exports, __webpack_require__) {
    "use strict";
    var compatibilityParams = Object.create(null);
    {
        var userAgent = typeof navigator !== "undefined" && navigator.userAgent || "";
        var isAndroid = /Android/.test(userAgent);
        var isIOS = /\b(iPad|iPhone|iPod)(?=;)/.test(userAgent);
        (function checkCanvasSizeLimitation() {
            if (isIOS || isAndroid) {
                compatibilityParams.maxCanvasPixels = 5242880;
            }
        })();
    }
    exports.viewerCompatibilityParams = Object.freeze(compatibilityParams);
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFCursorTools = exports.CursorTool = void 0;
    var _grab_to_pan = __webpack_require__(10);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var CursorTool = {
        SELECT: 0,
        HAND: 1,
        ZOOM: 2
    };
    exports.CursorTool = CursorTool;
    var PDFCursorTools = function() {
        function PDFCursorTools(_ref) {
            var _this = this;
            var container = _ref.container, eventBus = _ref.eventBus, _ref$cursorToolOnLoad = _ref.cursorToolOnLoad, cursorToolOnLoad = _ref$cursorToolOnLoad === void 0 ? CursorTool.SELECT : _ref$cursorToolOnLoad;
            _classCallCheck(this, PDFCursorTools);
            this.container = container;
            this.eventBus = eventBus;
            this.active = CursorTool.SELECT;
            this.activeBeforePresentationMode = null;
            this.handTool = new _grab_to_pan.GrabToPan({
                element: this.container
            });
            this._addEventListeners();
            Promise.resolve().then(function() {
                _this.switchTool(cursorToolOnLoad);
            });
        }
        _createClass(PDFCursorTools, [ {
            key: "switchTool",
            value: function switchTool(tool) {
                var _this2 = this;
                if (this.activeBeforePresentationMode !== null) {
                    return;
                }
                if (tool === this.active) {
                    return;
                }
                var disableActiveTool = function disableActiveTool() {
                    switch (_this2.active) {
                      case CursorTool.SELECT:
                        break;

                      case CursorTool.HAND:
                        _this2.handTool.deactivate();
                        break;

                      case CursorTool.ZOOM:
                    }
                };
                switch (tool) {
                  case CursorTool.SELECT:
                    disableActiveTool();
                    break;

                  case CursorTool.HAND:
                    disableActiveTool();
                    this.handTool.activate();
                    break;

                  case CursorTool.ZOOM:
                  default:
                    console.error('switchTool: "'.concat(tool, '" is an unsupported value.'));
                    return;
                }
                this.active = tool;
                this._dispatchEvent();
            }
        }, {
            key: "_dispatchEvent",
            value: function _dispatchEvent() {
                this.eventBus.dispatch("cursortoolchanged", {
                    source: this,
                    tool: this.active
                });
            }
        }, {
            key: "_addEventListeners",
            value: function _addEventListeners() {
                var _this3 = this;
                this.eventBus.on("switchcursortool", function(evt) {
                    _this3.switchTool(evt.tool);
                });
                this.eventBus.on("presentationmodechanged", function(evt) {
                    if (evt.switchInProgress) {
                        return;
                    }
                    var previouslyActive;
                    if (evt.active) {
                        previouslyActive = _this3.active;
                        _this3.switchTool(CursorTool.SELECT);
                        _this3.activeBeforePresentationMode = previouslyActive;
                    } else {
                        previouslyActive = _this3.activeBeforePresentationMode;
                        _this3.activeBeforePresentationMode = null;
                        _this3.switchTool(previouslyActive);
                    }
                });
            }
        }, {
            key: "activeTool",
            get: function get() {
                return this.active;
            }
        } ]);
        return PDFCursorTools;
    }();
    exports.PDFCursorTools = PDFCursorTools;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.GrabToPan = GrabToPan;
    function GrabToPan(options) {
        this.element = options.element;
        this.document = options.element.ownerDocument;
        if (typeof options.ignoreTarget === "function") {
            this.ignoreTarget = options.ignoreTarget;
        }
        this.onActiveChanged = options.onActiveChanged;
        this.activate = this.activate.bind(this);
        this.deactivate = this.deactivate.bind(this);
        this.toggle = this.toggle.bind(this);
        this._onmousedown = this._onmousedown.bind(this);
        this._onmousemove = this._onmousemove.bind(this);
        this._endPan = this._endPan.bind(this);
        var overlay = this.overlay = document.createElement("div");
        overlay.className = "grab-to-pan-grabbing";
    }
    GrabToPan.prototype = {
        CSS_CLASS_GRAB: "grab-to-pan-grab",
        activate: function GrabToPan_activate() {
            if (!this.active) {
                this.active = true;
                this.element.addEventListener("mousedown", this._onmousedown, true);
                this.element.classList.add(this.CSS_CLASS_GRAB);
                if (this.onActiveChanged) {
                    this.onActiveChanged(true);
                }
            }
        },
        deactivate: function GrabToPan_deactivate() {
            if (this.active) {
                this.active = false;
                this.element.removeEventListener("mousedown", this._onmousedown, true);
                this._endPan();
                this.element.classList.remove(this.CSS_CLASS_GRAB);
                if (this.onActiveChanged) {
                    this.onActiveChanged(false);
                }
            }
        },
        toggle: function GrabToPan_toggle() {
            if (this.active) {
                this.deactivate();
            } else {
                this.activate();
            }
        },
        ignoreTarget: function GrabToPan_ignoreTarget(node) {
            return node[matchesSelector]("a[href], a[href] *, input, textarea, button, button *, select, option");
        },
        _onmousedown: function GrabToPan__onmousedown(event) {
            if (event.button !== 0 || this.ignoreTarget(event.target)) {
                return;
            }
            if (event.originalTarget) {
                try {
                    event.originalTarget.tagName;
                } catch (e) {
                    return;
                }
            }
            this.scrollLeftStart = this.element.scrollLeft;
            this.scrollTopStart = this.element.scrollTop;
            this.clientXStart = event.clientX;
            this.clientYStart = event.clientY;
            this.document.addEventListener("mousemove", this._onmousemove, true);
            this.document.addEventListener("mouseup", this._endPan, true);
            this.element.addEventListener("scroll", this._endPan, true);
            event.preventDefault();
            event.stopPropagation();
            var focusedElement = document.activeElement;
            if (focusedElement && !focusedElement.contains(event.target)) {
                focusedElement.blur();
            }
        },
        _onmousemove: function GrabToPan__onmousemove(event) {
            this.element.removeEventListener("scroll", this._endPan, true);
            if (isLeftMouseReleased(event)) {
                this._endPan();
                return;
            }
            var xDiff = event.clientX - this.clientXStart;
            var yDiff = event.clientY - this.clientYStart;
            var scrollTop = this.scrollTopStart - yDiff;
            var scrollLeft = this.scrollLeftStart - xDiff;
            if (this.element.scrollTo) {
                this.element.scrollTo({
                    top: scrollTop,
                    left: scrollLeft,
                    behavior: "instant"
                });
            } else {
                this.element.scrollTop = scrollTop;
                this.element.scrollLeft = scrollLeft;
            }
            if (!this.overlay.parentNode) {
                document.body.appendChild(this.overlay);
            }
        },
        _endPan: function GrabToPan__endPan() {
            this.element.removeEventListener("scroll", this._endPan, true);
            this.document.removeEventListener("mousemove", this._onmousemove, true);
            this.document.removeEventListener("mouseup", this._endPan, true);
            this.overlay.remove();
        }
    };
    var matchesSelector;
    [ "webkitM", "mozM", "msM", "oM", "m" ].some(function(prefix) {
        var name = prefix + "atches";
        if (name in document.documentElement) {
            matchesSelector = name;
        }
        name += "Selector";
        if (name in document.documentElement) {
            matchesSelector = name;
        }
        return matchesSelector;
    });
    var isNotIEorIsIE10plus = !document.documentMode || document.documentMode > 9;
    var chrome = window.chrome;
    var isChrome15OrOpera15plus = chrome && (chrome.webstore || chrome.app);
    var isSafari6plus = /Apple/.test(navigator.vendor) && /Version\/([6-9]\d*|[1-5]\d+)/.test(navigator.userAgent);
    function isLeftMouseReleased(event) {
        if ("buttons" in event && isNotIEorIsIE10plus) {
            return !(event.buttons & 1);
        }
        if (isChrome15OrOpera15plus || isSafari6plus) {
            return event.which === 0;
        }
    }
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFRenderingQueue = exports.RenderingStates = void 0;
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var CLEANUP_TIMEOUT = 3e4;
    var RenderingStates = {
        INITIAL: 0,
        RUNNING: 1,
        PAUSED: 2,
        FINISHED: 3
    };
    exports.RenderingStates = RenderingStates;
    var PDFRenderingQueue = function() {
        function PDFRenderingQueue() {
            _classCallCheck(this, PDFRenderingQueue);
            this.pdfViewer = null;
            this.pdfThumbnailViewer = null;
            this.onIdle = null;
            this.highestPriorityPage = null;
            this.idleTimeout = null;
            this.printing = false;
            this.isThumbnailViewEnabled = false;
        }
        _createClass(PDFRenderingQueue, [ {
            key: "setViewer",
            value: function setViewer(pdfViewer) {
                this.pdfViewer = pdfViewer;
            }
        }, {
            key: "setThumbnailViewer",
            value: function setThumbnailViewer(pdfThumbnailViewer) {
                this.pdfThumbnailViewer = pdfThumbnailViewer;
            }
        }, {
            key: "isHighestPriority",
            value: function isHighestPriority(view) {
                return this.highestPriorityPage === view.renderingId;
            }
        }, {
            key: "renderHighestPriority",
            value: function renderHighestPriority(currentlyVisiblePages) {
                if (this.idleTimeout) {
                    clearTimeout(this.idleTimeout);
                    this.idleTimeout = null;
                }
                if (this.pdfViewer.forceRendering(currentlyVisiblePages)) {
                    return;
                }
                if (this.pdfThumbnailViewer && this.isThumbnailViewEnabled) {
                    if (this.pdfThumbnailViewer.forceRendering()) {
                        return;
                    }
                }
                if (this.printing) {
                    return;
                }
                if (this.onIdle) {
                    this.idleTimeout = setTimeout(this.onIdle.bind(this), CLEANUP_TIMEOUT);
                }
            }
        }, {
            key: "getHighestPriority",
            value: function getHighestPriority(visible, views, scrolledDown) {
                var visibleViews = visible.views;
                var numVisible = visibleViews.length;
                if (numVisible === 0) {
                    return null;
                }
                for (var i = 0; i < numVisible; ++i) {
                    var view = visibleViews[i].view;
                    if (!this.isViewFinished(view)) {
                        return view;
                    }
                }
                if (scrolledDown) {
                    var nextPageIndex = visible.last.id;
                    if (views[nextPageIndex] && !this.isViewFinished(views[nextPageIndex])) {
                        return views[nextPageIndex];
                    }
                } else {
                    var previousPageIndex = visible.first.id - 2;
                    if (views[previousPageIndex] && !this.isViewFinished(views[previousPageIndex])) {
                        return views[previousPageIndex];
                    }
                }
                return null;
            }
        }, {
            key: "isViewFinished",
            value: function isViewFinished(view) {
                return view.renderingState === RenderingStates.FINISHED;
            }
        }, {
            key: "renderView",
            value: function renderView(view) {
                var _this = this;
                switch (view.renderingState) {
                  case RenderingStates.FINISHED:
                    return false;

                  case RenderingStates.PAUSED:
                    this.highestPriorityPage = view.renderingId;
                    view.resume();
                    break;

                  case RenderingStates.RUNNING:
                    this.highestPriorityPage = view.renderingId;
                    break;

                  case RenderingStates.INITIAL:
                    this.highestPriorityPage = view.renderingId;
                    view.draw()["finally"](function() {
                        _this.renderHighestPriority();
                    });
                    break;
                }
                return true;
            }
        } ]);
        return PDFRenderingQueue;
    }();
    exports.PDFRenderingQueue = PDFRenderingQueue;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFSidebar = exports.SidebarView = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdf_rendering_queue = __webpack_require__(11);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var UI_NOTIFICATION_CLASS = "pdfSidebarNotification";
    var SidebarView = {
        UNKNOWN: -1,
        NONE: 0,
        THUMBS: 1,
        OUTLINE: 2,
        ATTACHMENTS: 3,
        LAYERS: 4
    };
    exports.SidebarView = SidebarView;
    var PDFSidebar = function() {
        function PDFSidebar(_ref) {
            var elements = _ref.elements, pdfViewer = _ref.pdfViewer, pdfThumbnailViewer = _ref.pdfThumbnailViewer, eventBus = _ref.eventBus, _ref$l10n = _ref.l10n, l10n = _ref$l10n === void 0 ? _ui_utils.NullL10n : _ref$l10n, _ref$disableNotificat = _ref.disableNotification, disableNotification = _ref$disableNotificat === void 0 ? false : _ref$disableNotificat;
            _classCallCheck(this, PDFSidebar);
            this.isOpen = false;
            this.active = SidebarView.THUMBS;
            this.isInitialViewSet = false;
            this.onToggled = null;
            this.pdfViewer = pdfViewer;
            this.pdfThumbnailViewer = pdfThumbnailViewer;
            this.outerContainer = elements.outerContainer;
            this.viewerContainer = elements.viewerContainer;
            this.toggleButton = elements.toggleButton;
            this.thumbnailButton = elements.thumbnailButton;
            this.outlineButton = elements.outlineButton;
            this.attachmentsButton = elements.attachmentsButton;
            this.thumbnailView = elements.thumbnailView;
            this.outlineView = elements.outlineView;
            this.attachmentsView = elements.attachmentsView;
            this.eventBus = eventBus;
            this.l10n = l10n;
            this._disableNotification = disableNotification;
            this._addEventListeners();
        }
        _createClass(PDFSidebar, [ {
            key: "reset",
            value: function reset() {
                this.isInitialViewSet = false;
                this._hideUINotification(null);
                this.switchView(SidebarView.THUMBS);
                this.outlineButton.disabled = false;
                this.attachmentsButton.disabled = false;
            }
        }, {
            key: "setInitialView",
            value: function setInitialView() {
                var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SidebarView.NONE;
                if (this.isInitialViewSet) {
                    return;
                }
                this.isInitialViewSet = true;
                if (view === SidebarView.NONE || view === SidebarView.UNKNOWN) {
                    this._dispatchEvent();
                    return;
                }
                if (!this._switchView(view, true)) {
                    this._dispatchEvent();
                }
            }
        }, {
            key: "switchView",
            value: function switchView(view) {
                var forceOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                this._switchView(view, forceOpen);
            }
        }, {
            key: "_switchView",
            value: function _switchView(view) {
                var forceOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var isViewChanged = view !== this.active;
                var shouldForceRendering = false;
                switch (view) {
                  case SidebarView.NONE:
                    if (this.isOpen) {
                        this.close();
                        return true;
                    }
                    return false;

                  case SidebarView.THUMBS:
                    if (this.isOpen && isViewChanged) {
                        shouldForceRendering = true;
                    }
                    break;

                  case SidebarView.OUTLINE:
                    if (this.outlineButton.disabled) {
                        return false;
                    }
                    break;

                  case SidebarView.ATTACHMENTS:
                    if (this.attachmentsButton.disabled) {
                        return false;
                    }
                    break;

                  default:
                    console.error('PDFSidebar._switchView: "'.concat(view, '" is not a valid view.'));
                    return false;
                }
                this.active = view;
                this.thumbnailButton.classList.toggle("toggled", view === SidebarView.THUMBS);
                this.outlineButton.classList.toggle("toggled", view === SidebarView.OUTLINE);
                this.attachmentsButton.classList.toggle("toggled", view === SidebarView.ATTACHMENTS);
                this.thumbnailView.classList.toggle("hidden", view !== SidebarView.THUMBS);
                this.outlineView.classList.toggle("hidden", view !== SidebarView.OUTLINE);
                this.attachmentsView.classList.toggle("hidden", view !== SidebarView.ATTACHMENTS);
                if (forceOpen && !this.isOpen) {
                    this.open();
                    return true;
                }
                if (shouldForceRendering) {
                    this._updateThumbnailViewer();
                    this._forceRendering();
                }
                if (isViewChanged) {
                    this._dispatchEvent();
                }
                this._hideUINotification(this.active);
                return isViewChanged;
            }
        }, {
            key: "open",
            value: function open() {
                if (this.isOpen) {
                    return;
                }
                this.isOpen = true;
                this.toggleButton.classList.add("toggled");
                this.outerContainer.classList.add("sidebarMoving", "sidebarOpen");
                if (this.active === SidebarView.THUMBS) {
                    this._updateThumbnailViewer();
                }
                this._forceRendering();
                this._dispatchEvent();
                this._hideUINotification(this.active);
            }
        }, {
            key: "close",
            value: function close() {
                if (!this.isOpen) {
                    return;
                }
                this.isOpen = false;
                this.toggleButton.classList.remove("toggled");
                this.outerContainer.classList.add("sidebarMoving");
                this.outerContainer.classList.remove("sidebarOpen");
                this._forceRendering();
                this._dispatchEvent();
            }
        }, {
            key: "toggle",
            value: function toggle() {
                if (this.isOpen) {
                    this.close();
                } else {
                    this.open();
                }
            }
        }, {
            key: "_dispatchEvent",
            value: function _dispatchEvent() {
                this.eventBus.dispatch("sidebarviewchanged", {
                    source: this,
                    view: this.visibleView
                });
            }
        }, {
            key: "_forceRendering",
            value: function _forceRendering() {
                if (this.onToggled) {
                    this.onToggled();
                } else {
                    this.pdfViewer.forceRendering();
                    this.pdfThumbnailViewer.forceRendering();
                }
            }
        }, {
            key: "_updateThumbnailViewer",
            value: function _updateThumbnailViewer() {
                var pdfViewer = this.pdfViewer, pdfThumbnailViewer = this.pdfThumbnailViewer;
                var pagesCount = pdfViewer.pagesCount;
                for (var pageIndex = 0; pageIndex < pagesCount; pageIndex++) {
                    var pageView = pdfViewer.getPageView(pageIndex);
                    if (pageView && pageView.renderingState === _pdf_rendering_queue.RenderingStates.FINISHED) {
                        var thumbnailView = pdfThumbnailViewer.getThumbnail(pageIndex);
                        thumbnailView.setImage(pageView);
                    }
                }
                pdfThumbnailViewer.scrollThumbnailIntoView(pdfViewer.currentPageNumber);
            }
        }, {
            key: "_showUINotification",
            value: function _showUINotification(view) {
                var _this = this;
                if (this._disableNotification) {
                    return;
                }
                this.l10n.get("toggle_sidebar_notification.title", null, "Toggle Sidebar (document contains outline/attachments)").then(function(msg) {
                    _this.toggleButton.title = msg;
                });
                if (!this.isOpen) {
                    this.toggleButton.classList.add(UI_NOTIFICATION_CLASS);
                } else if (view === this.active) {
                    return;
                }
                switch (view) {
                  case SidebarView.OUTLINE:
                    this.outlineButton.classList.add(UI_NOTIFICATION_CLASS);
                    break;

                  case SidebarView.ATTACHMENTS:
                    this.attachmentsButton.classList.add(UI_NOTIFICATION_CLASS);
                    break;
                }
            }
        }, {
            key: "_hideUINotification",
            value: function _hideUINotification(view) {
                var _this2 = this;
                if (this._disableNotification) {
                    return;
                }
                var removeNotification = function removeNotification(view) {
                    switch (view) {
                      case SidebarView.OUTLINE:
                        _this2.outlineButton.classList.remove(UI_NOTIFICATION_CLASS);
                        break;

                      case SidebarView.ATTACHMENTS:
                        _this2.attachmentsButton.classList.remove(UI_NOTIFICATION_CLASS);
                        break;
                    }
                };
                if (!this.isOpen && view !== null) {
                    return;
                }
                this.toggleButton.classList.remove(UI_NOTIFICATION_CLASS);
                if (view !== null) {
                    removeNotification(view);
                    return;
                }
                for (view in SidebarView) {
                    removeNotification(SidebarView[view]);
                }
                this.l10n.get("toggle_sidebar.title", null, "Toggle Sidebar").then(function(msg) {
                    _this2.toggleButton.title = msg;
                });
            }
        }, {
            key: "_addEventListeners",
            value: function _addEventListeners() {
                var _this3 = this;
                this.viewerContainer.addEventListener("transitionend", function(evt) {
                    if (evt.target === _this3.viewerContainer) {
                        _this3.outerContainer.classList.remove("sidebarMoving");
                    }
                });
                this.thumbnailButton.addEventListener("click", function() {
                    _this3.switchView(SidebarView.THUMBS);
                });
                this.outlineButton.addEventListener("click", function() {
                    _this3.switchView(SidebarView.OUTLINE);
                });
                this.outlineButton.addEventListener("dblclick", function() {
                    _this3.eventBus.dispatch("toggleoutlinetree", {
                        source: _this3
                    });
                });
                this.attachmentsButton.addEventListener("click", function() {
                    _this3.switchView(SidebarView.ATTACHMENTS);
                });
                this.eventBus.on("outlineloaded", function(evt) {
                    var outlineCount = evt.outlineCount;
                    _this3.outlineButton.disabled = !outlineCount;
                    if (outlineCount) {
                        _this3._showUINotification(SidebarView.OUTLINE);
                    } else if (_this3.active === SidebarView.OUTLINE) {
                        _this3.switchView(SidebarView.THUMBS);
                    }
                });
                this.eventBus.on("attachmentsloaded", function(evt) {
                    if (evt.attachmentsCount) {
                        _this3.attachmentsButton.disabled = false;
                        _this3._showUINotification(SidebarView.ATTACHMENTS);
                        return;
                    }
                    Promise.resolve().then(function() {
                        if (_this3.attachmentsView.hasChildNodes()) {
                            return;
                        }
                        _this3.attachmentsButton.disabled = true;
                        if (_this3.active === SidebarView.ATTACHMENTS) {
                            _this3.switchView(SidebarView.THUMBS);
                        }
                    });
                });
                this.eventBus.on("presentationmodechanged", function(evt) {
                    if (!evt.active && !evt.switchInProgress && _this3.isThumbnailViewVisible) {
                        _this3._updateThumbnailViewer();
                    }
                });
            }
        }, {
            key: "visibleView",
            get: function get() {
                return this.isOpen ? this.active : SidebarView.NONE;
            }
        }, {
            key: "isThumbnailViewVisible",
            get: function get() {
                return this.isOpen && this.active === SidebarView.THUMBS;
            }
        }, {
            key: "isOutlineViewVisible",
            get: function get() {
                return this.isOpen && this.active === SidebarView.OUTLINE;
            }
        }, {
            key: "isAttachmentsViewVisible",
            get: function get() {
                return this.isOpen && this.active === SidebarView.ATTACHMENTS;
            }
        } ]);
        return PDFSidebar;
    }();
    exports.PDFSidebar = PDFSidebar;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.OverlayManager = void 0;
    var _regenerator = _interopRequireDefault(__webpack_require__(2));
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _asyncToGenerator(fn) {
        return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var OverlayManager = function() {
        function OverlayManager() {
            _classCallCheck(this, OverlayManager);
            this._overlays = {};
            this._active = null;
            this._keyDownBound = this._keyDown.bind(this);
        }
        _createClass(OverlayManager, [ {
            key: "register",
            value: function() {
                var _register = _asyncToGenerator(_regenerator["default"].mark(function _callee(name, element) {
                    var callerCloseMethod, canForceClose, container, _args = arguments;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                callerCloseMethod = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;
                                canForceClose = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;
                                if (!(!name || !element || !(container = element.parentNode))) {
                                    _context.next = 6;
                                    break;
                                }
                                throw new Error("Not enough parameters.");

                              case 6:
                                if (!this._overlays[name]) {
                                    _context.next = 8;
                                    break;
                                }
                                throw new Error("The overlay is already registered.");

                              case 8:
                                this._overlays[name] = {
                                    element: element,
                                    container: container,
                                    callerCloseMethod: callerCloseMethod,
                                    canForceClose: canForceClose
                                };

                              case 9:
                              case "end":
                                return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));
                function register(_x, _x2) {
                    return _register.apply(this, arguments);
                }
                return register;
            }()
        }, {
            key: "unregister",
            value: function() {
                var _unregister = _asyncToGenerator(_regenerator["default"].mark(function _callee2(name) {
                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                if (this._overlays[name]) {
                                    _context2.next = 4;
                                    break;
                                }
                                throw new Error("The overlay does not exist.");

                              case 4:
                                if (!(this._active === name)) {
                                    _context2.next = 6;
                                    break;
                                }
                                throw new Error("The overlay cannot be removed while it is active.");

                              case 6:
                                delete this._overlays[name];

                              case 7:
                              case "end":
                                return _context2.stop();
                            }
                        }
                    }, _callee2, this);
                }));
                function unregister(_x3) {
                    return _unregister.apply(this, arguments);
                }
                return unregister;
            }()
        }, {
            key: "open",
            value: function() {
                var _open = _asyncToGenerator(_regenerator["default"].mark(function _callee3(name) {
                    return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                if (this._overlays[name]) {
                                    _context3.next = 4;
                                    break;
                                }
                                throw new Error("The overlay does not exist.");

                              case 4:
                                if (!this._active) {
                                    _context3.next = 14;
                                    break;
                                }
                                if (!this._overlays[name].canForceClose) {
                                    _context3.next = 9;
                                    break;
                                }
                                this._closeThroughCaller();
                                _context3.next = 14;
                                break;

                              case 9:
                                if (!(this._active === name)) {
                                    _context3.next = 13;
                                    break;
                                }
                                throw new Error("The overlay is already active.");

                              case 13:
                                throw new Error("Another overlay is currently active.");

                              case 14:
                                this._active = name;
                                this._overlays[this._active].element.classList.remove("hidden");
                                this._overlays[this._active].container.classList.remove("hidden");
                                window.addEventListener("keydown", this._keyDownBound);

                              case 18:
                              case "end":
                                return _context3.stop();
                            }
                        }
                    }, _callee3, this);
                }));
                function open(_x4) {
                    return _open.apply(this, arguments);
                }
                return open;
            }()
        }, {
            key: "close",
            value: function() {
                var _close = _asyncToGenerator(_regenerator["default"].mark(function _callee4(name) {
                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                              case 0:
                                if (this._overlays[name]) {
                                    _context4.next = 4;
                                    break;
                                }
                                throw new Error("The overlay does not exist.");

                              case 4:
                                if (this._active) {
                                    _context4.next = 8;
                                    break;
                                }
                                throw new Error("The overlay is currently not active.");

                              case 8:
                                if (!(this._active !== name)) {
                                    _context4.next = 10;
                                    break;
                                }
                                throw new Error("Another overlay is currently active.");

                              case 10:
                                this._overlays[this._active].container.classList.add("hidden");
                                this._overlays[this._active].element.classList.add("hidden");
                                this._active = null;
                                window.removeEventListener("keydown", this._keyDownBound);

                              case 14:
                              case "end":
                                return _context4.stop();
                            }
                        }
                    }, _callee4, this);
                }));
                function close(_x5) {
                    return _close.apply(this, arguments);
                }
                return close;
            }()
        }, {
            key: "_keyDown",
            value: function _keyDown(evt) {
                if (this._active && evt.keyCode === 27) {
                    this._closeThroughCaller();
                    evt.preventDefault();
                }
            }
        }, {
            key: "_closeThroughCaller",
            value: function _closeThroughCaller() {
                if (this._overlays[this._active].callerCloseMethod) {
                    this._overlays[this._active].callerCloseMethod();
                }
                if (this._active) {
                    this.close(this._active);
                }
            }
        }, {
            key: "active",
            get: function get() {
                return this._active;
            }
        } ]);
        return OverlayManager;
    }();
    exports.OverlayManager = OverlayManager;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PasswordPrompt = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdfjsLib = __webpack_require__(7);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var PasswordPrompt = function() {
        function PasswordPrompt(options, overlayManager) {
            var _this = this;
            var l10n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ui_utils.NullL10n;
            _classCallCheck(this, PasswordPrompt);
            this.overlayName = options.overlayName;
            this.container = options.container;
            this.label = options.label;
            this.input = options.input;
            this.submitButton = options.submitButton;
            this.cancelButton = options.cancelButton;
            this.overlayManager = overlayManager;
            this.l10n = l10n;
            this.updateCallback = null;
            this.reason = null;
            this.submitButton.addEventListener("click", this.verify.bind(this));
            this.cancelButton.addEventListener("click", this.close.bind(this));
            this.input.addEventListener("keydown", function(e) {
                if (e.keyCode === 13) {
                    _this.verify();
                }
            });
            this.overlayManager.register(this.overlayName, this.container, this.close.bind(this), true);
        }
        _createClass(PasswordPrompt, [ {
            key: "open",
            value: function open() {
                var _this2 = this;
                this.overlayManager.open(this.overlayName).then(function() {
                    _this2.input.focus();
                    var promptString;
                    if (_this2.reason === _pdfjsLib.PasswordResponses.INCORRECT_PASSWORD) {
                        promptString = _this2.l10n.get("password_invalid", null, "Invalid password. Please try again.");
                    } else {
                        promptString = _this2.l10n.get("password_label", null, "Enter the password to open this PDF file.");
                    }
                    promptString.then(function(msg) {
                        _this2.label.textContent = msg;
                    });
                });
            }
        }, {
            key: "close",
            value: function close() {
                var _this3 = this;
                this.overlayManager.close(this.overlayName).then(function() {
                    _this3.input.value = "";
                });
            }
        }, {
            key: "verify",
            value: function verify() {
                var password = this.input.value;
                if (password && password.length > 0) {
                    this.close();
                    return this.updateCallback(password);
                }
            }
        }, {
            key: "setUpdateCallback",
            value: function setUpdateCallback(updateCallback, reason) {
                this.updateCallback = updateCallback;
                this.reason = reason;
            }
        } ]);
        return PasswordPrompt;
    }();
    exports.PasswordPrompt = PasswordPrompt;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFAttachmentViewer = void 0;
    var _pdfjsLib = __webpack_require__(7);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var PDFAttachmentViewer = function() {
        function PDFAttachmentViewer(_ref) {
            var container = _ref.container, eventBus = _ref.eventBus, downloadManager = _ref.downloadManager;
            _classCallCheck(this, PDFAttachmentViewer);
            this.container = container;
            this.eventBus = eventBus;
            this.downloadManager = downloadManager;
            this.reset();
            this.eventBus.on("fileattachmentannotation", this._appendAttachment.bind(this));
        }
        _createClass(PDFAttachmentViewer, [ {
            key: "reset",
            value: function reset() {
                var keepRenderedCapability = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                this.attachments = null;
                this.container.textContent = "";
                if (!keepRenderedCapability) {
                    this._renderedCapability = (0, _pdfjsLib.createPromiseCapability)();
                }
            }
        }, {
            key: "_dispatchEvent",
            value: function _dispatchEvent(attachmentsCount) {
                this._renderedCapability.resolve();
                this.eventBus.dispatch("attachmentsloaded", {
                    source: this,
                    attachmentsCount: attachmentsCount
                });
            }
        }, {
            key: "_bindPdfLink",
            value: function _bindPdfLink(button, content, filename) {
                if (this.downloadManager.disableCreateObjectURL) {
                    throw new Error('bindPdfLink: Unsupported "disableCreateObjectURL" value.');
                }
                var blobUrl;
                button.onclick = function() {
                    if (!blobUrl) {
                        blobUrl = (0, _pdfjsLib.createObjectURL)(content, "application/pdf");
                    }
                    var viewerUrl;
                    viewerUrl = "?file=" + encodeURIComponent(blobUrl + "#" + filename);
                    window.open(viewerUrl);
                    return false;
                };
            }
        }, {
            key: "_bindLink",
            value: function _bindLink(button, content, filename) {
                var _this = this;
                button.onclick = function() {
                    _this.downloadManager.downloadData(content, filename, "");
                    return false;
                };
            }
        }, {
            key: "render",
            value: function render(_ref2) {
                var attachments = _ref2.attachments, _ref2$keepRenderedCap = _ref2.keepRenderedCapability, keepRenderedCapability = _ref2$keepRenderedCap === void 0 ? false : _ref2$keepRenderedCap;
                var attachmentsCount = 0;
                if (this.attachments) {
                    this.reset(keepRenderedCapability === true);
                }
                this.attachments = attachments || null;
                if (!attachments) {
                    this._dispatchEvent(attachmentsCount);
                    return;
                }
                var names = Object.keys(attachments).sort(function(a, b) {
                    return a.toLowerCase().localeCompare(b.toLowerCase());
                });
                attachmentsCount = names.length;
                for (var i = 0; i < attachmentsCount; i++) {
                    var item = attachments[names[i]];
                    var filename = (0, _pdfjsLib.removeNullCharacters)((0, _pdfjsLib.getFilenameFromUrl)(item.filename));
                    var div = document.createElement("div");
                    div.className = "attachmentsItem";
                    var button = document.createElement("button");
                    button.textContent = filename;
                    if (/\.pdf$/i.test(filename) && !this.downloadManager.disableCreateObjectURL) {
                        this._bindPdfLink(button, item.content, filename);
                    } else {
                        this._bindLink(button, item.content, filename);
                    }
                    div.appendChild(button);
                    this.container.appendChild(div);
                }
                this._dispatchEvent(attachmentsCount);
            }
        }, {
            key: "_appendAttachment",
            value: function _appendAttachment(_ref3) {
                var _this2 = this;
                var id = _ref3.id, filename = _ref3.filename, content = _ref3.content;
                this._renderedCapability.promise.then(function() {
                    var attachments = _this2.attachments;
                    if (!attachments) {
                        attachments = Object.create(null);
                    } else {
                        for (var name in attachments) {
                            if (id === name) {
                                return;
                            }
                        }
                    }
                    attachments[id] = {
                        filename: filename,
                        content: content
                    };
                    _this2.render({
                        attachments: attachments,
                        keepRenderedCapability: true
                    });
                });
            }
        } ]);
        return PDFAttachmentViewer;
    }();
    exports.PDFAttachmentViewer = PDFAttachmentViewer;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFDocumentProperties = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdfjsLib = __webpack_require__(7);
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var DEFAULT_FIELD_CONTENT = "-";
    var NON_METRIC_LOCALES = [ "en-us", "en-lr", "my" ];
    var US_PAGE_NAMES = {
        "8.5x11": "Letter",
        "8.5x14": "Legal"
    };
    var METRIC_PAGE_NAMES = {
        "297x420": "A3",
        "210x297": "A4"
    };
    function getPageName(size, isPortrait, pageNames) {
        var width = isPortrait ? size.width : size.height;
        var height = isPortrait ? size.height : size.width;
        return pageNames["".concat(width, "x").concat(height)];
    }
    var PDFDocumentProperties = function() {
        function PDFDocumentProperties(_ref, overlayManager, eventBus) {
            var _this = this;
            var overlayName = _ref.overlayName, fields = _ref.fields, container = _ref.container, closeButton = _ref.closeButton;
            var l10n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _ui_utils.NullL10n;
            _classCallCheck(this, PDFDocumentProperties);
            this.overlayName = overlayName;
            this.fields = fields;
            this.container = container;
            this.overlayManager = overlayManager;
            this.l10n = l10n;
            this._reset();
            if (closeButton) {
                closeButton.addEventListener("click", this.close.bind(this));
            }
            this.overlayManager.register(this.overlayName, this.container, this.close.bind(this));
            if (eventBus) {
                eventBus.on("pagechanging", function(evt) {
                    _this._currentPageNumber = evt.pageNumber;
                });
                eventBus.on("rotationchanging", function(evt) {
                    _this._pagesRotation = evt.pagesRotation;
                });
            }
            this._isNonMetricLocale = true;
            l10n.getLanguage().then(function(locale) {
                _this._isNonMetricLocale = NON_METRIC_LOCALES.includes(locale);
            });
        }
        _createClass(PDFDocumentProperties, [ {
            key: "open",
            value: function open() {
                var _this2 = this;
                var freezeFieldData = function freezeFieldData(data) {
                    Object.defineProperty(_this2, "fieldData", {
                        value: Object.freeze(data),
                        writable: false,
                        enumerable: true,
                        configurable: true
                    });
                };
                Promise.all([ this.overlayManager.open(this.overlayName), this._dataAvailableCapability.promise ]).then(function() {
                    var currentPageNumber = _this2._currentPageNumber;
                    var pagesRotation = _this2._pagesRotation;
                    if (_this2.fieldData && currentPageNumber === _this2.fieldData["_currentPageNumber"] && pagesRotation === _this2.fieldData["_pagesRotation"]) {
                        _this2._updateUI();
                        return;
                    }
                    _this2.pdfDocument.getMetadata().then(function(_ref2) {
                        var info = _ref2.info, metadata = _ref2.metadata, contentDispositionFilename = _ref2.contentDispositionFilename;
                        return Promise.all([ info, metadata, contentDispositionFilename || (0, _ui_utils.getPDFFileNameFromURL)(_this2.url || ""), _this2._parseFileSize(_this2.maybeFileSize), _this2._parseDate(info.CreationDate), _this2._parseDate(info.ModDate), _this2.pdfDocument.getPage(currentPageNumber).then(function(pdfPage) {
                            return _this2._parsePageSize((0, _ui_utils.getPageSizeInches)(pdfPage), pagesRotation);
                        }), _this2._parseLinearization(info.IsLinearized) ]);
                    }).then(function(_ref3) {
                        var _ref4 = _slicedToArray(_ref3, 8), info = _ref4[0], metadata = _ref4[1], fileName = _ref4[2], fileSize = _ref4[3], creationDate = _ref4[4], modDate = _ref4[5], pageSize = _ref4[6], isLinearized = _ref4[7];
                        freezeFieldData({
                            fileName: fileName,
                            fileSize: fileSize,
                            title: info.Title,
                            author: info.Author,
                            subject: info.Subject,
                            keywords: info.Keywords,
                            creationDate: creationDate,
                            modificationDate: modDate,
                            creator: info.Creator,
                            producer: info.Producer,
                            version: info.PDFFormatVersion,
                            pageCount: _this2.pdfDocument.numPages,
                            pageSize: pageSize,
                            linearized: isLinearized,
                            _currentPageNumber: currentPageNumber,
                            _pagesRotation: pagesRotation
                        });
                        _this2._updateUI();
                        return _this2.pdfDocument.getDownloadInfo();
                    }).then(function(_ref5) {
                        var length = _ref5.length;
                        _this2.maybeFileSize = length;
                        return _this2._parseFileSize(length);
                    }).then(function(fileSize) {
                        if (fileSize === _this2.fieldData["fileSize"]) {
                            return;
                        }
                        var data = Object.assign(Object.create(null), _this2.fieldData);
                        data["fileSize"] = fileSize;
                        freezeFieldData(data);
                        _this2._updateUI();
                    });
                });
            }
        }, {
            key: "close",
            value: function close() {
                this.overlayManager.close(this.overlayName);
            }
        }, {
            key: "setDocument",
            value: function setDocument(pdfDocument) {
                var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                if (this.pdfDocument) {
                    this._reset();
                    this._updateUI(true);
                }
                if (!pdfDocument) {
                    return;
                }
                this.pdfDocument = pdfDocument;
                this.url = url;
                this._dataAvailableCapability.resolve();
            }
        }, {
            key: "setFileSize",
            value: function setFileSize(fileSize) {
                if (Number.isInteger(fileSize) && fileSize > 0) {
                    this.maybeFileSize = fileSize;
                }
            }
        }, {
            key: "_reset",
            value: function _reset() {
                this.pdfDocument = null;
                this.url = null;
                this.maybeFileSize = 0;
                delete this.fieldData;
                this._dataAvailableCapability = (0, _pdfjsLib.createPromiseCapability)();
                this._currentPageNumber = 1;
                this._pagesRotation = 0;
            }
        }, {
            key: "_updateUI",
            value: function _updateUI() {
                var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (reset || !this.fieldData) {
                    for (var id in this.fields) {
                        this.fields[id].textContent = DEFAULT_FIELD_CONTENT;
                    }
                    return;
                }
                if (this.overlayManager.active !== this.overlayName) {
                    return;
                }
                for (var _id in this.fields) {
                    var content = this.fieldData[_id];
                    this.fields[_id].textContent = content || content === 0 ? content : DEFAULT_FIELD_CONTENT;
                }
            }
        }, {
            key: "_parseFileSize",
            value: function _parseFileSize() {
                var fileSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var kb = fileSize / 1024;
                if (!kb) {
                    return Promise.resolve(undefined);
                } else if (kb < 1024) {
                    return this.l10n.get("document_properties_kb", {
                        size_kb: (+kb.toPrecision(3)).toLocaleString(),
                        size_b: fileSize.toLocaleString()
                    }, "{{size_kb}} KB ({{size_b}} bytes)");
                }
                return this.l10n.get("document_properties_mb", {
                    size_mb: (+(kb / 1024).toPrecision(3)).toLocaleString(),
                    size_b: fileSize.toLocaleString()
                }, "{{size_mb}} MB ({{size_b}} bytes)");
            }
        }, {
            key: "_parsePageSize",
            value: function _parsePageSize(pageSizeInches, pagesRotation) {
                var _this3 = this;
                if (!pageSizeInches) {
                    return Promise.resolve(undefined);
                }
                if (pagesRotation % 180 !== 0) {
                    pageSizeInches = {
                        width: pageSizeInches.height,
                        height: pageSizeInches.width
                    };
                }
                var isPortrait = (0, _ui_utils.isPortraitOrientation)(pageSizeInches);
                var sizeInches = {
                    width: Math.round(pageSizeInches.width * 100) / 100,
                    height: Math.round(pageSizeInches.height * 100) / 100
                };
                var sizeMillimeters = {
                    width: Math.round(pageSizeInches.width * 25.4 * 10) / 10,
                    height: Math.round(pageSizeInches.height * 25.4 * 10) / 10
                };
                var pageName = null;
                var name = getPageName(sizeInches, isPortrait, US_PAGE_NAMES) || getPageName(sizeMillimeters, isPortrait, METRIC_PAGE_NAMES);
                if (!name && !(Number.isInteger(sizeMillimeters.width) && Number.isInteger(sizeMillimeters.height))) {
                    var exactMillimeters = {
                        width: pageSizeInches.width * 25.4,
                        height: pageSizeInches.height * 25.4
                    };
                    var intMillimeters = {
                        width: Math.round(sizeMillimeters.width),
                        height: Math.round(sizeMillimeters.height)
                    };
                    if (Math.abs(exactMillimeters.width - intMillimeters.width) < .1 && Math.abs(exactMillimeters.height - intMillimeters.height) < .1) {
                        name = getPageName(intMillimeters, isPortrait, METRIC_PAGE_NAMES);
                        if (name) {
                            sizeInches = {
                                width: Math.round(intMillimeters.width / 25.4 * 100) / 100,
                                height: Math.round(intMillimeters.height / 25.4 * 100) / 100
                            };
                            sizeMillimeters = intMillimeters;
                        }
                    }
                }
                if (name) {
                    pageName = this.l10n.get("document_properties_page_size_name_" + name.toLowerCase(), null, name);
                }
                return Promise.all([ this._isNonMetricLocale ? sizeInches : sizeMillimeters, this.l10n.get("document_properties_page_size_unit_" + (this._isNonMetricLocale ? "inches" : "millimeters"), null, this._isNonMetricLocale ? "in" : "mm"), pageName, this.l10n.get("document_properties_page_size_orientation_" + (isPortrait ? "portrait" : "landscape"), null, isPortrait ? "portrait" : "landscape") ]).then(function(_ref6) {
                    var _ref7 = _slicedToArray(_ref6, 4), _ref7$ = _ref7[0], width = _ref7$.width, height = _ref7$.height, unit = _ref7[1], name = _ref7[2], orientation = _ref7[3];
                    return _this3.l10n.get("document_properties_page_size_dimension_" + (name ? "name_" : "") + "string", {
                        width: width.toLocaleString(),
                        height: height.toLocaleString(),
                        unit: unit,
                        name: name,
                        orientation: orientation
                    }, "{{width}} × {{height}} {{unit}} (" + (name ? "{{name}}, " : "") + "{{orientation}})");
                });
            }
        }, {
            key: "_parseDate",
            value: function _parseDate(inputDate) {
                if (!inputDate) {
                    return;
                }
                var dateToParse = inputDate;
                if (dateToParse.substring(0, 2) === "D:") {
                    dateToParse = dateToParse.substring(2);
                }
                var year = parseInt(dateToParse.substring(0, 4), 10);
                var month = parseInt(dateToParse.substring(4, 6), 10) - 1;
                var day = parseInt(dateToParse.substring(6, 8), 10);
                var hours = parseInt(dateToParse.substring(8, 10), 10);
                var minutes = parseInt(dateToParse.substring(10, 12), 10);
                var seconds = parseInt(dateToParse.substring(12, 14), 10);
                var utRel = dateToParse.substring(14, 15);
                var offsetHours = parseInt(dateToParse.substring(15, 17), 10);
                var offsetMinutes = parseInt(dateToParse.substring(18, 20), 10);
                if (utRel === "-") {
                    hours += offsetHours;
                    minutes += offsetMinutes;
                } else if (utRel === "+") {
                    hours -= offsetHours;
                    minutes -= offsetMinutes;
                }
                var date = new Date(Date.UTC(year, month, day, hours, minutes, seconds));
                var dateString = date.toLocaleDateString();
                var timeString = date.toLocaleTimeString();
                return this.l10n.get("document_properties_date_string", {
                    date: dateString,
                    time: timeString
                }, "{{date}}, {{time}}");
            }
        }, {
            key: "_parseLinearization",
            value: function _parseLinearization(isLinearized) {
                return this.l10n.get("document_properties_linearized_" + (isLinearized ? "yes" : "no"), null, isLinearized ? "Yes" : "No");
            }
        } ]);
        return PDFDocumentProperties;
    }();
    exports.PDFDocumentProperties = PDFDocumentProperties;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFFindBar = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdf_find_controller = __webpack_require__(18);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var MATCHES_COUNT_LIMIT = 1e3;
    var PDFFindBar = function() {
        function PDFFindBar(options) {
            var _this = this;
            var eventBus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, 
            _ui_utils.getGlobalEventBus)();
            var l10n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ui_utils.NullL10n;
            _classCallCheck(this, PDFFindBar);
            this.opened = false;
            this.bar = options.bar || null;
            this.toggleButton = options.toggleButton || null;
            this.findField = options.findField || null;
            this.highlightAll = options.highlightAllCheckbox || null;
            this.caseSensitive = options.caseSensitiveCheckbox || null;
            this.entireWord = options.entireWordCheckbox || null;
            this.findMsg = options.findMsg || null;
            this.findResultsCount = options.findResultsCount || null;
            this.findPreviousButton = options.findPreviousButton || null;
            this.findNextButton = options.findNextButton || null;
            this.eventBus = eventBus;
            this.l10n = l10n;
            this.toggleButton.addEventListener("click", function() {
                _this.toggle();
            });
            this.findField.addEventListener("input", function() {
                _this.dispatchEvent("");
            });
            this.bar.addEventListener("keydown", function(e) {
                switch (e.keyCode) {
                  case 13:
                    if (e.target === _this.findField) {
                        _this.dispatchEvent("again", e.shiftKey);
                    }
                    break;

                  case 27:
                    _this.close();
                    break;
                }
            });
            this.findPreviousButton.addEventListener("click", function() {
                _this.dispatchEvent("again", true);
            });
            this.findNextButton.addEventListener("click", function() {
                _this.dispatchEvent("again", false);
            });
            this.highlightAll.addEventListener("click", function() {
                _this.dispatchEvent("highlightallchange");
            });
            this.caseSensitive.addEventListener("click", function() {
                _this.dispatchEvent("casesensitivitychange");
            });
            this.entireWord.addEventListener("click", function() {
                _this.dispatchEvent("entirewordchange");
            });
            this.eventBus.on("resize", this._adjustWidth.bind(this));
        }
        _createClass(PDFFindBar, [ {
            key: "reset",
            value: function reset() {
                this.updateUIState();
            }
        }, {
            key: "dispatchEvent",
            value: function dispatchEvent(type, findPrev) {
                this.eventBus.dispatch("find", {
                    source: this,
                    type: type,
                    query: this.findField.value,
                    phraseSearch: true,
                    caseSensitive: this.caseSensitive.checked,
                    entireWord: this.entireWord.checked,
                    highlightAll: this.highlightAll.checked,
                    findPrevious: findPrev
                });
            }
        }, {
            key: "updateUIState",
            value: function updateUIState(state, previous, matchesCount) {
                var _this2 = this;
                var notFound = false;
                var findMsg = "";
                var status = "";
                switch (state) {
                  case _pdf_find_controller.FindState.FOUND:
                    break;

                  case _pdf_find_controller.FindState.PENDING:
                    status = "pending";
                    break;

                  case _pdf_find_controller.FindState.NOT_FOUND:
                    findMsg = this.l10n.get("find_not_found", null, "Phrase not found");
                    notFound = true;
                    break;

                  case _pdf_find_controller.FindState.WRAPPED:
                    if (previous) {
                        findMsg = this.l10n.get("find_reached_top", null, "Reached top of document, continued from bottom");
                    } else {
                        findMsg = this.l10n.get("find_reached_bottom", null, "Reached end of document, continued from top");
                    }
                    break;
                }
                this.findField.classList.toggle("notFound", notFound);
                this.findField.setAttribute("data-status", status);
                Promise.resolve(findMsg).then(function(msg) {
                    _this2.findMsg.textContent = msg;
                    _this2._adjustWidth();
                });
                this.updateResultsCount(matchesCount);
            }
        }, {
            key: "updateResultsCount",
            value: function updateResultsCount() {
                var _this3 = this;
                var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$current = _ref.current, current = _ref$current === void 0 ? 0 : _ref$current, _ref$total = _ref.total, total = _ref$total === void 0 ? 0 : _ref$total;
                if (!this.findResultsCount) {
                    return;
                }
                var matchesCountMsg = "", limit = MATCHES_COUNT_LIMIT;
                if (total > 0) {
                    if (total > limit) {
                        matchesCountMsg = this.l10n.get("find_match_count_limit", {
                            limit: limit
                        }, "More than {{limit}} match" + (limit !== 1 ? "es" : ""));
                    } else {
                        matchesCountMsg = this.l10n.get("find_match_count", {
                            current: current,
                            total: total
                        }, "{{current}} of {{total}} match" + (total !== 1 ? "es" : ""));
                    }
                }
                Promise.resolve(matchesCountMsg).then(function(msg) {
                    _this3.findResultsCount.textContent = msg;
                    _this3.findResultsCount.classList.toggle("hidden", !total);
                    _this3._adjustWidth();
                });
            }
        }, {
            key: "open",
            value: function open() {
                if (!this.opened) {
                    this.opened = true;
                    this.toggleButton.classList.add("toggled");
                    this.bar.classList.remove("hidden");
                }
                this.findField.select();
                this.findField.focus();
                this._adjustWidth();
            }
        }, {
            key: "close",
            value: function close() {
                if (!this.opened) {
                    return;
                }
                this.opened = false;
                this.toggleButton.classList.remove("toggled");
                this.bar.classList.add("hidden");
                this.eventBus.dispatch("findbarclose", {
                    source: this
                });
            }
        }, {
            key: "toggle",
            value: function toggle() {
                if (this.opened) {
                    this.close();
                } else {
                    this.open();
                }
            }
        }, {
            key: "_adjustWidth",
            value: function _adjustWidth() {
                if (!this.opened) {
                    return;
                }
                this.bar.classList.remove("wrapContainers");
                var findbarHeight = this.bar.clientHeight;
                var inputContainerHeight = this.bar.firstElementChild.clientHeight;
                if (findbarHeight > inputContainerHeight) {
                    this.bar.classList.add("wrapContainers");
                }
            }
        } ]);
        return PDFFindBar;
    }();
    exports.PDFFindBar = PDFFindBar;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFFindController = exports.FindState = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdfjsLib = __webpack_require__(7);
    var _pdf_find_utils = __webpack_require__(19);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var FindState = {
        FOUND: 0,
        NOT_FOUND: 1,
        WRAPPED: 2,
        PENDING: 3
    };
    exports.FindState = FindState;
    var FIND_TIMEOUT = 250;
    var MATCH_SCROLL_OFFSET_TOP = -50;
    var MATCH_SCROLL_OFFSET_LEFT = -400;
    var CHARACTERS_TO_NORMALIZE = {
        "‘": "'",
        "’": "'",
        "‚": "'",
        "‛": "'",
        "“": '"',
        "”": '"',
        "„": '"',
        "‟": '"',
        "¼": "1/4",
        "½": "1/2",
        "¾": "3/4"
    };
    var normalizationRegex = null;
    function normalize(text) {
        if (!normalizationRegex) {
            var replace = Object.keys(CHARACTERS_TO_NORMALIZE).join("");
            normalizationRegex = new RegExp("[".concat(replace, "]"), "g");
        }
        return text.replace(normalizationRegex, function(ch) {
            return CHARACTERS_TO_NORMALIZE[ch];
        });
    }
    var PDFFindController = function() {
        function PDFFindController(_ref) {
            var linkService = _ref.linkService, _ref$eventBus = _ref.eventBus, eventBus = _ref$eventBus === void 0 ? (0, 
            _ui_utils.getGlobalEventBus)() : _ref$eventBus;
            _classCallCheck(this, PDFFindController);
            this._linkService = linkService;
            this._eventBus = eventBus;
            this._reset();
            eventBus.on("findbarclose", this._onFindBarClose.bind(this));
        }
        _createClass(PDFFindController, [ {
            key: "setDocument",
            value: function setDocument(pdfDocument) {
                if (this._pdfDocument) {
                    this._reset();
                }
                if (!pdfDocument) {
                    return;
                }
                this._pdfDocument = pdfDocument;
                this._firstPageCapability.resolve();
            }
        }, {
            key: "executeCommand",
            value: function executeCommand(cmd, state) {
                var _this = this;
                if (!state) {
                    return;
                }
                var pdfDocument = this._pdfDocument;
                if (this._state === null || this._shouldDirtyMatch(cmd, state)) {
                    this._dirtyMatch = true;
                }
                this._state = state;
                if (cmd !== "findhighlightallchange") {
                    this._updateUIState(FindState.PENDING);
                }
                this._firstPageCapability.promise.then(function() {
                    if (!_this._pdfDocument || pdfDocument && _this._pdfDocument !== pdfDocument) {
                        return;
                    }
                    _this._extractText();
                    var findbarClosed = !_this._highlightMatches;
                    var pendingTimeout = !!_this._findTimeout;
                    if (_this._findTimeout) {
                        clearTimeout(_this._findTimeout);
                        _this._findTimeout = null;
                    }
                    if (cmd === "find") {
                        _this._findTimeout = setTimeout(function() {
                            _this._nextMatch();
                            _this._findTimeout = null;
                        }, FIND_TIMEOUT);
                    } else if (_this._dirtyMatch) {
                        _this._nextMatch();
                    } else if (cmd === "findagain") {
                        _this._nextMatch();
                        if (findbarClosed && _this._state.highlightAll) {
                            _this._updateAllPages();
                        }
                    } else if (cmd === "findhighlightallchange") {
                        if (pendingTimeout) {
                            _this._nextMatch();
                        } else {
                            _this._highlightMatches = true;
                        }
                        _this._updateAllPages();
                    } else {
                        _this._nextMatch();
                    }
                });
            }
        }, {
            key: "scrollMatchIntoView",
            value: function scrollMatchIntoView(_ref2) {
                var _ref2$element = _ref2.element, element = _ref2$element === void 0 ? null : _ref2$element, _ref2$pageIndex = _ref2.pageIndex, pageIndex = _ref2$pageIndex === void 0 ? -1 : _ref2$pageIndex, _ref2$matchIndex = _ref2.matchIndex, matchIndex = _ref2$matchIndex === void 0 ? -1 : _ref2$matchIndex;
                if (!this._scrollMatches || !element) {
                    return;
                } else if (matchIndex === -1 || matchIndex !== this._selected.matchIdx) {
                    return;
                } else if (pageIndex === -1 || pageIndex !== this._selected.pageIdx) {
                    return;
                }
                this._scrollMatches = false;
                var spot = {
                    top: MATCH_SCROLL_OFFSET_TOP,
                    left: MATCH_SCROLL_OFFSET_LEFT
                };
                (0, _ui_utils.scrollIntoView)(element, spot, true);
            }
        }, {
            key: "_reset",
            value: function _reset() {
                this._highlightMatches = false;
                this._scrollMatches = false;
                this._pdfDocument = null;
                this._pageMatches = [];
                this._pageMatchesLength = [];
                this._state = null;
                this._selected = {
                    pageIdx: -1,
                    matchIdx: -1
                };
                this._offset = {
                    pageIdx: null,
                    matchIdx: null,
                    wrapped: false
                };
                this._extractTextPromises = [];
                this._pageContents = [];
                this._matchesCountTotal = 0;
                this._pagesToSearch = null;
                this._pendingFindMatches = Object.create(null);
                this._resumePageIdx = null;
                this._dirtyMatch = false;
                clearTimeout(this._findTimeout);
                this._findTimeout = null;
                this._firstPageCapability = (0, _pdfjsLib.createPromiseCapability)();
            }
        }, {
            key: "_shouldDirtyMatch",
            value: function _shouldDirtyMatch(cmd, state) {
                if (state.query !== this._state.query) {
                    return true;
                }
                switch (cmd) {
                  case "findagain":
                    var pageNumber = this._selected.pageIdx + 1;
                    var linkService = this._linkService;
                    if (pageNumber >= 1 && pageNumber <= linkService.pagesCount && linkService.page !== pageNumber && linkService.isPageVisible && !linkService.isPageVisible(pageNumber)) {
                        break;
                    }
                    return false;

                  case "findhighlightallchange":
                    return false;
                }
                return true;
            }
        }, {
            key: "_prepareMatches",
            value: function _prepareMatches(matchesWithLength, matches, matchesLength) {
                function isSubTerm(matchesWithLength, currentIndex) {
                    var currentElem = matchesWithLength[currentIndex];
                    var nextElem = matchesWithLength[currentIndex + 1];
                    if (currentIndex < matchesWithLength.length - 1 && currentElem.match === nextElem.match) {
                        currentElem.skipped = true;
                        return true;
                    }
                    for (var i = currentIndex - 1; i >= 0; i--) {
                        var prevElem = matchesWithLength[i];
                        if (prevElem.skipped) {
                            continue;
                        }
                        if (prevElem.match + prevElem.matchLength < currentElem.match) {
                            break;
                        }
                        if (prevElem.match + prevElem.matchLength >= currentElem.match + currentElem.matchLength) {
                            currentElem.skipped = true;
                            return true;
                        }
                    }
                    return false;
                }
                matchesWithLength.sort(function(a, b) {
                    return a.match === b.match ? a.matchLength - b.matchLength : a.match - b.match;
                });
                for (var i = 0, len = matchesWithLength.length; i < len; i++) {
                    if (isSubTerm(matchesWithLength, i)) {
                        continue;
                    }
                    matches.push(matchesWithLength[i].match);
                    matchesLength.push(matchesWithLength[i].matchLength);
                }
            }
        }, {
            key: "_isEntireWord",
            value: function _isEntireWord(content, startIdx, length) {
                if (startIdx > 0) {
                    var first = content.charCodeAt(startIdx);
                    var limit = content.charCodeAt(startIdx - 1);
                    if ((0, _pdf_find_utils.getCharacterType)(first) === (0, _pdf_find_utils.getCharacterType)(limit)) {
                        return false;
                    }
                }
                var endIdx = startIdx + length - 1;
                if (endIdx < content.length - 1) {
                    var last = content.charCodeAt(endIdx);
                    var _limit = content.charCodeAt(endIdx + 1);
                    if ((0, _pdf_find_utils.getCharacterType)(last) === (0, _pdf_find_utils.getCharacterType)(_limit)) {
                        return false;
                    }
                }
                return true;
            }
        }, {
            key: "_calculatePhraseMatch",
            value: function _calculatePhraseMatch(query, pageIndex, pageContent, entireWord) {
                var matches = [];
                var queryLen = query.length;
                var matchIdx = -queryLen;
                while (true) {
                    matchIdx = pageContent.indexOf(query, matchIdx + queryLen);
                    if (matchIdx === -1) {
                        break;
                    }
                    if (entireWord && !this._isEntireWord(pageContent, matchIdx, queryLen)) {
                        continue;
                    }
                    matches.push(matchIdx);
                }
                this._pageMatches[pageIndex] = matches;
            }
        }, {
            key: "_calculateWordMatch",
            value: function _calculateWordMatch(query, pageIndex, pageContent, entireWord) {
                var matchesWithLength = [];
                var queryArray = query.match(/\S+/g);
                for (var i = 0, len = queryArray.length; i < len; i++) {
                    var subquery = queryArray[i];
                    var subqueryLen = subquery.length;
                    var matchIdx = -subqueryLen;
                    while (true) {
                        matchIdx = pageContent.indexOf(subquery, matchIdx + subqueryLen);
                        if (matchIdx === -1) {
                            break;
                        }
                        if (entireWord && !this._isEntireWord(pageContent, matchIdx, subqueryLen)) {
                            continue;
                        }
                        matchesWithLength.push({
                            match: matchIdx,
                            matchLength: subqueryLen,
                            skipped: false
                        });
                    }
                }
                this._pageMatchesLength[pageIndex] = [];
                this._pageMatches[pageIndex] = [];
                this._prepareMatches(matchesWithLength, this._pageMatches[pageIndex], this._pageMatchesLength[pageIndex]);
            }
        }, {
            key: "_calculateMatch",
            value: function _calculateMatch(pageIndex) {
                var pageContent = this._pageContents[pageIndex];
                var query = this._query;
                var _this$_state = this._state, caseSensitive = _this$_state.caseSensitive, entireWord = _this$_state.entireWord, phraseSearch = _this$_state.phraseSearch;
                if (query.length === 0) {
                    return;
                }
                if (!caseSensitive) {
                    pageContent = pageContent.toLowerCase();
                    query = query.toLowerCase();
                }
                if (phraseSearch) {
                    this._calculatePhraseMatch(query, pageIndex, pageContent, entireWord);
                } else {
                    this._calculateWordMatch(query, pageIndex, pageContent, entireWord);
                }
                if (this._state.highlightAll) {
                    this._updatePage(pageIndex);
                }
                if (this._resumePageIdx === pageIndex) {
                    this._resumePageIdx = null;
                    this._nextPageMatch();
                }
                var pageMatchesCount = this._pageMatches[pageIndex].length;
                if (pageMatchesCount > 0) {
                    this._matchesCountTotal += pageMatchesCount;
                    this._updateUIResultsCount();
                }
            }
        }, {
            key: "_extractText",
            value: function _extractText() {
                var _this2 = this;
                if (this._extractTextPromises.length > 0) {
                    return;
                }
                var promise = Promise.resolve();
                var _loop = function _loop(i, ii) {
                    var extractTextCapability = (0, _pdfjsLib.createPromiseCapability)();
                    _this2._extractTextPromises[i] = extractTextCapability.promise;
                    promise = promise.then(function() {
                        return _this2._pdfDocument.getPage(i + 1).then(function(pdfPage) {
                            return pdfPage.getTextContent({
                                normalizeWhitespace: true
                            });
                        }).then(function(textContent) {
                            var textItems = textContent.items;
                            var strBuf = [];
                            for (var j = 0, jj = textItems.length; j < jj; j++) {
                                strBuf.push(textItems[j].str);
                            }
                            _this2._pageContents[i] = normalize(strBuf.join(""));
                            extractTextCapability.resolve(i);
                        }, function(reason) {
                            console.error("Unable to get text content for page ".concat(i + 1), reason);
                            _this2._pageContents[i] = "";
                            extractTextCapability.resolve(i);
                        });
                    });
                };
                for (var i = 0, ii = this._linkService.pagesCount; i < ii; i++) {
                    _loop(i, ii);
                }
            }
        }, {
            key: "_updatePage",
            value: function _updatePage(index) {
                if (this._scrollMatches && this._selected.pageIdx === index) {
                    this._linkService.page = index + 1;
                }
                this._eventBus.dispatch("updatetextlayermatches", {
                    source: this,
                    pageIndex: index
                });
            }
        }, {
            key: "_updateAllPages",
            value: function _updateAllPages() {
                this._eventBus.dispatch("updatetextlayermatches", {
                    source: this,
                    pageIndex: -1
                });
            }
        }, {
            key: "_nextMatch",
            value: function _nextMatch() {
                var _this3 = this;
                var previous = this._state.findPrevious;
                var currentPageIndex = this._linkService.page - 1;
                var numPages = this._linkService.pagesCount;
                this._highlightMatches = true;
                if (this._dirtyMatch) {
                    this._dirtyMatch = false;
                    this._selected.pageIdx = this._selected.matchIdx = -1;
                    this._offset.pageIdx = currentPageIndex;
                    this._offset.matchIdx = null;
                    this._offset.wrapped = false;
                    this._resumePageIdx = null;
                    this._pageMatches.length = 0;
                    this._pageMatchesLength.length = 0;
                    this._matchesCountTotal = 0;
                    this._updateAllPages();
                    for (var i = 0; i < numPages; i++) {
                        if (this._pendingFindMatches[i] === true) {
                            continue;
                        }
                        this._pendingFindMatches[i] = true;
                        this._extractTextPromises[i].then(function(pageIdx) {
                            delete _this3._pendingFindMatches[pageIdx];
                            _this3._calculateMatch(pageIdx);
                        });
                    }
                }
                if (this._query === "") {
                    this._updateUIState(FindState.FOUND);
                    return;
                }
                if (this._resumePageIdx) {
                    return;
                }
                var offset = this._offset;
                this._pagesToSearch = numPages;
                if (offset.matchIdx !== null) {
                    var numPageMatches = this._pageMatches[offset.pageIdx].length;
                    if (!previous && offset.matchIdx + 1 < numPageMatches || previous && offset.matchIdx > 0) {
                        offset.matchIdx = previous ? offset.matchIdx - 1 : offset.matchIdx + 1;
                        this._updateMatch(true);
                        return;
                    }
                    this._advanceOffsetPage(previous);
                }
                this._nextPageMatch();
            }
        }, {
            key: "_matchesReady",
            value: function _matchesReady(matches) {
                var offset = this._offset;
                var numMatches = matches.length;
                var previous = this._state.findPrevious;
                if (numMatches) {
                    offset.matchIdx = previous ? numMatches - 1 : 0;
                    this._updateMatch(true);
                    return true;
                }
                this._advanceOffsetPage(previous);
                if (offset.wrapped) {
                    offset.matchIdx = null;
                    if (this._pagesToSearch < 0) {
                        this._updateMatch(false);
                        return true;
                    }
                }
                return false;
            }
        }, {
            key: "_nextPageMatch",
            value: function _nextPageMatch() {
                if (this._resumePageIdx !== null) {
                    console.error("There can only be one pending page.");
                }
                var matches = null;
                do {
                    var pageIdx = this._offset.pageIdx;
                    matches = this._pageMatches[pageIdx];
                    if (!matches) {
                        this._resumePageIdx = pageIdx;
                        break;
                    }
                } while (!this._matchesReady(matches));
            }
        }, {
            key: "_advanceOffsetPage",
            value: function _advanceOffsetPage(previous) {
                var offset = this._offset;
                var numPages = this._linkService.pagesCount;
                offset.pageIdx = previous ? offset.pageIdx - 1 : offset.pageIdx + 1;
                offset.matchIdx = null;
                this._pagesToSearch--;
                if (offset.pageIdx >= numPages || offset.pageIdx < 0) {
                    offset.pageIdx = previous ? numPages - 1 : 0;
                    offset.wrapped = true;
                }
            }
        }, {
            key: "_updateMatch",
            value: function _updateMatch() {
                var found = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                var state = FindState.NOT_FOUND;
                var wrapped = this._offset.wrapped;
                this._offset.wrapped = false;
                if (found) {
                    var previousPage = this._selected.pageIdx;
                    this._selected.pageIdx = this._offset.pageIdx;
                    this._selected.matchIdx = this._offset.matchIdx;
                    state = wrapped ? FindState.WRAPPED : FindState.FOUND;
                    if (previousPage !== -1 && previousPage !== this._selected.pageIdx) {
                        this._updatePage(previousPage);
                    }
                }
                this._updateUIState(state, this._state.findPrevious);
                if (this._selected.pageIdx !== -1) {
                    this._scrollMatches = true;
                    this._updatePage(this._selected.pageIdx);
                }
            }
        }, {
            key: "_onFindBarClose",
            value: function _onFindBarClose(evt) {
                var _this4 = this;
                var pdfDocument = this._pdfDocument;
                this._firstPageCapability.promise.then(function() {
                    if (!_this4._pdfDocument || pdfDocument && _this4._pdfDocument !== pdfDocument) {
                        return;
                    }
                    if (_this4._findTimeout) {
                        clearTimeout(_this4._findTimeout);
                        _this4._findTimeout = null;
                    }
                    if (_this4._resumePageIdx) {
                        _this4._resumePageIdx = null;
                        _this4._dirtyMatch = true;
                    }
                    _this4._updateUIState(FindState.FOUND);
                    _this4._highlightMatches = false;
                    _this4._updateAllPages();
                });
            }
        }, {
            key: "_requestMatchesCount",
            value: function _requestMatchesCount() {
                var _this$_selected = this._selected, pageIdx = _this$_selected.pageIdx, matchIdx = _this$_selected.matchIdx;
                var current = 0, total = this._matchesCountTotal;
                if (matchIdx !== -1) {
                    for (var i = 0; i < pageIdx; i++) {
                        current += this._pageMatches[i] && this._pageMatches[i].length || 0;
                    }
                    current += matchIdx + 1;
                }
                if (current < 1 || current > total) {
                    current = total = 0;
                }
                return {
                    current: current,
                    total: total
                };
            }
        }, {
            key: "_updateUIResultsCount",
            value: function _updateUIResultsCount() {
                this._eventBus.dispatch("updatefindmatchescount", {
                    source: this,
                    matchesCount: this._requestMatchesCount()
                });
            }
        }, {
            key: "_updateUIState",
            value: function _updateUIState(state, previous) {
                this._eventBus.dispatch("updatefindcontrolstate", {
                    source: this,
                    state: state,
                    previous: previous,
                    matchesCount: this._requestMatchesCount()
                });
            }
        }, {
            key: "highlightMatches",
            get: function get() {
                return this._highlightMatches;
            }
        }, {
            key: "pageMatches",
            get: function get() {
                return this._pageMatches;
            }
        }, {
            key: "pageMatchesLength",
            get: function get() {
                return this._pageMatchesLength;
            }
        }, {
            key: "selected",
            get: function get() {
                return this._selected;
            }
        }, {
            key: "state",
            get: function get() {
                return this._state;
            }
        }, {
            key: "_query",
            get: function get() {
                if (this._state.query !== this._rawQuery) {
                    this._rawQuery = this._state.query;
                    this._normalizedQuery = normalize(this._state.query);
                }
                return this._normalizedQuery;
            }
        } ]);
        return PDFFindController;
    }();
    exports.PDFFindController = PDFFindController;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.getCharacterType = getCharacterType;
    exports.CharacterType = void 0;
    var CharacterType = {
        SPACE: 0,
        ALPHA_LETTER: 1,
        PUNCT: 2,
        HAN_LETTER: 3,
        KATAKANA_LETTER: 4,
        HIRAGANA_LETTER: 5,
        HALFWIDTH_KATAKANA_LETTER: 6,
        THAI_LETTER: 7
    };
    exports.CharacterType = CharacterType;
    function isAlphabeticalScript(charCode) {
        return charCode < 11904;
    }
    function isAscii(charCode) {
        return (charCode & 65408) === 0;
    }
    function isAsciiAlpha(charCode) {
        return charCode >= 97 && charCode <= 122 || charCode >= 65 && charCode <= 90;
    }
    function isAsciiDigit(charCode) {
        return charCode >= 48 && charCode <= 57;
    }
    function isAsciiSpace(charCode) {
        return charCode === 32 || charCode === 9 || charCode === 13 || charCode === 10;
    }
    function isHan(charCode) {
        return charCode >= 13312 && charCode <= 40959 || charCode >= 63744 && charCode <= 64255;
    }
    function isKatakana(charCode) {
        return charCode >= 12448 && charCode <= 12543;
    }
    function isHiragana(charCode) {
        return charCode >= 12352 && charCode <= 12447;
    }
    function isHalfwidthKatakana(charCode) {
        return charCode >= 65376 && charCode <= 65439;
    }
    function isThai(charCode) {
        return (charCode & 65408) === 3584;
    }
    function getCharacterType(charCode) {
        if (isAlphabeticalScript(charCode)) {
            if (isAscii(charCode)) {
                if (isAsciiSpace(charCode)) {
                    return CharacterType.SPACE;
                } else if (isAsciiAlpha(charCode) || isAsciiDigit(charCode) || charCode === 95) {
                    return CharacterType.ALPHA_LETTER;
                }
                return CharacterType.PUNCT;
            } else if (isThai(charCode)) {
                return CharacterType.THAI_LETTER;
            } else if (charCode === 160) {
                return CharacterType.SPACE;
            }
            return CharacterType.ALPHA_LETTER;
        }
        if (isHan(charCode)) {
            return CharacterType.HAN_LETTER;
        } else if (isKatakana(charCode)) {
            return CharacterType.KATAKANA_LETTER;
        } else if (isHiragana(charCode)) {
            return CharacterType.HIRAGANA_LETTER;
        } else if (isHalfwidthKatakana(charCode)) {
            return CharacterType.HALFWIDTH_KATAKANA_LETTER;
        }
        return CharacterType.ALPHA_LETTER;
    }
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isDestHashesEqual = isDestHashesEqual;
    exports.isDestArraysEqual = isDestArraysEqual;
    exports.PDFHistory = void 0;
    var _ui_utils = __webpack_require__(5);
    function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var HASH_CHANGE_TIMEOUT = 1e3;
    var POSITION_UPDATED_THRESHOLD = 50;
    var UPDATE_VIEWAREA_TIMEOUT = 1e3;
    function getCurrentHash() {
        return document.location.hash;
    }
    function parseCurrentHash(linkService) {
        var hash = unescape(getCurrentHash()).substring(1);
        var params = (0, _ui_utils.parseQueryString)(hash);
        var page = params.page | 0;
        if (!(Number.isInteger(page) && page > 0 && page <= linkService.pagesCount)) {
            page = null;
        }
        return {
            hash: hash,
            page: page,
            rotation: linkService.rotation
        };
    }
    var PDFHistory = function() {
        function PDFHistory(_ref) {
            var _this = this;
            var linkService = _ref.linkService, eventBus = _ref.eventBus;
            _classCallCheck(this, PDFHistory);
            this.linkService = linkService;
            this.eventBus = eventBus || (0, _ui_utils.getGlobalEventBus)();
            this.initialized = false;
            this.initialBookmark = null;
            this.initialRotation = null;
            this._boundEvents = Object.create(null);
            this._isViewerInPresentationMode = false;
            this._isPagesLoaded = false;
            this.eventBus.on("presentationmodechanged", function(evt) {
                _this._isViewerInPresentationMode = evt.active || evt.switchInProgress;
            });
            this.eventBus.on("pagesloaded", function(evt) {
                _this._isPagesLoaded = !!evt.pagesCount;
            });
        }
        _createClass(PDFHistory, [ {
            key: "initialize",
            value: function initialize(_ref2) {
                var fingerprint = _ref2.fingerprint, _ref2$resetHistory = _ref2.resetHistory, resetHistory = _ref2$resetHistory === void 0 ? false : _ref2$resetHistory, _ref2$updateUrl = _ref2.updateUrl, updateUrl = _ref2$updateUrl === void 0 ? false : _ref2$updateUrl;
                if (!fingerprint || typeof fingerprint !== "string") {
                    console.error('PDFHistory.initialize: The "fingerprint" must be a non-empty string.');
                    return;
                }
                var reInitialized = this.initialized && this.fingerprint !== fingerprint;
                this.fingerprint = fingerprint;
                this._updateUrl = updateUrl === true;
                if (!this.initialized) {
                    this._bindEvents();
                }
                var state = window.history.state;
                this.initialized = true;
                this.initialBookmark = null;
                this.initialRotation = null;
                this._popStateInProgress = false;
                this._blockHashChange = 0;
                this._currentHash = getCurrentHash();
                this._numPositionUpdates = 0;
                this._uid = this._maxUid = 0;
                this._destination = null;
                this._position = null;
                if (!this._isValidState(state, true) || resetHistory) {
                    var _parseCurrentHash = parseCurrentHash(this.linkService), hash = _parseCurrentHash.hash, page = _parseCurrentHash.page, rotation = _parseCurrentHash.rotation;
                    if (!hash || reInitialized || resetHistory) {
                        this._pushOrReplaceState(null, true);
                        return;
                    }
                    this._pushOrReplaceState({
                        hash: hash,
                        page: page,
                        rotation: rotation
                    }, true);
                    return;
                }
                var destination = state.destination;
                this._updateInternalState(destination, state.uid, true);
                if (this._uid > this._maxUid) {
                    this._maxUid = this._uid;
                }
                if (destination.rotation !== undefined) {
                    this.initialRotation = destination.rotation;
                }
                if (destination.dest) {
                    this.initialBookmark = JSON.stringify(destination.dest);
                    this._destination.page = null;
                } else if (destination.hash) {
                    this.initialBookmark = destination.hash;
                } else if (destination.page) {
                    this.initialBookmark = "page=".concat(destination.page);
                }
            }
        }, {
            key: "push",
            value: function push(_ref3) {
                var _this2 = this;
                var _ref3$namedDest = _ref3.namedDest, namedDest = _ref3$namedDest === void 0 ? null : _ref3$namedDest, explicitDest = _ref3.explicitDest, pageNumber = _ref3.pageNumber;
                if (!this.initialized) {
                    return;
                }
                if (namedDest && typeof namedDest !== "string") {
                    console.error("PDFHistory.push: " + '"'.concat(namedDest, '" is not a valid namedDest parameter.'));
                    return;
                } else if (!Array.isArray(explicitDest)) {
                    console.error("PDFHistory.push: " + '"'.concat(explicitDest, '" is not a valid explicitDest parameter.'));
                    return;
                } else if (!(Number.isInteger(pageNumber) && pageNumber > 0 && pageNumber <= this.linkService.pagesCount)) {
                    if (pageNumber !== null || this._destination) {
                        console.error("PDFHistory.push: " + '"'.concat(pageNumber, '" is not a valid pageNumber parameter.'));
                        return;
                    }
                }
                var hash = namedDest || JSON.stringify(explicitDest);
                if (!hash) {
                    return;
                }
                var forceReplace = false;
                if (this._destination && (isDestHashesEqual(this._destination.hash, hash) || isDestArraysEqual(this._destination.dest, explicitDest))) {
                    if (this._destination.page) {
                        return;
                    }
                    forceReplace = true;
                }
                if (this._popStateInProgress && !forceReplace) {
                    return;
                }
                this._pushOrReplaceState({
                    dest: explicitDest,
                    hash: hash,
                    page: pageNumber,
                    rotation: this.linkService.rotation
                }, forceReplace);
                if (!this._popStateInProgress) {
                    this._popStateInProgress = true;
                    Promise.resolve().then(function() {
                        _this2._popStateInProgress = false;
                    });
                }
            }
        }, {
            key: "pushCurrentPosition",
            value: function pushCurrentPosition() {
                if (!this.initialized || this._popStateInProgress) {
                    return;
                }
                this._tryPushCurrentPosition();
            }
        }, {
            key: "back",
            value: function back() {
                if (!this.initialized || this._popStateInProgress) {
                    return;
                }
                var state = window.history.state;
                if (this._isValidState(state) && state.uid > 0) {
                    window.history.back();
                }
            }
        }, {
            key: "forward",
            value: function forward() {
                if (!this.initialized || this._popStateInProgress) {
                    return;
                }
                var state = window.history.state;
                if (this._isValidState(state) && state.uid < this._maxUid) {
                    window.history.forward();
                }
            }
        }, {
            key: "_pushOrReplaceState",
            value: function _pushOrReplaceState(destination) {
                var forceReplace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var shouldReplace = forceReplace || !this._destination;
                var newState = {
                    fingerprint: this.fingerprint,
                    uid: shouldReplace ? this._uid : this._uid + 1,
                    destination: destination
                };
                this._updateInternalState(destination, newState.uid);
                var newUrl;
                if (this._updateUrl && destination && destination.hash) {
                    var baseUrl = document.location.href.split("#")[0];
                    if (!baseUrl.startsWith("file://")) {
                        newUrl = "".concat(baseUrl, "#").concat(destination.hash);
                    }
                }
                if (shouldReplace) {
                    if (newUrl) {
                        window.history.replaceState(newState, "", newUrl);
                    } else {
                        window.history.replaceState(newState, "");
                    }
                } else {
                    this._maxUid = this._uid;
                    if (newUrl) {
                        window.history.pushState(newState, "", newUrl);
                    } else {
                        window.history.pushState(newState, "");
                    }
                }
            }
        }, {
            key: "_tryPushCurrentPosition",
            value: function _tryPushCurrentPosition() {
                var temporary = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (!this._position) {
                    return;
                }
                var position = this._position;
                if (temporary) {
                    position = Object.assign(Object.create(null), this._position);
                    position.temporary = true;
                }
                if (!this._destination) {
                    this._pushOrReplaceState(position);
                    return;
                }
                if (this._destination.temporary) {
                    this._pushOrReplaceState(position, true);
                    return;
                }
                if (this._destination.hash === position.hash) {
                    return;
                }
                if (!this._destination.page && (POSITION_UPDATED_THRESHOLD <= 0 || this._numPositionUpdates <= POSITION_UPDATED_THRESHOLD)) {
                    return;
                }
                var forceReplace = false;
                if (this._destination.page >= position.first && this._destination.page <= position.page) {
                    if (this._destination.dest || !this._destination.first) {
                        return;
                    }
                    forceReplace = true;
                }
                this._pushOrReplaceState(position, forceReplace);
            }
        }, {
            key: "_isValidState",
            value: function _isValidState(state) {
                var checkReload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                if (!state) {
                    return false;
                }
                if (state.fingerprint !== this.fingerprint) {
                    if (checkReload) {
                        if (typeof state.fingerprint !== "string" || state.fingerprint.length !== this.fingerprint.length) {
                            return false;
                        }
                        var _performance$getEntri = performance.getEntriesByType("navigation"), _performance$getEntri2 = _slicedToArray(_performance$getEntri, 1), perfEntry = _performance$getEntri2[0];
                        if (!perfEntry || perfEntry.type !== "reload") {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
                if (!Number.isInteger(state.uid) || state.uid < 0) {
                    return false;
                }
                if (state.destination === null || _typeof(state.destination) !== "object") {
                    return false;
                }
                return true;
            }
        }, {
            key: "_updateInternalState",
            value: function _updateInternalState(destination, uid) {
                var removeTemporary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                if (this._updateViewareaTimeout) {
                    clearTimeout(this._updateViewareaTimeout);
                    this._updateViewareaTimeout = null;
                }
                if (removeTemporary && destination && destination.temporary) {
                    delete destination.temporary;
                }
                this._destination = destination;
                this._uid = uid;
                this._numPositionUpdates = 0;
            }
        }, {
            key: "_updateViewarea",
            value: function _updateViewarea(_ref4) {
                var _this3 = this;
                var location = _ref4.location;
                if (this._updateViewareaTimeout) {
                    clearTimeout(this._updateViewareaTimeout);
                    this._updateViewareaTimeout = null;
                }
                this._position = {
                    hash: this._isViewerInPresentationMode ? "page=".concat(location.pageNumber) : location.pdfOpenParams.substring(1),
                    page: this.linkService.page,
                    first: location.pageNumber,
                    rotation: location.rotation
                };
                if (this._popStateInProgress) {
                    return;
                }
                if (POSITION_UPDATED_THRESHOLD > 0 && this._isPagesLoaded && this._destination && !this._destination.page) {
                    this._numPositionUpdates++;
                }
                if (UPDATE_VIEWAREA_TIMEOUT > 0) {
                    this._updateViewareaTimeout = setTimeout(function() {
                        if (!_this3._popStateInProgress) {
                            _this3._tryPushCurrentPosition(true);
                        }
                        _this3._updateViewareaTimeout = null;
                    }, UPDATE_VIEWAREA_TIMEOUT);
                }
            }
        }, {
            key: "_popState",
            value: function _popState(_ref5) {
                var _this4 = this;
                var state = _ref5.state;
                var newHash = getCurrentHash(), hashChanged = this._currentHash !== newHash;
                this._currentHash = newHash;
                if (!state || false) {
                    this._uid++;
                    var _parseCurrentHash2 = parseCurrentHash(this.linkService), hash = _parseCurrentHash2.hash, page = _parseCurrentHash2.page, rotation = _parseCurrentHash2.rotation;
                    this._pushOrReplaceState({
                        hash: hash,
                        page: page,
                        rotation: rotation
                    }, true);
                    return;
                }
                if (!this._isValidState(state)) {
                    return;
                }
                this._popStateInProgress = true;
                if (hashChanged) {
                    this._blockHashChange++;
                    (0, _ui_utils.waitOnEventOrTimeout)({
                        target: window,
                        name: "hashchange",
                        delay: HASH_CHANGE_TIMEOUT
                    }).then(function() {
                        _this4._blockHashChange--;
                    });
                }
                var destination = state.destination;
                this._updateInternalState(destination, state.uid, true);
                if (this._uid > this._maxUid) {
                    this._maxUid = this._uid;
                }
                if ((0, _ui_utils.isValidRotation)(destination.rotation)) {
                    this.linkService.rotation = destination.rotation;
                }
                if (destination.dest) {
                    this.linkService.navigateTo(destination.dest);
                } else if (destination.hash) {
                    this.linkService.setHash(destination.hash);
                } else if (destination.page) {
                    this.linkService.page = destination.page;
                }
                Promise.resolve().then(function() {
                    _this4._popStateInProgress = false;
                });
            }
        }, {
            key: "_bindEvents",
            value: function _bindEvents() {
                var _this5 = this;
                var _boundEvents = this._boundEvents, eventBus = this.eventBus;
                _boundEvents.updateViewarea = this._updateViewarea.bind(this);
                _boundEvents.popState = this._popState.bind(this);
                _boundEvents.pageHide = function(evt) {
                    if (!_this5._destination || _this5._destination.temporary) {
                        _this5._tryPushCurrentPosition();
                    }
                };
                eventBus.on("updateviewarea", _boundEvents.updateViewarea);
                window.addEventListener("popstate", _boundEvents.popState);
                window.addEventListener("pagehide", _boundEvents.pageHide);
            }
        }, {
            key: "popStateInProgress",
            get: function get() {
                return this.initialized && (this._popStateInProgress || this._blockHashChange > 0);
            }
        } ]);
        return PDFHistory;
    }();
    exports.PDFHistory = PDFHistory;
    function isDestHashesEqual(destHash, pushHash) {
        if (typeof destHash !== "string" || typeof pushHash !== "string") {
            return false;
        }
        if (destHash === pushHash) {
            return true;
        }
        var _parseQueryString = (0, _ui_utils.parseQueryString)(destHash), nameddest = _parseQueryString.nameddest;
        if (nameddest === pushHash) {
            return true;
        }
        return false;
    }
    function isDestArraysEqual(firstDest, secondDest) {
        function isEntryEqual(first, second) {
            if (_typeof(first) !== _typeof(second)) {
                return false;
            }
            if (Array.isArray(first) || Array.isArray(second)) {
                return false;
            }
            if (first !== null && _typeof(first) === "object" && second !== null) {
                if (Object.keys(first).length !== Object.keys(second).length) {
                    return false;
                }
                for (var key in first) {
                    if (!isEntryEqual(first[key], second[key])) {
                        return false;
                    }
                }
                return true;
            }
            return first === second || Number.isNaN(first) && Number.isNaN(second);
        }
        if (!(Array.isArray(firstDest) && Array.isArray(secondDest))) {
            return false;
        }
        if (firstDest.length !== secondDest.length) {
            return false;
        }
        for (var i = 0, ii = firstDest.length; i < ii; i++) {
            if (!isEntryEqual(firstDest[i], secondDest[i])) {
                return false;
            }
        }
        return true;
    }
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.SimpleLinkService = exports.PDFLinkService = void 0;
    var _ui_utils = __webpack_require__(5);
    function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var PDFLinkService = function() {
        function PDFLinkService() {
            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, eventBus = _ref.eventBus, _ref$externalLinkTarg = _ref.externalLinkTarget, externalLinkTarget = _ref$externalLinkTarg === void 0 ? null : _ref$externalLinkTarg, _ref$externalLinkRel = _ref.externalLinkRel, externalLinkRel = _ref$externalLinkRel === void 0 ? null : _ref$externalLinkRel;
            _classCallCheck(this, PDFLinkService);
            this.eventBus = eventBus || (0, _ui_utils.getGlobalEventBus)();
            this.externalLinkTarget = externalLinkTarget;
            this.externalLinkRel = externalLinkRel;
            this.baseUrl = null;
            this.pdfDocument = null;
            this.pdfViewer = null;
            this.pdfHistory = null;
            this._pagesRefCache = null;
        }
        _createClass(PDFLinkService, [ {
            key: "setDocument",
            value: function setDocument(pdfDocument) {
                var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                this.baseUrl = baseUrl;
                this.pdfDocument = pdfDocument;
                this._pagesRefCache = Object.create(null);
            }
        }, {
            key: "setViewer",
            value: function setViewer(pdfViewer) {
                this.pdfViewer = pdfViewer;
            }
        }, {
            key: "setHistory",
            value: function setHistory(pdfHistory) {
                this.pdfHistory = pdfHistory;
            }
        }, {
            key: "navigateTo",
            value: function navigateTo(dest) {
                var _this = this;
                var goToDestination = function goToDestination(_ref2) {
                    var namedDest = _ref2.namedDest, explicitDest = _ref2.explicitDest;
                    var destRef = explicitDest[0], pageNumber;
                    if (destRef instanceof Object) {
                        pageNumber = _this._cachedPageNumber(destRef);
                        if (pageNumber === null) {
                            _this.pdfDocument.getPageIndex(destRef).then(function(pageIndex) {
                                _this.cachePageRef(pageIndex + 1, destRef);
                                goToDestination({
                                    namedDest: namedDest,
                                    explicitDest: explicitDest
                                });
                            })["catch"](function() {
                                console.error('PDFLinkService.navigateTo: "'.concat(destRef, '" is not ') + 'a valid page reference, for dest="'.concat(dest, '".'));
                            });
                            return;
                        }
                    } else if (Number.isInteger(destRef)) {
                        pageNumber = destRef + 1;
                    } else {
                        console.error('PDFLinkService.navigateTo: "'.concat(destRef, '" is not ') + 'a valid destination reference, for dest="'.concat(dest, '".'));
                        return;
                    }
                    if (!pageNumber || pageNumber < 1 || pageNumber > _this.pagesCount) {
                        console.error('PDFLinkService.navigateTo: "'.concat(pageNumber, '" is not ') + 'a valid page number, for dest="'.concat(dest, '".'));
                        return;
                    }
                    if (_this.pdfHistory) {
                        _this.pdfHistory.pushCurrentPosition();
                        _this.pdfHistory.push({
                            namedDest: namedDest,
                            explicitDest: explicitDest,
                            pageNumber: pageNumber
                        });
                    }
                    _this.pdfViewer.scrollPageIntoView({
                        pageNumber: pageNumber,
                        destArray: explicitDest
                    });
                };
                new Promise(function(resolve, reject) {
                    if (typeof dest === "string") {
                        _this.pdfDocument.getDestination(dest).then(function(destArray) {
                            resolve({
                                namedDest: dest,
                                explicitDest: destArray
                            });
                        });
                        return;
                    }
                    resolve({
                        namedDest: "",
                        explicitDest: dest
                    });
                }).then(function(data) {
                    if (!Array.isArray(data.explicitDest)) {
                        console.error('PDFLinkService.navigateTo: "'.concat(data.explicitDest, '" is') + ' not a valid destination array, for dest="'.concat(dest, '".'));
                        return;
                    }
                    goToDestination(data);
                });
            }
        }, {
            key: "getDestinationHash",
            value: function getDestinationHash(dest) {
                if (typeof dest === "string") {
                    return this.getAnchorUrl("#" + escape(dest));
                }
                if (Array.isArray(dest)) {
                    var str = JSON.stringify(dest);
                    return this.getAnchorUrl("#" + escape(str));
                }
                return this.getAnchorUrl("");
            }
        }, {
            key: "getAnchorUrl",
            value: function getAnchorUrl(anchor) {
                return (this.baseUrl || "") + anchor;
            }
        }, {
            key: "setHash",
            value: function setHash(hash) {
                var pageNumber, dest;
                if (hash.includes("=")) {
                    var params = (0, _ui_utils.parseQueryString)(hash);
                    if ("search" in params) {
                        this.eventBus.dispatch("findfromurlhash", {
                            source: this,
                            query: params["search"].replace(/"/g, ""),
                            phraseSearch: params["phrase"] === "true"
                        });
                    }
                    if ("nameddest" in params) {
                        this.navigateTo(params.nameddest);
                        return;
                    }
                    if ("page" in params) {
                        pageNumber = params.page | 0 || 1;
                    }
                    if ("zoom" in params) {
                        var zoomArgs = params.zoom.split(",");
                        var zoomArg = zoomArgs[0];
                        var zoomArgNumber = parseFloat(zoomArg);
                        if (!zoomArg.includes("Fit")) {
                            dest = [ null, {
                                name: "XYZ"
                            }, zoomArgs.length > 1 ? zoomArgs[1] | 0 : null, zoomArgs.length > 2 ? zoomArgs[2] | 0 : null, zoomArgNumber ? zoomArgNumber / 100 : zoomArg ];
                        } else {
                            if (zoomArg === "Fit" || zoomArg === "FitB") {
                                dest = [ null, {
                                    name: zoomArg
                                } ];
                            } else if (zoomArg === "FitH" || zoomArg === "FitBH" || zoomArg === "FitV" || zoomArg === "FitBV") {
                                dest = [ null, {
                                    name: zoomArg
                                }, zoomArgs.length > 1 ? zoomArgs[1] | 0 : null ];
                            } else if (zoomArg === "FitR") {
                                if (zoomArgs.length !== 5) {
                                    console.error('PDFLinkService.setHash: Not enough parameters for "FitR".');
                                } else {
                                    dest = [ null, {
                                        name: zoomArg
                                    }, zoomArgs[1] | 0, zoomArgs[2] | 0, zoomArgs[3] | 0, zoomArgs[4] | 0 ];
                                }
                            } else {
                                console.error('PDFLinkService.setHash: "'.concat(zoomArg, '" is not ') + "a valid zoom value.");
                            }
                        }
                    }
                    if (dest) {
                        this.pdfViewer.scrollPageIntoView({
                            pageNumber: pageNumber || this.page,
                            destArray: dest,
                            allowNegativeOffset: true
                        });
                    } else if (pageNumber) {
                        this.page = pageNumber;
                    }
                    if ("pagemode" in params) {
                        this.eventBus.dispatch("pagemode", {
                            source: this,
                            mode: params.pagemode
                        });
                    }
                } else {
                    dest = unescape(hash);
                    try {
                        dest = JSON.parse(dest);
                        if (!Array.isArray(dest)) {
                            dest = dest.toString();
                        }
                    } catch (ex) {}
                    if (typeof dest === "string" || isValidExplicitDestination(dest)) {
                        this.navigateTo(dest);
                        return;
                    }
                    console.error('PDFLinkService.setHash: "'.concat(unescape(hash), '" is not ') + "a valid destination.");
                }
            }
        }, {
            key: "executeNamedAction",
            value: function executeNamedAction(action) {
                switch (action) {
                  case "GoBack":
                    if (this.pdfHistory) {
                        this.pdfHistory.back();
                    }
                    break;

                  case "GoForward":
                    if (this.pdfHistory) {
                        this.pdfHistory.forward();
                    }
                    break;

                  case "NextPage":
                    if (this.page < this.pagesCount) {
                        this.page++;
                    }
                    break;

                  case "PrevPage":
                    if (this.page > 1) {
                        this.page--;
                    }
                    break;

                  case "LastPage":
                    this.page = this.pagesCount;
                    break;

                  case "FirstPage":
                    this.page = 1;
                    break;

                  default:
                    break;
                }
                this.eventBus.dispatch("namedaction", {
                    source: this,
                    action: action
                });
            }
        }, {
            key: "cachePageRef",
            value: function cachePageRef(pageNum, pageRef) {
                if (!pageRef) {
                    return;
                }
                var refStr = pageRef.num + " " + pageRef.gen + " R";
                this._pagesRefCache[refStr] = pageNum;
            }
        }, {
            key: "_cachedPageNumber",
            value: function _cachedPageNumber(pageRef) {
                var refStr = pageRef.num + " " + pageRef.gen + " R";
                return this._pagesRefCache && this._pagesRefCache[refStr] || null;
            }
        }, {
            key: "isPageVisible",
            value: function isPageVisible(pageNumber) {
                return this.pdfViewer.isPageVisible(pageNumber);
            }
        }, {
            key: "pagesCount",
            get: function get() {
                return this.pdfDocument ? this.pdfDocument.numPages : 0;
            }
        }, {
            key: "page",
            get: function get() {
                return this.pdfViewer.currentPageNumber;
            },
            set: function set(value) {
                this.pdfViewer.currentPageNumber = value;
            }
        }, {
            key: "rotation",
            get: function get() {
                return this.pdfViewer.pagesRotation;
            },
            set: function set(value) {
                this.pdfViewer.pagesRotation = value;
            }
        } ]);
        return PDFLinkService;
    }();
    exports.PDFLinkService = PDFLinkService;
    function isValidExplicitDestination(dest) {
        if (!Array.isArray(dest)) {
            return false;
        }
        var destLength = dest.length, allowNull = true;
        if (destLength < 2) {
            return false;
        }
        var page = dest[0];
        if (!(_typeof(page) === "object" && Number.isInteger(page.num) && Number.isInteger(page.gen)) && !(Number.isInteger(page) && page >= 0)) {
            return false;
        }
        var zoom = dest[1];
        if (!(_typeof(zoom) === "object" && typeof zoom.name === "string")) {
            return false;
        }
        switch (zoom.name) {
          case "XYZ":
            if (destLength !== 5) {
                return false;
            }
            break;

          case "Fit":
          case "FitB":
            return destLength === 2;

          case "FitH":
          case "FitBH":
          case "FitV":
          case "FitBV":
            if (destLength !== 3) {
                return false;
            }
            break;

          case "FitR":
            if (destLength !== 6) {
                return false;
            }
            allowNull = false;
            break;

          default:
            return false;
        }
        for (var i = 2; i < destLength; i++) {
            var param = dest[i];
            if (!(typeof param === "number" || allowNull && param === null)) {
                return false;
            }
        }
        return true;
    }
    var SimpleLinkService = function() {
        function SimpleLinkService() {
            _classCallCheck(this, SimpleLinkService);
            this.externalLinkTarget = null;
            this.externalLinkRel = null;
        }
        _createClass(SimpleLinkService, [ {
            key: "navigateTo",
            value: function navigateTo(dest) {}
        }, {
            key: "getDestinationHash",
            value: function getDestinationHash(dest) {
                return "#";
            }
        }, {
            key: "getAnchorUrl",
            value: function getAnchorUrl(hash) {
                return "#";
            }
        }, {
            key: "setHash",
            value: function setHash(hash) {}
        }, {
            key: "executeNamedAction",
            value: function executeNamedAction(action) {}
        }, {
            key: "cachePageRef",
            value: function cachePageRef(pageNum, pageRef) {}
        }, {
            key: "isPageVisible",
            value: function isPageVisible(pageNumber) {
                return true;
            }
        }, {
            key: "pagesCount",
            get: function get() {
                return 0;
            }
        }, {
            key: "page",
            get: function get() {
                return 0;
            },
            set: function set(value) {}
        }, {
            key: "rotation",
            get: function get() {
                return 0;
            },
            set: function set(value) {}
        } ]);
        return SimpleLinkService;
    }();
    exports.SimpleLinkService = SimpleLinkService;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFOutlineViewer = void 0;
    var _pdfjsLib = __webpack_require__(7);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var DEFAULT_TITLE = "–";
    var PDFOutlineViewer = function() {
        function PDFOutlineViewer(_ref) {
            var container = _ref.container, linkService = _ref.linkService, eventBus = _ref.eventBus;
            _classCallCheck(this, PDFOutlineViewer);
            this.container = container;
            this.linkService = linkService;
            this.eventBus = eventBus;
            this.reset();
            eventBus.on("toggleoutlinetree", this.toggleOutlineTree.bind(this));
        }
        _createClass(PDFOutlineViewer, [ {
            key: "reset",
            value: function reset() {
                this.outline = null;
                this.lastToggleIsShow = true;
                this.container.textContent = "";
                this.container.classList.remove("outlineWithDeepNesting");
            }
        }, {
            key: "_dispatchEvent",
            value: function _dispatchEvent(outlineCount) {
                this.eventBus.dispatch("outlineloaded", {
                    source: this,
                    outlineCount: outlineCount
                });
            }
        }, {
            key: "_bindLink",
            value: function _bindLink(element, _ref2) {
                var url = _ref2.url, newWindow = _ref2.newWindow, dest = _ref2.dest;
                var linkService = this.linkService;
                if (url) {
                    (0, _pdfjsLib.addLinkAttributes)(element, {
                        url: url,
                        target: newWindow ? _pdfjsLib.LinkTarget.BLANK : linkService.externalLinkTarget,
                        rel: linkService.externalLinkRel
                    });
                    return;
                }
                element.href = linkService.getDestinationHash(dest);
                element.onclick = function() {
                    if (dest) {
                        linkService.navigateTo(dest);
                    }
                    return false;
                };
            }
        }, {
            key: "_setStyles",
            value: function _setStyles(element, _ref3) {
                var bold = _ref3.bold, italic = _ref3.italic;
                var styleStr = "";
                if (bold) {
                    styleStr += "font-weight: bold;";
                }
                if (italic) {
                    styleStr += "font-style: italic;";
                }
                if (styleStr) {
                    element.setAttribute("style", styleStr);
                }
            }
        }, {
            key: "_addToggleButton",
            value: function _addToggleButton(div) {
                var _this = this;
                var toggler = document.createElement("div");
                toggler.className = "outlineItemToggler";
                toggler.onclick = function(evt) {
                    evt.stopPropagation();
                    toggler.classList.toggle("outlineItemsHidden");
                    if (evt.shiftKey) {
                        var shouldShowAll = !toggler.classList.contains("outlineItemsHidden");
                        _this._toggleOutlineItem(div, shouldShowAll);
                    }
                };
                div.insertBefore(toggler, div.firstChild);
            }
        }, {
            key: "_toggleOutlineItem",
            value: function _toggleOutlineItem(root) {
                var show = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                this.lastToggleIsShow = show;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = root.querySelectorAll(".outlineItemToggler")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var toggler = _step.value;
                        toggler.classList.toggle("outlineItemsHidden", !show);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                            _iterator["return"]();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }, {
            key: "toggleOutlineTree",
            value: function toggleOutlineTree() {
                if (!this.outline) {
                    return;
                }
                this._toggleOutlineItem(this.container, !this.lastToggleIsShow);
            }
        }, {
            key: "render",
            value: function render(_ref4) {
                var outline = _ref4.outline;
                var outlineCount = 0;
                if (this.outline) {
                    this.reset();
                }
                this.outline = outline || null;
                if (!outline) {
                    this._dispatchEvent(outlineCount);
                    return;
                }
                var fragment = document.createDocumentFragment();
                var queue = [ {
                    parent: fragment,
                    items: this.outline
                } ];
                var hasAnyNesting = false;
                while (queue.length > 0) {
                    var levelData = queue.shift();
                    for (var i = 0, len = levelData.items.length; i < len; i++) {
                        var item = levelData.items[i];
                        var div = document.createElement("div");
                        div.className = "outlineItem";
                        var element = document.createElement("a");
                        this._bindLink(element, item);
                        this._setStyles(element, item);
                        element.textContent = (0, _pdfjsLib.removeNullCharacters)(item.title) || DEFAULT_TITLE;
                        div.appendChild(element);
                        if (item.items.length > 0) {
                            hasAnyNesting = true;
                            this._addToggleButton(div);
                            var itemsDiv = document.createElement("div");
                            itemsDiv.className = "outlineItems";
                            div.appendChild(itemsDiv);
                            queue.push({
                                parent: itemsDiv,
                                items: item.items
                            });
                        }
                        levelData.parent.appendChild(div);
                        outlineCount++;
                    }
                }
                if (hasAnyNesting) {
                    this.container.classList.add("outlineWithDeepNesting");
                }
                this.container.appendChild(fragment);
                this._dispatchEvent(outlineCount);
            }
        } ]);
        return PDFOutlineViewer;
    }();
    exports.PDFOutlineViewer = PDFOutlineViewer;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFPresentationMode = void 0;
    var _ui_utils = __webpack_require__(5);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var DELAY_BEFORE_RESETTING_SWITCH_IN_PROGRESS = 1500;
    var DELAY_BEFORE_HIDING_CONTROLS = 3e3;
    var ACTIVE_SELECTOR = "pdfPresentationMode";
    var CONTROLS_SELECTOR = "pdfPresentationModeControls";
    var MOUSE_SCROLL_COOLDOWN_TIME = 50;
    var PAGE_SWITCH_THRESHOLD = .1;
    var SWIPE_MIN_DISTANCE_THRESHOLD = 50;
    var SWIPE_ANGLE_THRESHOLD = Math.PI / 6;
    var PDFPresentationMode = function() {
        function PDFPresentationMode(_ref) {
            var _this = this;
            var container = _ref.container, _ref$viewer = _ref.viewer, viewer = _ref$viewer === void 0 ? null : _ref$viewer, pdfViewer = _ref.pdfViewer, eventBus = _ref.eventBus, _ref$contextMenuItems = _ref.contextMenuItems, contextMenuItems = _ref$contextMenuItems === void 0 ? null : _ref$contextMenuItems;
            _classCallCheck(this, PDFPresentationMode);
            this.container = container;
            this.viewer = viewer || container.firstElementChild;
            this.pdfViewer = pdfViewer;
            this.eventBus = eventBus;
            this.active = false;
            this.args = null;
            this.contextMenuOpen = false;
            this.mouseScrollTimeStamp = 0;
            this.mouseScrollDelta = 0;
            this.touchSwipeState = null;
            if (contextMenuItems) {
                contextMenuItems.contextFirstPage.addEventListener("click", function() {
                    _this.contextMenuOpen = false;
                    _this.eventBus.dispatch("firstpage", {
                        source: _this
                    });
                });
                contextMenuItems.contextLastPage.addEventListener("click", function() {
                    _this.contextMenuOpen = false;
                    _this.eventBus.dispatch("lastpage", {
                        source: _this
                    });
                });
                contextMenuItems.contextPageRotateCw.addEventListener("click", function() {
                    _this.contextMenuOpen = false;
                    _this.eventBus.dispatch("rotatecw", {
                        source: _this
                    });
                });
                contextMenuItems.contextPageRotateCcw.addEventListener("click", function() {
                    _this.contextMenuOpen = false;
                    _this.eventBus.dispatch("rotateccw", {
                        source: _this
                    });
                });
            }
        }
        _createClass(PDFPresentationMode, [ {
            key: "request",
            value: function request() {
                if (this.switchInProgress || this.active || !this.viewer.hasChildNodes()) {
                    return false;
                }
                this._addFullscreenChangeListeners();
                this._setSwitchInProgress();
                this._notifyStateChange();
                if (this.container.requestFullscreen) {
                    this.container.requestFullscreen();
                } else if (this.container.mozRequestFullScreen) {
                    this.container.mozRequestFullScreen();
                } else if (this.container.webkitRequestFullscreen) {
                    this.container.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                } else if (this.container.msRequestFullscreen) {
                    this.container.msRequestFullscreen();
                } else {
                    return false;
                }
                this.args = {
                    page: this.pdfViewer.currentPageNumber,
                    previousScale: this.pdfViewer.currentScaleValue
                };
                return true;
            }
        }, {
            key: "_mouseWheel",
            value: function _mouseWheel(evt) {
                if (!this.active) {
                    return;
                }
                evt.preventDefault();
                var delta = (0, _ui_utils.normalizeWheelEventDelta)(evt);
                var currentTime = new Date().getTime();
                var storedTime = this.mouseScrollTimeStamp;
                if (currentTime > storedTime && currentTime - storedTime < MOUSE_SCROLL_COOLDOWN_TIME) {
                    return;
                }
                if (this.mouseScrollDelta > 0 && delta < 0 || this.mouseScrollDelta < 0 && delta > 0) {
                    this._resetMouseScrollState();
                }
                this.mouseScrollDelta += delta;
                if (Math.abs(this.mouseScrollDelta) >= PAGE_SWITCH_THRESHOLD) {
                    var totalDelta = this.mouseScrollDelta;
                    this._resetMouseScrollState();
                    var success = totalDelta > 0 ? this._goToPreviousPage() : this._goToNextPage();
                    if (success) {
                        this.mouseScrollTimeStamp = currentTime;
                    }
                }
            }
        }, {
            key: "_goToPreviousPage",
            value: function _goToPreviousPage() {
                var page = this.pdfViewer.currentPageNumber;
                if (page <= 1) {
                    return false;
                }
                this.pdfViewer.currentPageNumber = page - 1;
                return true;
            }
        }, {
            key: "_goToNextPage",
            value: function _goToNextPage() {
                var page = this.pdfViewer.currentPageNumber;
                if (page >= this.pdfViewer.pagesCount) {
                    return false;
                }
                this.pdfViewer.currentPageNumber = page + 1;
                return true;
            }
        }, {
            key: "_notifyStateChange",
            value: function _notifyStateChange() {
                this.eventBus.dispatch("presentationmodechanged", {
                    source: this,
                    active: this.active,
                    switchInProgress: !!this.switchInProgress
                });
            }
        }, {
            key: "_setSwitchInProgress",
            value: function _setSwitchInProgress() {
                var _this2 = this;
                if (this.switchInProgress) {
                    clearTimeout(this.switchInProgress);
                }
                this.switchInProgress = setTimeout(function() {
                    _this2._removeFullscreenChangeListeners();
                    delete _this2.switchInProgress;
                    _this2._notifyStateChange();
                }, DELAY_BEFORE_RESETTING_SWITCH_IN_PROGRESS);
            }
        }, {
            key: "_resetSwitchInProgress",
            value: function _resetSwitchInProgress() {
                if (this.switchInProgress) {
                    clearTimeout(this.switchInProgress);
                    delete this.switchInProgress;
                }
            }
        }, {
            key: "_enter",
            value: function _enter() {
                var _this3 = this;
                this.active = true;
                this._resetSwitchInProgress();
                this._notifyStateChange();
                this.container.classList.add(ACTIVE_SELECTOR);
                setTimeout(function() {
                    _this3.pdfViewer.currentPageNumber = _this3.args.page;
                    _this3.pdfViewer.currentScaleValue = "page-fit";
                }, 0);
                this._addWindowListeners();
                this._showControls();
                this.contextMenuOpen = false;
                this.container.setAttribute("contextmenu", "viewerContextMenu");
                window.getSelection().removeAllRanges();
            }
        }, {
            key: "_exit",
            value: function _exit() {
                var _this4 = this;
                var page = this.pdfViewer.currentPageNumber;
                this.container.classList.remove(ACTIVE_SELECTOR);
                setTimeout(function() {
                    _this4.active = false;
                    _this4._removeFullscreenChangeListeners();
                    _this4._notifyStateChange();
                    _this4.pdfViewer.currentScaleValue = _this4.args.previousScale;
                    _this4.pdfViewer.currentPageNumber = page;
                    _this4.args = null;
                }, 0);
                this._removeWindowListeners();
                this._hideControls();
                this._resetMouseScrollState();
                this.container.removeAttribute("contextmenu");
                this.contextMenuOpen = false;
            }
        }, {
            key: "_mouseDown",
            value: function _mouseDown(evt) {
                if (this.contextMenuOpen) {
                    this.contextMenuOpen = false;
                    evt.preventDefault();
                    return;
                }
                if (evt.button === 0) {
                    var isInternalLink = evt.target.href && evt.target.classList.contains("internalLink");
                    if (!isInternalLink) {
                        evt.preventDefault();
                        if (evt.shiftKey) {
                            this._goToPreviousPage();
                        } else {
                            this._goToNextPage();
                        }
                    }
                }
            }
        }, {
            key: "_contextMenu",
            value: function _contextMenu() {
                this.contextMenuOpen = true;
            }
        }, {
            key: "_showControls",
            value: function _showControls() {
                var _this5 = this;
                if (this.controlsTimeout) {
                    clearTimeout(this.controlsTimeout);
                } else {
                    this.container.classList.add(CONTROLS_SELECTOR);
                }
                this.controlsTimeout = setTimeout(function() {
                    _this5.container.classList.remove(CONTROLS_SELECTOR);
                    delete _this5.controlsTimeout;
                }, DELAY_BEFORE_HIDING_CONTROLS);
            }
        }, {
            key: "_hideControls",
            value: function _hideControls() {
                if (!this.controlsTimeout) {
                    return;
                }
                clearTimeout(this.controlsTimeout);
                this.container.classList.remove(CONTROLS_SELECTOR);
                delete this.controlsTimeout;
            }
        }, {
            key: "_resetMouseScrollState",
            value: function _resetMouseScrollState() {
                this.mouseScrollTimeStamp = 0;
                this.mouseScrollDelta = 0;
            }
        }, {
            key: "_touchSwipe",
            value: function _touchSwipe(evt) {
                if (!this.active) {
                    return;
                }
                if (evt.touches.length > 1) {
                    this.touchSwipeState = null;
                    return;
                }
                switch (evt.type) {
                  case "touchstart":
                    this.touchSwipeState = {
                        startX: evt.touches[0].pageX,
                        startY: evt.touches[0].pageY,
                        endX: evt.touches[0].pageX,
                        endY: evt.touches[0].pageY
                    };
                    break;

                  case "touchmove":
                    if (this.touchSwipeState === null) {
                        return;
                    }
                    this.touchSwipeState.endX = evt.touches[0].pageX;
                    this.touchSwipeState.endY = evt.touches[0].pageY;
                    evt.preventDefault();
                    break;

                  case "touchend":
                    if (this.touchSwipeState === null) {
                        return;
                    }
                    var delta = 0;
                    var dx = this.touchSwipeState.endX - this.touchSwipeState.startX;
                    var dy = this.touchSwipeState.endY - this.touchSwipeState.startY;
                    var absAngle = Math.abs(Math.atan2(dy, dx));
                    if (Math.abs(dx) > SWIPE_MIN_DISTANCE_THRESHOLD && (absAngle <= SWIPE_ANGLE_THRESHOLD || absAngle >= Math.PI - SWIPE_ANGLE_THRESHOLD)) {
                        delta = dx;
                    } else if (Math.abs(dy) > SWIPE_MIN_DISTANCE_THRESHOLD && Math.abs(absAngle - Math.PI / 2) <= SWIPE_ANGLE_THRESHOLD) {
                        delta = dy;
                    }
                    if (delta > 0) {
                        this._goToPreviousPage();
                    } else if (delta < 0) {
                        this._goToNextPage();
                    }
                    break;
                }
            }
        }, {
            key: "_addWindowListeners",
            value: function _addWindowListeners() {
                this.showControlsBind = this._showControls.bind(this);
                this.mouseDownBind = this._mouseDown.bind(this);
                this.mouseWheelBind = this._mouseWheel.bind(this);
                this.resetMouseScrollStateBind = this._resetMouseScrollState.bind(this);
                this.contextMenuBind = this._contextMenu.bind(this);
                this.touchSwipeBind = this._touchSwipe.bind(this);
                window.addEventListener("mousemove", this.showControlsBind);
                window.addEventListener("mousedown", this.mouseDownBind);
                window.addEventListener("wheel", this.mouseWheelBind);
                window.addEventListener("keydown", this.resetMouseScrollStateBind);
                window.addEventListener("contextmenu", this.contextMenuBind);
                window.addEventListener("touchstart", this.touchSwipeBind);
                window.addEventListener("touchmove", this.touchSwipeBind);
                window.addEventListener("touchend", this.touchSwipeBind);
            }
        }, {
            key: "_removeWindowListeners",
            value: function _removeWindowListeners() {
                window.removeEventListener("mousemove", this.showControlsBind);
                window.removeEventListener("mousedown", this.mouseDownBind);
                window.removeEventListener("wheel", this.mouseWheelBind);
                window.removeEventListener("keydown", this.resetMouseScrollStateBind);
                window.removeEventListener("contextmenu", this.contextMenuBind);
                window.removeEventListener("touchstart", this.touchSwipeBind);
                window.removeEventListener("touchmove", this.touchSwipeBind);
                window.removeEventListener("touchend", this.touchSwipeBind);
                delete this.showControlsBind;
                delete this.mouseDownBind;
                delete this.mouseWheelBind;
                delete this.resetMouseScrollStateBind;
                delete this.contextMenuBind;
                delete this.touchSwipeBind;
            }
        }, {
            key: "_fullscreenChange",
            value: function _fullscreenChange() {
                if (this.isFullscreen) {
                    this._enter();
                } else {
                    this._exit();
                }
            }
        }, {
            key: "_addFullscreenChangeListeners",
            value: function _addFullscreenChangeListeners() {
                this.fullscreenChangeBind = this._fullscreenChange.bind(this);
                window.addEventListener("fullscreenchange", this.fullscreenChangeBind);
                window.addEventListener("mozfullscreenchange", this.fullscreenChangeBind);
                window.addEventListener("webkitfullscreenchange", this.fullscreenChangeBind);
                window.addEventListener("MSFullscreenChange", this.fullscreenChangeBind);
            }
        }, {
            key: "_removeFullscreenChangeListeners",
            value: function _removeFullscreenChangeListeners() {
                window.removeEventListener("fullscreenchange", this.fullscreenChangeBind);
                window.removeEventListener("mozfullscreenchange", this.fullscreenChangeBind);
                window.removeEventListener("webkitfullscreenchange", this.fullscreenChangeBind);
                window.removeEventListener("MSFullscreenChange", this.fullscreenChangeBind);
                delete this.fullscreenChangeBind;
            }
        }, {
            key: "isFullscreen",
            get: function get() {
                return !!(document.fullscreenElement || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement);
            }
        } ]);
        return PDFPresentationMode;
    }();
    exports.PDFPresentationMode = PDFPresentationMode;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFSidebarResizer = void 0;
    var _ui_utils = __webpack_require__(5);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var SIDEBAR_WIDTH_VAR = "--sidebar-width";
    var SIDEBAR_MIN_WIDTH = 200;
    var SIDEBAR_RESIZING_CLASS = "sidebarResizing";
    var PDFSidebarResizer = function() {
        function PDFSidebarResizer(options, eventBus) {
            var _this = this;
            var l10n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ui_utils.NullL10n;
            _classCallCheck(this, PDFSidebarResizer);
            this.enabled = false;
            this.isRTL = false;
            this.sidebarOpen = false;
            this.doc = document.documentElement;
            this._width = null;
            this._outerContainerWidth = null;
            this._boundEvents = Object.create(null);
            this.outerContainer = options.outerContainer;
            this.resizer = options.resizer;
            this.eventBus = eventBus;
            this.l10n = l10n;
            if (typeof CSS === "undefined" || typeof CSS.supports !== "function" || !CSS.supports(SIDEBAR_WIDTH_VAR, "calc(-1 * ".concat(SIDEBAR_MIN_WIDTH, "px)"))) {
                console.warn("PDFSidebarResizer: " + "The browser does not support resizing of the sidebar.");
                return;
            }
            this.enabled = true;
            this.resizer.classList.remove("hidden");
            this.l10n.getDirection().then(function(dir) {
                _this.isRTL = dir === "rtl";
            });
            this._addEventListeners();
        }
        _createClass(PDFSidebarResizer, [ {
            key: "_updateWidth",
            value: function _updateWidth() {
                var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                if (!this.enabled) {
                    return false;
                }
                var maxWidth = Math.floor(this.outerContainerWidth / 2);
                if (width > maxWidth) {
                    width = maxWidth;
                }
                if (width < SIDEBAR_MIN_WIDTH) {
                    width = SIDEBAR_MIN_WIDTH;
                }
                if (width === this._width) {
                    return false;
                }
                this._width = width;
                this.doc.style.setProperty(SIDEBAR_WIDTH_VAR, "".concat(width, "px"));
                return true;
            }
        }, {
            key: "_mouseMove",
            value: function _mouseMove(evt) {
                var width = evt.clientX;
                if (this.isRTL) {
                    width = this.outerContainerWidth - width;
                }
                this._updateWidth(width);
            }
        }, {
            key: "_mouseUp",
            value: function _mouseUp(evt) {
                this.outerContainer.classList.remove(SIDEBAR_RESIZING_CLASS);
                this.eventBus.dispatch("resize", {
                    source: this
                });
                var _boundEvents = this._boundEvents;
                window.removeEventListener("mousemove", _boundEvents.mouseMove);
                window.removeEventListener("mouseup", _boundEvents.mouseUp);
            }
        }, {
            key: "_addEventListeners",
            value: function _addEventListeners() {
                var _this2 = this;
                if (!this.enabled) {
                    return;
                }
                var _boundEvents = this._boundEvents;
                _boundEvents.mouseMove = this._mouseMove.bind(this);
                _boundEvents.mouseUp = this._mouseUp.bind(this);
                this.resizer.addEventListener("mousedown", function(evt) {
                    if (evt.button !== 0) {
                        return;
                    }
                    _this2.outerContainer.classList.add(SIDEBAR_RESIZING_CLASS);
                    window.addEventListener("mousemove", _boundEvents.mouseMove);
                    window.addEventListener("mouseup", _boundEvents.mouseUp);
                });
                this.eventBus.on("sidebarviewchanged", function(evt) {
                    _this2.sidebarOpen = !!(evt && evt.view);
                });
                this.eventBus.on("resize", function(evt) {
                    if (evt && evt.source === window) {
                        _this2._outerContainerWidth = null;
                        if (_this2._width) {
                            if (_this2.sidebarOpen) {
                                _this2.outerContainer.classList.add(SIDEBAR_RESIZING_CLASS);
                                var updated = _this2._updateWidth(_this2._width);
                                Promise.resolve().then(function() {
                                    _this2.outerContainer.classList.remove(SIDEBAR_RESIZING_CLASS);
                                    if (updated) {
                                        _this2.eventBus.dispatch("resize", {
                                            source: _this2
                                        });
                                    }
                                });
                            } else {
                                _this2._updateWidth(_this2._width);
                            }
                        }
                    }
                });
            }
        }, {
            key: "outerContainerWidth",
            get: function get() {
                if (!this._outerContainerWidth) {
                    this._outerContainerWidth = this.outerContainer.clientWidth;
                }
                return this._outerContainerWidth;
            }
        } ]);
        return PDFSidebarResizer;
    }();
    exports.PDFSidebarResizer = PDFSidebarResizer;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFThumbnailViewer = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdf_thumbnail_view = __webpack_require__(26);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var THUMBNAIL_SCROLL_MARGIN = -19;
    var THUMBNAIL_SELECTED_CLASS = "selected";
    var PDFThumbnailViewer = function() {
        function PDFThumbnailViewer(_ref) {
            var container = _ref.container, linkService = _ref.linkService, renderingQueue = _ref.renderingQueue, _ref$l10n = _ref.l10n, l10n = _ref$l10n === void 0 ? _ui_utils.NullL10n : _ref$l10n;
            _classCallCheck(this, PDFThumbnailViewer);
            this.container = container;
            this.linkService = linkService;
            this.renderingQueue = renderingQueue;
            this.l10n = l10n;
            this.scroll = (0, _ui_utils.watchScroll)(this.container, this._scrollUpdated.bind(this));
            this._resetView();
        }
        _createClass(PDFThumbnailViewer, [ {
            key: "_scrollUpdated",
            value: function _scrollUpdated() {
                this.renderingQueue.renderHighestPriority();
            }
        }, {
            key: "getThumbnail",
            value: function getThumbnail(index) {
                return this._thumbnails[index];
            }
        }, {
            key: "_getVisibleThumbs",
            value: function _getVisibleThumbs() {
                return (0, _ui_utils.getVisibleElements)(this.container, this._thumbnails);
            }
        }, {
            key: "scrollThumbnailIntoView",
            value: function scrollThumbnailIntoView(pageNumber) {
                if (!this.pdfDocument) {
                    return;
                }
                var thumbnailView = this._thumbnails[pageNumber - 1];
                if (!thumbnailView) {
                    console.error('scrollThumbnailIntoView: Invalid "pageNumber" parameter.');
                    return;
                }
                if (pageNumber !== this._currentPageNumber) {
                    var prevThumbnailView = this._thumbnails[this._currentPageNumber - 1];
                    prevThumbnailView.div.classList.remove(THUMBNAIL_SELECTED_CLASS);
                    thumbnailView.div.classList.add(THUMBNAIL_SELECTED_CLASS);
                }
                var visibleThumbs = this._getVisibleThumbs();
                var numVisibleThumbs = visibleThumbs.views.length;
                if (numVisibleThumbs > 0) {
                    var first = visibleThumbs.first.id;
                    var last = numVisibleThumbs > 1 ? visibleThumbs.last.id : first;
                    var shouldScroll = false;
                    if (pageNumber <= first || pageNumber >= last) {
                        shouldScroll = true;
                    } else {
                        visibleThumbs.views.some(function(view) {
                            if (view.id !== pageNumber) {
                                return false;
                            }
                            shouldScroll = view.percent < 100;
                            return true;
                        });
                    }
                    if (shouldScroll) {
                        (0, _ui_utils.scrollIntoView)(thumbnailView.div, {
                            top: THUMBNAIL_SCROLL_MARGIN
                        });
                    }
                }
                this._currentPageNumber = pageNumber;
            }
        }, {
            key: "cleanup",
            value: function cleanup() {
                _pdf_thumbnail_view.PDFThumbnailView.cleanup();
            }
        }, {
            key: "_resetView",
            value: function _resetView() {
                this._thumbnails = [];
                this._currentPageNumber = 1;
                this._pageLabels = null;
                this._pagesRotation = 0;
                this._pagesRequests = [];
                this.container.textContent = "";
            }
        }, {
            key: "setDocument",
            value: function setDocument(pdfDocument) {
                var _this = this;
                if (this.pdfDocument) {
                    this._cancelRendering();
                    this._resetView();
                }
                this.pdfDocument = pdfDocument;
                if (!pdfDocument) {
                    return;
                }
                pdfDocument.getPage(1).then(function(firstPage) {
                    var pagesCount = pdfDocument.numPages;
                    var viewport = firstPage.getViewport({
                        scale: 1
                    });
                    for (var pageNum = 1; pageNum <= pagesCount; ++pageNum) {
                        var thumbnail = new _pdf_thumbnail_view.PDFThumbnailView({
                            container: _this.container,
                            id: pageNum,
                            defaultViewport: viewport.clone(),
                            linkService: _this.linkService,
                            renderingQueue: _this.renderingQueue,
                            disableCanvasToImageConversion: false,
                            l10n: _this.l10n
                        });
                        _this._thumbnails.push(thumbnail);
                    }
                    var thumbnailView = _this._thumbnails[_this._currentPageNumber - 1];
                    thumbnailView.div.classList.add(THUMBNAIL_SELECTED_CLASS);
                })["catch"](function(reason) {
                    console.error("Unable to initialize thumbnail viewer", reason);
                });
            }
        }, {
            key: "_cancelRendering",
            value: function _cancelRendering() {
                for (var i = 0, ii = this._thumbnails.length; i < ii; i++) {
                    if (this._thumbnails[i]) {
                        this._thumbnails[i].cancelRendering();
                    }
                }
            }
        }, {
            key: "setPageLabels",
            value: function setPageLabels(labels) {
                if (!this.pdfDocument) {
                    return;
                }
                if (!labels) {
                    this._pageLabels = null;
                } else if (!(Array.isArray(labels) && this.pdfDocument.numPages === labels.length)) {
                    this._pageLabels = null;
                    console.error("PDFThumbnailViewer_setPageLabels: Invalid page labels.");
                } else {
                    this._pageLabels = labels;
                }
                for (var i = 0, ii = this._thumbnails.length; i < ii; i++) {
                    var label = this._pageLabels && this._pageLabels[i];
                    this._thumbnails[i].setPageLabel(label);
                }
            }
        }, {
            key: "_ensurePdfPageLoaded",
            value: function _ensurePdfPageLoaded(thumbView) {
                var _this2 = this;
                if (thumbView.pdfPage) {
                    return Promise.resolve(thumbView.pdfPage);
                }
                var pageNumber = thumbView.id;
                if (this._pagesRequests[pageNumber]) {
                    return this._pagesRequests[pageNumber];
                }
                var promise = this.pdfDocument.getPage(pageNumber).then(function(pdfPage) {
                    thumbView.setPdfPage(pdfPage);
                    _this2._pagesRequests[pageNumber] = null;
                    return pdfPage;
                })["catch"](function(reason) {
                    console.error("Unable to get page for thumb view", reason);
                    _this2._pagesRequests[pageNumber] = null;
                });
                this._pagesRequests[pageNumber] = promise;
                return promise;
            }
        }, {
            key: "forceRendering",
            value: function forceRendering() {
                var _this3 = this;
                var visibleThumbs = this._getVisibleThumbs();
                var thumbView = this.renderingQueue.getHighestPriority(visibleThumbs, this._thumbnails, this.scroll.down);
                if (thumbView) {
                    this._ensurePdfPageLoaded(thumbView).then(function() {
                        _this3.renderingQueue.renderView(thumbView);
                    });
                    return true;
                }
                return false;
            }
        }, {
            key: "pagesRotation",
            get: function get() {
                return this._pagesRotation;
            },
            set: function set(rotation) {
                if (!(0, _ui_utils.isValidRotation)(rotation)) {
                    throw new Error("Invalid thumbnails rotation angle.");
                }
                if (!this.pdfDocument) {
                    return;
                }
                if (this._pagesRotation === rotation) {
                    return;
                }
                this._pagesRotation = rotation;
                for (var i = 0, ii = this._thumbnails.length; i < ii; i++) {
                    this._thumbnails[i].update(rotation);
                }
            }
        } ]);
        return PDFThumbnailViewer;
    }();
    exports.PDFThumbnailViewer = PDFThumbnailViewer;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFThumbnailView = void 0;
    var _pdfjsLib = __webpack_require__(7);
    var _ui_utils = __webpack_require__(5);
    var _pdf_rendering_queue = __webpack_require__(11);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var MAX_NUM_SCALING_STEPS = 3;
    var THUMBNAIL_CANVAS_BORDER_WIDTH = 1;
    var THUMBNAIL_WIDTH = 98;
    var TempImageFactory = function TempImageFactoryClosure() {
        var tempCanvasCache = null;
        return {
            getCanvas: function getCanvas(width, height) {
                var tempCanvas = tempCanvasCache;
                if (!tempCanvas) {
                    tempCanvas = document.createElement("canvas");
                    tempCanvasCache = tempCanvas;
                }
                tempCanvas.width = width;
                tempCanvas.height = height;
                tempCanvas.mozOpaque = true;
                var ctx = tempCanvas.getContext("2d", {
                    alpha: false
                });
                ctx.save();
                ctx.fillStyle = "rgb(255, 255, 255)";
                ctx.fillRect(0, 0, width, height);
                ctx.restore();
                return tempCanvas;
            },
            destroyCanvas: function destroyCanvas() {
                var tempCanvas = tempCanvasCache;
                if (tempCanvas) {
                    tempCanvas.width = 0;
                    tempCanvas.height = 0;
                }
                tempCanvasCache = null;
            }
        };
    }();
    var PDFThumbnailView = function() {
        function PDFThumbnailView(_ref) {
            var container = _ref.container, id = _ref.id, defaultViewport = _ref.defaultViewport, linkService = _ref.linkService, renderingQueue = _ref.renderingQueue, _ref$disableCanvasToI = _ref.disableCanvasToImageConversion, disableCanvasToImageConversion = _ref$disableCanvasToI === void 0 ? false : _ref$disableCanvasToI, _ref$l10n = _ref.l10n, l10n = _ref$l10n === void 0 ? _ui_utils.NullL10n : _ref$l10n;
            _classCallCheck(this, PDFThumbnailView);
            this.id = id;
            this.renderingId = "thumbnail" + id;
            this.pageLabel = null;
            this.pdfPage = null;
            this.rotation = 0;
            this.viewport = defaultViewport;
            this.pdfPageRotate = defaultViewport.rotation;
            this.linkService = linkService;
            this.renderingQueue = renderingQueue;
            this.renderTask = null;
            this.renderingState = _pdf_rendering_queue.RenderingStates.INITIAL;
            this.resume = null;
            this.disableCanvasToImageConversion = disableCanvasToImageConversion;
            this.pageWidth = this.viewport.width;
            this.pageHeight = this.viewport.height;
            this.pageRatio = this.pageWidth / this.pageHeight;
            this.canvasWidth = THUMBNAIL_WIDTH;
            this.canvasHeight = this.canvasWidth / this.pageRatio | 0;
            this.scale = this.canvasWidth / this.pageWidth;
            this.l10n = l10n;
            var anchor = document.createElement("a");
            anchor.href = linkService.getAnchorUrl("#page=" + id);
            this.l10n.get("thumb_page_title", {
                page: id
            }, "Page {{page}}").then(function(msg) {
                anchor.title = msg;
            });
            anchor.onclick = function() {
                linkService.page = id;
                return false;
            };
            this.anchor = anchor;
            var div = document.createElement("div");
            div.className = "thumbnail";
            div.setAttribute("data-page-number", this.id);
            this.div = div;
            var ring = document.createElement("div");
            ring.className = "thumbnailSelectionRing";
            var borderAdjustment = 2 * THUMBNAIL_CANVAS_BORDER_WIDTH;
            ring.style.width = this.canvasWidth + borderAdjustment + "px";
            ring.style.height = this.canvasHeight + borderAdjustment + "px";
            this.ring = ring;
            div.appendChild(ring);
            anchor.appendChild(div);
            container.appendChild(anchor);
        }
        _createClass(PDFThumbnailView, [ {
            key: "setPdfPage",
            value: function setPdfPage(pdfPage) {
                this.pdfPage = pdfPage;
                this.pdfPageRotate = pdfPage.rotate;
                var totalRotation = (this.rotation + this.pdfPageRotate) % 360;
                this.viewport = pdfPage.getViewport({
                    scale: 1,
                    rotation: totalRotation
                });
                this.reset();
            }
        }, {
            key: "reset",
            value: function reset() {
                this.cancelRendering();
                this.renderingState = _pdf_rendering_queue.RenderingStates.INITIAL;
                this.pageWidth = this.viewport.width;
                this.pageHeight = this.viewport.height;
                this.pageRatio = this.pageWidth / this.pageHeight;
                this.canvasHeight = this.canvasWidth / this.pageRatio | 0;
                this.scale = this.canvasWidth / this.pageWidth;
                this.div.removeAttribute("data-loaded");
                var ring = this.ring;
                var childNodes = ring.childNodes;
                for (var i = childNodes.length - 1; i >= 0; i--) {
                    ring.removeChild(childNodes[i]);
                }
                var borderAdjustment = 2 * THUMBNAIL_CANVAS_BORDER_WIDTH;
                ring.style.width = this.canvasWidth + borderAdjustment + "px";
                ring.style.height = this.canvasHeight + borderAdjustment + "px";
                if (this.canvas) {
                    this.canvas.width = 0;
                    this.canvas.height = 0;
                    delete this.canvas;
                }
                if (this.image) {
                    this.image.removeAttribute("src");
                    delete this.image;
                }
            }
        }, {
            key: "update",
            value: function update(rotation) {
                if (typeof rotation !== "undefined") {
                    this.rotation = rotation;
                }
                var totalRotation = (this.rotation + this.pdfPageRotate) % 360;
                this.viewport = this.viewport.clone({
                    scale: 1,
                    rotation: totalRotation
                });
                this.reset();
            }
        }, {
            key: "cancelRendering",
            value: function cancelRendering() {
                if (this.renderTask) {
                    this.renderTask.cancel();
                    this.renderTask = null;
                }
                this.resume = null;
            }
        }, {
            key: "_getPageDrawContext",
            value: function _getPageDrawContext() {
                var noCtxScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                var canvas = document.createElement("canvas");
                this.canvas = canvas;
                canvas.mozOpaque = true;
                var ctx = canvas.getContext("2d", {
                    alpha: false
                });
                var outputScale = (0, _ui_utils.getOutputScale)(ctx);
                canvas.width = this.canvasWidth * outputScale.sx | 0;
                canvas.height = this.canvasHeight * outputScale.sy | 0;
                canvas.style.width = this.canvasWidth + "px";
                canvas.style.height = this.canvasHeight + "px";
                if (!noCtxScale && outputScale.scaled) {
                    ctx.scale(outputScale.sx, outputScale.sy);
                }
                return ctx;
            }
        }, {
            key: "_convertCanvasToImage",
            value: function _convertCanvasToImage() {
                var _this = this;
                if (!this.canvas) {
                    return;
                }
                if (this.renderingState !== _pdf_rendering_queue.RenderingStates.FINISHED) {
                    return;
                }
                var id = this.renderingId;
                var className = "thumbnailImage";
                if (this.disableCanvasToImageConversion) {
                    this.canvas.id = id;
                    this.canvas.className = className;
                    this.l10n.get("thumb_page_canvas", {
                        page: this.pageId
                    }, "Thumbnail of Page {{page}}").then(function(msg) {
                        _this.canvas.setAttribute("aria-label", msg);
                    });
                    this.div.setAttribute("data-loaded", true);
                    this.ring.appendChild(this.canvas);
                    return;
                }
                var image = document.createElement("img");
                image.id = id;
                image.className = className;
                this.l10n.get("thumb_page_canvas", {
                    page: this.pageId
                }, "Thumbnail of Page {{page}}").then(function(msg) {
                    image.setAttribute("aria-label", msg);
                });
                image.style.width = this.canvasWidth + "px";
                image.style.height = this.canvasHeight + "px";
                image.src = this.canvas.toDataURL();
                this.image = image;
                this.div.setAttribute("data-loaded", true);
                this.ring.appendChild(image);
                this.canvas.width = 0;
                this.canvas.height = 0;
                delete this.canvas;
            }
        }, {
            key: "draw",
            value: function draw() {
                var _this2 = this;
                if (this.renderingState !== _pdf_rendering_queue.RenderingStates.INITIAL) {
                    console.error("Must be in new state before drawing");
                    return Promise.resolve(undefined);
                }
                this.renderingState = _pdf_rendering_queue.RenderingStates.RUNNING;
                var renderCapability = (0, _pdfjsLib.createPromiseCapability)();
                var finishRenderTask = function finishRenderTask(error) {
                    if (renderTask === _this2.renderTask) {
                        _this2.renderTask = null;
                    }
                    if (error instanceof _pdfjsLib.RenderingCancelledException) {
                        renderCapability.resolve(undefined);
                        return;
                    }
                    _this2.renderingState = _pdf_rendering_queue.RenderingStates.FINISHED;
                    _this2._convertCanvasToImage();
                    if (!error) {
                        renderCapability.resolve(undefined);
                    } else {
                        renderCapability.reject(error);
                    }
                };
                var ctx = this._getPageDrawContext();
                var drawViewport = this.viewport.clone({
                    scale: this.scale
                });
                var renderContinueCallback = function renderContinueCallback(cont) {
                    if (!_this2.renderingQueue.isHighestPriority(_this2)) {
                        _this2.renderingState = _pdf_rendering_queue.RenderingStates.PAUSED;
                        _this2.resume = function() {
                            _this2.renderingState = _pdf_rendering_queue.RenderingStates.RUNNING;
                            cont();
                        };
                        return;
                    }
                    cont();
                };
                var renderContext = {
                    canvasContext: ctx,
                    viewport: drawViewport
                };
                var renderTask = this.renderTask = this.pdfPage.render(renderContext);
                renderTask.onContinue = renderContinueCallback;
                renderTask.promise.then(function() {
                    finishRenderTask(null);
                }, function(error) {
                    finishRenderTask(error);
                });
                return renderCapability.promise;
            }
        }, {
            key: "setImage",
            value: function setImage(pageView) {
                if (this.renderingState !== _pdf_rendering_queue.RenderingStates.INITIAL) {
                    return;
                }
                var img = pageView.canvas;
                if (!img) {
                    return;
                }
                if (!this.pdfPage) {
                    this.setPdfPage(pageView.pdfPage);
                }
                this.renderingState = _pdf_rendering_queue.RenderingStates.FINISHED;
                var ctx = this._getPageDrawContext(true);
                var canvas = ctx.canvas;
                if (img.width <= 2 * canvas.width) {
                    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvas.width, canvas.height);
                    this._convertCanvasToImage();
                    return;
                }
                var reducedWidth = canvas.width << MAX_NUM_SCALING_STEPS;
                var reducedHeight = canvas.height << MAX_NUM_SCALING_STEPS;
                var reducedImage = TempImageFactory.getCanvas(reducedWidth, reducedHeight);
                var reducedImageCtx = reducedImage.getContext("2d");
                while (reducedWidth > img.width || reducedHeight > img.height) {
                    reducedWidth >>= 1;
                    reducedHeight >>= 1;
                }
                reducedImageCtx.drawImage(img, 0, 0, img.width, img.height, 0, 0, reducedWidth, reducedHeight);
                while (reducedWidth > 2 * canvas.width) {
                    reducedImageCtx.drawImage(reducedImage, 0, 0, reducedWidth, reducedHeight, 0, 0, reducedWidth >> 1, reducedHeight >> 1);
                    reducedWidth >>= 1;
                    reducedHeight >>= 1;
                }
                ctx.drawImage(reducedImage, 0, 0, reducedWidth, reducedHeight, 0, 0, canvas.width, canvas.height);
                this._convertCanvasToImage();
            }
        }, {
            key: "setPageLabel",
            value: function setPageLabel(label) {
                var _this3 = this;
                this.pageLabel = typeof label === "string" ? label : null;
                this.l10n.get("thumb_page_title", {
                    page: this.pageId
                }, "Page {{page}}").then(function(msg) {
                    _this3.anchor.title = msg;
                });
                if (this.renderingState !== _pdf_rendering_queue.RenderingStates.FINISHED) {
                    return;
                }
                this.l10n.get("thumb_page_canvas", {
                    page: this.pageId
                }, "Thumbnail of Page {{page}}").then(function(ariaLabel) {
                    if (_this3.image) {
                        _this3.image.setAttribute("aria-label", ariaLabel);
                    } else if (_this3.disableCanvasToImageConversion && _this3.canvas) {
                        _this3.canvas.setAttribute("aria-label", ariaLabel);
                    }
                });
            }
        }, {
            key: "pageId",
            get: function get() {
                return this.pageLabel !== null ? this.pageLabel : this.id;
            }
        } ], [ {
            key: "cleanup",
            value: function cleanup() {
                TempImageFactory.destroyCanvas();
            }
        } ]);
        return PDFThumbnailView;
    }();
    exports.PDFThumbnailView = PDFThumbnailView;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFViewer = void 0;
    var _base_viewer = __webpack_require__(28);
    var _pdfjsLib = __webpack_require__(7);
    function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _get(target, property, receiver) {
        if (typeof Reflect !== "undefined" && Reflect.get) {
            _get = Reflect.get;
        } else {
            _get = function _get(target, property, receiver) {
                var base = _superPropBase(target, property);
                if (!base) return;
                var desc = Object.getOwnPropertyDescriptor(base, property);
                if (desc.get) {
                    return desc.get.call(receiver);
                }
                return desc.value;
            };
        }
        return _get(target, property, receiver || target);
    }
    function _superPropBase(object, property) {
        while (!Object.prototype.hasOwnProperty.call(object, property)) {
            object = _getPrototypeOf(object);
            if (object === null) break;
        }
        return object;
    }
    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    var PDFViewer = function(_BaseViewer) {
        _inherits(PDFViewer, _BaseViewer);
        function PDFViewer() {
            _classCallCheck(this, PDFViewer);
            return _possibleConstructorReturn(this, _getPrototypeOf(PDFViewer).apply(this, arguments));
        }
        _createClass(PDFViewer, [ {
            key: "_scrollIntoView",
            value: function _scrollIntoView(_ref) {
                var pageDiv = _ref.pageDiv, _ref$pageSpot = _ref.pageSpot, pageSpot = _ref$pageSpot === void 0 ? null : _ref$pageSpot, _ref$pageNumber = _ref.pageNumber, pageNumber = _ref$pageNumber === void 0 ? null : _ref$pageNumber;
                if (!pageSpot && !this.isInPresentationMode) {
                    var left = pageDiv.offsetLeft + pageDiv.clientLeft;
                    var right = left + pageDiv.clientWidth;
                    var _this$container = this.container, scrollLeft = _this$container.scrollLeft, clientWidth = _this$container.clientWidth;
                    if (this._isScrollModeHorizontal || left < scrollLeft || right > scrollLeft + clientWidth) {
                        pageSpot = {
                            left: 0,
                            top: 0
                        };
                    }
                }
                _get(_getPrototypeOf(PDFViewer.prototype), "_scrollIntoView", this).call(this, {
                    pageDiv: pageDiv,
                    pageSpot: pageSpot,
                    pageNumber: pageNumber
                });
            }
        }, {
            key: "_getVisiblePages",
            value: function _getVisiblePages() {
                if (this.isInPresentationMode) {
                    return this._getCurrentVisiblePage();
                }
                return _get(_getPrototypeOf(PDFViewer.prototype), "_getVisiblePages", this).call(this);
            }
        }, {
            key: "_updateHelper",
            value: function _updateHelper(visiblePages) {
                if (this.isInPresentationMode) {
                    return;
                }
                var currentId = this._currentPageNumber;
                var stillFullyVisible = false;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = visiblePages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var page = _step.value;
                        if (page.percent < 100) {
                            break;
                        }
                        if (page.id === currentId) {
                            stillFullyVisible = true;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                            _iterator["return"]();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (!stillFullyVisible) {
                    currentId = visiblePages[0].id;
                }
                this._setCurrentPageNumber(currentId);
            }
        }, {
            key: "_setDocumentViewerElement",
            get: function get() {
                return (0, _pdfjsLib.shadow)(this, "_setDocumentViewerElement", this.viewer);
            }
        } ]);
        return PDFViewer;
    }(_base_viewer.BaseViewer);
    exports.PDFViewer = PDFViewer;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.BaseViewer = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdf_rendering_queue = __webpack_require__(11);
    var _annotation_layer_builder = __webpack_require__(29);
    var _pdfjsLib = __webpack_require__(7);
    var _pdf_page_view = __webpack_require__(30);
    var _pdf_link_service = __webpack_require__(21);
    var _text_layer_builder = __webpack_require__(31);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var DEFAULT_CACHE_SIZE = 10;
    function PDFPageViewBuffer(size) {
        var data = [];
        this.push = function(view) {
            var i = data.indexOf(view);
            if (i >= 0) {
                data.splice(i, 1);
            }
            data.push(view);
            if (data.length > size) {
                data.shift().destroy();
            }
        };
        this.resize = function(newSize, pagesToKeep) {
            size = newSize;
            if (pagesToKeep) {
                var pageIdsToKeep = new Set();
                for (var i = 0, iMax = pagesToKeep.length; i < iMax; ++i) {
                    pageIdsToKeep.add(pagesToKeep[i].id);
                }
                (0, _ui_utils.moveToEndOfArray)(data, function(page) {
                    return pageIdsToKeep.has(page.id);
                });
            }
            while (data.length > size) {
                data.shift().destroy();
            }
        };
    }
    function isSameScale(oldScale, newScale) {
        if (newScale === oldScale) {
            return true;
        }
        if (Math.abs(newScale - oldScale) < 1e-15) {
            return true;
        }
        return false;
    }
    var BaseViewer = function() {
        function BaseViewer(options) {
            var _this = this;
            _classCallCheck(this, BaseViewer);
            if (this.constructor === BaseViewer) {
                throw new Error("Cannot initialize BaseViewer.");
            }
            this._name = this.constructor.name;
            this.container = options.container;
            this.viewer = options.viewer || options.container.firstElementChild;
            this.eventBus = options.eventBus || (0, _ui_utils.getGlobalEventBus)();
            this.linkService = options.linkService || new _pdf_link_service.SimpleLinkService();
            this.downloadManager = options.downloadManager || null;
            this.findController = options.findController || null;
            this.removePageBorders = options.removePageBorders || false;
            this.textLayerMode = Number.isInteger(options.textLayerMode) ? options.textLayerMode : _ui_utils.TextLayerMode.ENABLE;
            this.imageResourcesPath = options.imageResourcesPath || "";
            this.renderInteractiveForms = options.renderInteractiveForms || false;
            this.enablePrintAutoRotate = options.enablePrintAutoRotate || false;
            this.renderer = options.renderer || _ui_utils.RendererType.CANVAS;
            this.enableWebGL = options.enableWebGL || false;
            this.useOnlyCssZoom = options.useOnlyCssZoom || false;
            this.maxCanvasPixels = options.maxCanvasPixels;
            this.l10n = options.l10n || _ui_utils.NullL10n;
            this.defaultRenderingQueue = !options.renderingQueue;
            if (this.defaultRenderingQueue) {
                this.renderingQueue = new _pdf_rendering_queue.PDFRenderingQueue();
                this.renderingQueue.setViewer(this);
            } else {
                this.renderingQueue = options.renderingQueue;
            }
            this.scroll = (0, _ui_utils.watchScroll)(this.container, this._scrollUpdate.bind(this));
            this.presentationModeState = _ui_utils.PresentationModeState.UNKNOWN;
            this._resetView();
            if (this.removePageBorders) {
                this.viewer.classList.add("removePageBorders");
            }
            Promise.resolve().then(function() {
                _this.eventBus.dispatch("baseviewerinit", {
                    source: _this
                });
            });
        }
        _createClass(BaseViewer, [ {
            key: "getPageView",
            value: function getPageView(index) {
                return this._pages[index];
            }
        }, {
            key: "_setCurrentPageNumber",
            value: function _setCurrentPageNumber(val) {
                var resetCurrentPageView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                if (this._currentPageNumber === val) {
                    if (resetCurrentPageView) {
                        this._resetCurrentPageView();
                    }
                    return true;
                }
                if (!(0 < val && val <= this.pagesCount)) {
                    return false;
                }
                this._currentPageNumber = val;
                this.eventBus.dispatch("pagechanging", {
                    source: this,
                    pageNumber: val,
                    pageLabel: this._pageLabels && this._pageLabels[val - 1]
                });
                if (resetCurrentPageView) {
                    this._resetCurrentPageView();
                }
                return true;
            }
        }, {
            key: "setDocument",
            value: function setDocument(pdfDocument) {
                var _this2 = this;
                if (this.pdfDocument) {
                    this._cancelRendering();
                    this._resetView();
                    if (this.findController) {
                        this.findController.setDocument(null);
                    }
                }
                this.pdfDocument = pdfDocument;
                if (!pdfDocument) {
                    return;
                }
                var pagesCount = pdfDocument.numPages;
                var pagesCapability = (0, _pdfjsLib.createPromiseCapability)();
                this.pagesPromise = pagesCapability.promise;
                pagesCapability.promise.then(function() {
                    _this2._pageViewsReady = true;
                    _this2.eventBus.dispatch("pagesloaded", {
                        source: _this2,
                        pagesCount: pagesCount
                    });
                });
                var onePageRenderedCapability = (0, _pdfjsLib.createPromiseCapability)();
                this.onePageRendered = onePageRenderedCapability.promise;
                var bindOnAfterAndBeforeDraw = function bindOnAfterAndBeforeDraw(pageView) {
                    pageView.onBeforeDraw = function() {
                        _this2._buffer.push(pageView);
                    };
                    pageView.onAfterDraw = function() {
                        if (!onePageRenderedCapability.settled) {
                            onePageRenderedCapability.resolve();
                        }
                    };
                };
                var firstPagePromise = pdfDocument.getPage(1);
                this.firstPagePromise = firstPagePromise;
                firstPagePromise.then(function(pdfPage) {
                    var scale = _this2.currentScale;
                    var viewport = pdfPage.getViewport({
                        scale: scale * _ui_utils.CSS_UNITS
                    });
                    for (var pageNum = 1; pageNum <= pagesCount; ++pageNum) {
                        var textLayerFactory = null;
                        if (_this2.textLayerMode !== _ui_utils.TextLayerMode.DISABLE) {
                            textLayerFactory = _this2;
                        }
                        var pageView = new _pdf_page_view.PDFPageView({
                            container: _this2._setDocumentViewerElement,
                            eventBus: _this2.eventBus,
                            id: pageNum,
                            scale: scale,
                            defaultViewport: viewport.clone(),
                            renderingQueue: _this2.renderingQueue,
                            textLayerFactory: textLayerFactory,
                            textLayerMode: _this2.textLayerMode,
                            annotationLayerFactory: _this2,
                            imageResourcesPath: _this2.imageResourcesPath,
                            renderInteractiveForms: _this2.renderInteractiveForms,
                            renderer: _this2.renderer,
                            enableWebGL: _this2.enableWebGL,
                            useOnlyCssZoom: _this2.useOnlyCssZoom,
                            maxCanvasPixels: _this2.maxCanvasPixels,
                            l10n: _this2.l10n
                        });
                        bindOnAfterAndBeforeDraw(pageView);
                        _this2._pages.push(pageView);
                    }
                    if (_this2._spreadMode !== _ui_utils.SpreadMode.NONE) {
                        _this2._updateSpreadMode();
                    }
                    onePageRenderedCapability.promise.then(function() {
                        if (pdfDocument.loadingParams["disableAutoFetch"]) {
                            pagesCapability.resolve();
                            return;
                        }
                        var getPagesLeft = pagesCount;
                        var _loop = function _loop(_pageNum) {
                            pdfDocument.getPage(_pageNum).then(function(pdfPage) {
                                var pageView = _this2._pages[_pageNum - 1];
                                if (!pageView.pdfPage) {
                                    pageView.setPdfPage(pdfPage);
                                }
                                _this2.linkService.cachePageRef(_pageNum, pdfPage.ref);
                                if (--getPagesLeft === 0) {
                                    pagesCapability.resolve();
                                }
                            }, function(reason) {
                                console.error("Unable to get page ".concat(_pageNum, " to initialize viewer"), reason);
                                if (--getPagesLeft === 0) {
                                    pagesCapability.resolve();
                                }
                            });
                        };
                        for (var _pageNum = 1; _pageNum <= pagesCount; ++_pageNum) {
                            _loop(_pageNum);
                        }
                    });
                    _this2.eventBus.dispatch("pagesinit", {
                        source: _this2
                    });
                    if (_this2.findController) {
                        _this2.findController.setDocument(pdfDocument);
                    }
                    if (_this2.defaultRenderingQueue) {
                        _this2.update();
                    }
                })["catch"](function(reason) {
                    console.error("Unable to initialize viewer", reason);
                });
            }
        }, {
            key: "setPageLabels",
            value: function setPageLabels(labels) {
                if (!this.pdfDocument) {
                    return;
                }
                if (!labels) {
                    this._pageLabels = null;
                } else if (!(Array.isArray(labels) && this.pdfDocument.numPages === labels.length)) {
                    this._pageLabels = null;
                    console.error("".concat(this._name, ".setPageLabels: Invalid page labels."));
                } else {
                    this._pageLabels = labels;
                }
                for (var i = 0, ii = this._pages.length; i < ii; i++) {
                    var pageView = this._pages[i];
                    var label = this._pageLabels && this._pageLabels[i];
                    pageView.setPageLabel(label);
                }
            }
        }, {
            key: "_resetView",
            value: function _resetView() {
                this._pages = [];
                this._currentPageNumber = 1;
                this._currentScale = _ui_utils.UNKNOWN_SCALE;
                this._currentScaleValue = null;
                this._pageLabels = null;
                this._buffer = new PDFPageViewBuffer(DEFAULT_CACHE_SIZE);
                this._location = null;
                this._pagesRotation = 0;
                this._pagesRequests = [];
                this._pageViewsReady = false;
                this._scrollMode = _ui_utils.ScrollMode.VERTICAL;
                this._spreadMode = _ui_utils.SpreadMode.NONE;
                this.viewer.textContent = "";
                this._updateScrollMode();
            }
        }, {
            key: "_scrollUpdate",
            value: function _scrollUpdate() {
                if (this.pagesCount === 0) {
                    return;
                }
                this.update();
            }
        }, {
            key: "_scrollIntoView",
            value: function _scrollIntoView(_ref) {
                var pageDiv = _ref.pageDiv, _ref$pageSpot = _ref.pageSpot, pageSpot = _ref$pageSpot === void 0 ? null : _ref$pageSpot, _ref$pageNumber = _ref.pageNumber, pageNumber = _ref$pageNumber === void 0 ? null : _ref$pageNumber;
                (0, _ui_utils.scrollIntoView)(pageDiv, pageSpot);
            }
        }, {
            key: "_setScaleUpdatePages",
            value: function _setScaleUpdatePages(newScale, newValue) {
                var noScroll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var preset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                this._currentScaleValue = newValue.toString();
                if (isSameScale(this._currentScale, newScale)) {
                    if (preset) {
                        this.eventBus.dispatch("scalechanging", {
                            source: this,
                            scale: newScale,
                            presetValue: newValue
                        });
                    }
                    return;
                }
                for (var i = 0, ii = this._pages.length; i < ii; i++) {
                    this._pages[i].update(newScale);
                }
                this._currentScale = newScale;
                if (!noScroll) {
                    var page = this._currentPageNumber, dest;
                    if (this._location && !(this.isInPresentationMode || this.isChangingPresentationMode)) {
                        page = this._location.pageNumber;
                        dest = [ null, {
                            name: "XYZ"
                        }, this._location.left, this._location.top, null ];
                    }
                    this.scrollPageIntoView({
                        pageNumber: page,
                        destArray: dest,
                        allowNegativeOffset: true
                    });
                }
                this.eventBus.dispatch("scalechanging", {
                    source: this,
                    scale: newScale,
                    presetValue: preset ? newValue : undefined
                });
                if (this.defaultRenderingQueue) {
                    this.update();
                }
            }
        }, {
            key: "_setScale",
            value: function _setScale(value) {
                var noScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var scale = parseFloat(value);
                if (scale > 0) {
                    this._setScaleUpdatePages(scale, value, noScroll, false);
                } else {
                    var currentPage = this._pages[this._currentPageNumber - 1];
                    if (!currentPage) {
                        return;
                    }
                    var noPadding = this.isInPresentationMode || this.removePageBorders;
                    var hPadding = noPadding ? 0 : _ui_utils.SCROLLBAR_PADDING;
                    var vPadding = noPadding ? 0 : _ui_utils.VERTICAL_PADDING;
                    if (!noPadding && this._isScrollModeHorizontal) {
                        var _ref2 = [ vPadding, hPadding ];
                        hPadding = _ref2[0];
                        vPadding = _ref2[1];
                    }
                    var pageWidthScale = (this.container.clientWidth - hPadding) / currentPage.width * currentPage.scale;
                    var pageHeightScale = (this.container.clientHeight - vPadding) / currentPage.height * currentPage.scale;
                    switch (value) {
                      case "page-actual":
                        scale = 1;
                        break;

                      case "page-width":
                        scale = pageWidthScale;
                        break;

                      case "page-height":
                        scale = pageHeightScale;
                        break;

                      case "page-fit":
                        scale = Math.min(pageWidthScale, pageHeightScale);
                        break;

                      case "auto":
                        var horizontalScale = (0, _ui_utils.isPortraitOrientation)(currentPage) ? pageWidthScale : Math.min(pageHeightScale, pageWidthScale);
                        scale = Math.min(_ui_utils.MAX_AUTO_SCALE, horizontalScale);
                        break;

                      default:
                        console.error("".concat(this._name, '._setScale: "').concat(value, '" is an unknown zoom value.'));
                        return;
                    }
                    this._setScaleUpdatePages(scale, value, noScroll, true);
                }
            }
        }, {
            key: "_resetCurrentPageView",
            value: function _resetCurrentPageView() {
                if (this.isInPresentationMode) {
                    this._setScale(this._currentScaleValue, true);
                }
                var pageView = this._pages[this._currentPageNumber - 1];
                this._scrollIntoView({
                    pageDiv: pageView.div
                });
            }
        }, {
            key: "scrollPageIntoView",
            value: function scrollPageIntoView(_ref3) {
                var pageNumber = _ref3.pageNumber, _ref3$destArray = _ref3.destArray, destArray = _ref3$destArray === void 0 ? null : _ref3$destArray, _ref3$allowNegativeOf = _ref3.allowNegativeOffset, allowNegativeOffset = _ref3$allowNegativeOf === void 0 ? false : _ref3$allowNegativeOf;
                if (!this.pdfDocument) {
                    return;
                }
                var pageView = Number.isInteger(pageNumber) && this._pages[pageNumber - 1];
                if (!pageView) {
                    console.error("".concat(this._name, ".scrollPageIntoView: ") + '"'.concat(pageNumber, '" is not a valid pageNumber parameter.'));
                    return;
                }
                if (this.isInPresentationMode || !destArray) {
                    this._setCurrentPageNumber(pageNumber, true);
                    return;
                }
                var x = 0, y = 0;
                var width = 0, height = 0, widthScale, heightScale;
                var changeOrientation = pageView.rotation % 180 === 0 ? false : true;
                var pageWidth = (changeOrientation ? pageView.height : pageView.width) / pageView.scale / _ui_utils.CSS_UNITS;
                var pageHeight = (changeOrientation ? pageView.width : pageView.height) / pageView.scale / _ui_utils.CSS_UNITS;
                var scale = 0;
                switch (destArray[1].name) {
                  case "XYZ":
                    x = destArray[2];
                    y = destArray[3];
                    scale = destArray[4];
                    x = x !== null ? x : 0;
                    y = y !== null ? y : pageHeight;
                    break;

                  case "Fit":
                  case "FitB":
                    scale = "page-fit";
                    break;

                  case "FitH":
                  case "FitBH":
                    y = destArray[2];
                    scale = "page-width";
                    if (y === null && this._location) {
                        x = this._location.left;
                        y = this._location.top;
                    }
                    break;

                  case "FitV":
                  case "FitBV":
                    x = destArray[2];
                    width = pageWidth;
                    height = pageHeight;
                    scale = "page-height";
                    break;

                  case "FitR":
                    x = destArray[2];
                    y = destArray[3];
                    width = destArray[4] - x;
                    height = destArray[5] - y;
                    var hPadding = this.removePageBorders ? 0 : _ui_utils.SCROLLBAR_PADDING;
                    var vPadding = this.removePageBorders ? 0 : _ui_utils.VERTICAL_PADDING;
                    widthScale = (this.container.clientWidth - hPadding) / width / _ui_utils.CSS_UNITS;
                    heightScale = (this.container.clientHeight - vPadding) / height / _ui_utils.CSS_UNITS;
                    scale = Math.min(Math.abs(widthScale), Math.abs(heightScale));
                    break;

                  default:
                    console.error("".concat(this._name, ".scrollPageIntoView: ") + '"'.concat(destArray[1].name, '" is not a valid destination type.'));
                    return;
                }
                if (scale && scale !== this._currentScale) {
                    this.currentScaleValue = scale;
                } else if (this._currentScale === _ui_utils.UNKNOWN_SCALE) {
                    this.currentScaleValue = _ui_utils.DEFAULT_SCALE_VALUE;
                }
                if (scale === "page-fit" && !destArray[4]) {
                    this._scrollIntoView({
                        pageDiv: pageView.div,
                        pageNumber: pageNumber
                    });
                    return;
                }
                var boundingRect = [ pageView.viewport.convertToViewportPoint(x, y), pageView.viewport.convertToViewportPoint(x + width, y + height) ];
                var left = Math.min(boundingRect[0][0], boundingRect[1][0]);
                var top = Math.min(boundingRect[0][1], boundingRect[1][1]);
                if (!allowNegativeOffset) {
                    left = Math.max(left, 0);
                    top = Math.max(top, 0);
                }
                this._scrollIntoView({
                    pageDiv: pageView.div,
                    pageSpot: {
                        left: left,
                        top: top
                    },
                    pageNumber: pageNumber
                });
            }
        }, {
            key: "_updateLocation",
            value: function _updateLocation(firstPage) {
                var currentScale = this._currentScale;
                var currentScaleValue = this._currentScaleValue;
                var normalizedScaleValue = parseFloat(currentScaleValue) === currentScale ? Math.round(currentScale * 1e4) / 100 : currentScaleValue;
                var pageNumber = firstPage.id;
                var pdfOpenParams = "#page=" + pageNumber;
                pdfOpenParams += "&zoom=" + normalizedScaleValue;
                var currentPageView = this._pages[pageNumber - 1];
                var container = this.container;
                var topLeft = currentPageView.getPagePoint(container.scrollLeft - firstPage.x, container.scrollTop - firstPage.y);
                var intLeft = Math.round(topLeft[0]);
                var intTop = Math.round(topLeft[1]);
                pdfOpenParams += "," + intLeft + "," + intTop;
                this._location = {
                    pageNumber: pageNumber,
                    scale: normalizedScaleValue,
                    top: intTop,
                    left: intLeft,
                    rotation: this._pagesRotation,
                    pdfOpenParams: pdfOpenParams
                };
            }
        }, {
            key: "_updateHelper",
            value: function _updateHelper(visiblePages) {
                throw new Error("Not implemented: _updateHelper");
            }
        }, {
            key: "update",
            value: function update() {
                var visible = this._getVisiblePages();
                var visiblePages = visible.views, numVisiblePages = visiblePages.length;
                if (numVisiblePages === 0) {
                    return;
                }
                var newCacheSize = Math.max(DEFAULT_CACHE_SIZE, 2 * numVisiblePages + 1);
                this._buffer.resize(newCacheSize, visiblePages);
                this.renderingQueue.renderHighestPriority(visible);
                this._updateHelper(visiblePages);
                this._updateLocation(visible.first);
                this.eventBus.dispatch("updateviewarea", {
                    source: this,
                    location: this._location
                });
            }
        }, {
            key: "containsElement",
            value: function containsElement(element) {
                return this.container.contains(element);
            }
        }, {
            key: "focus",
            value: function focus() {
                this.container.focus();
            }
        }, {
            key: "_getCurrentVisiblePage",
            value: function _getCurrentVisiblePage() {
                if (!this.pagesCount) {
                    return {
                        views: []
                    };
                }
                var pageView = this._pages[this._currentPageNumber - 1];
                var element = pageView.div;
                var view = {
                    id: pageView.id,
                    x: element.offsetLeft + element.clientLeft,
                    y: element.offsetTop + element.clientTop,
                    view: pageView
                };
                return {
                    first: view,
                    last: view,
                    views: [ view ]
                };
            }
        }, {
            key: "_getVisiblePages",
            value: function _getVisiblePages() {
                return (0, _ui_utils.getVisibleElements)(this.container, this._pages, true, this._isScrollModeHorizontal);
            }
        }, {
            key: "isPageVisible",
            value: function isPageVisible(pageNumber) {
                if (!this.pdfDocument) {
                    return false;
                }
                if (this.pageNumber < 1 || pageNumber > this.pagesCount) {
                    console.error("".concat(this._name, '.isPageVisible: "').concat(pageNumber, '" is out of bounds.'));
                    return false;
                }
                return this._getVisiblePages().views.some(function(view) {
                    return view.id === pageNumber;
                });
            }
        }, {
            key: "cleanup",
            value: function cleanup() {
                for (var i = 0, ii = this._pages.length; i < ii; i++) {
                    if (this._pages[i] && this._pages[i].renderingState !== _pdf_rendering_queue.RenderingStates.FINISHED) {
                        this._pages[i].reset();
                    }
                }
            }
        }, {
            key: "_cancelRendering",
            value: function _cancelRendering() {
                for (var i = 0, ii = this._pages.length; i < ii; i++) {
                    if (this._pages[i]) {
                        this._pages[i].cancelRendering();
                    }
                }
            }
        }, {
            key: "_ensurePdfPageLoaded",
            value: function _ensurePdfPageLoaded(pageView) {
                var _this3 = this;
                if (pageView.pdfPage) {
                    return Promise.resolve(pageView.pdfPage);
                }
                var pageNumber = pageView.id;
                if (this._pagesRequests[pageNumber]) {
                    return this._pagesRequests[pageNumber];
                }
                var promise = this.pdfDocument.getPage(pageNumber).then(function(pdfPage) {
                    if (!pageView.pdfPage) {
                        pageView.setPdfPage(pdfPage);
                    }
                    _this3._pagesRequests[pageNumber] = null;
                    return pdfPage;
                })["catch"](function(reason) {
                    console.error("Unable to get page for page view", reason);
                    _this3._pagesRequests[pageNumber] = null;
                });
                this._pagesRequests[pageNumber] = promise;
                return promise;
            }
        }, {
            key: "forceRendering",
            value: function forceRendering(currentlyVisiblePages) {
                var _this4 = this;
                var visiblePages = currentlyVisiblePages || this._getVisiblePages();
                var scrollAhead = this._isScrollModeHorizontal ? this.scroll.right : this.scroll.down;
                var pageView = this.renderingQueue.getHighestPriority(visiblePages, this._pages, scrollAhead);
                if (pageView) {
                    this._ensurePdfPageLoaded(pageView).then(function() {
                        _this4.renderingQueue.renderView(pageView);
                    });
                    return true;
                }
                return false;
            }
        }, {
            key: "createTextLayerBuilder",
            value: function createTextLayerBuilder(textLayerDiv, pageIndex, viewport) {
                var enhanceTextSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                return new _text_layer_builder.TextLayerBuilder({
                    textLayerDiv: textLayerDiv,
                    eventBus: this.eventBus,
                    pageIndex: pageIndex,
                    viewport: viewport,
                    findController: this.isInPresentationMode ? null : this.findController,
                    enhanceTextSelection: this.isInPresentationMode ? false : enhanceTextSelection
                });
            }
        }, {
            key: "createAnnotationLayerBuilder",
            value: function createAnnotationLayerBuilder(pageDiv, pdfPage) {
                var imageResourcesPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
                var renderInteractiveForms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                var l10n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _ui_utils.NullL10n;
                return new _annotation_layer_builder.AnnotationLayerBuilder({
                    pageDiv: pageDiv,
                    pdfPage: pdfPage,
                    imageResourcesPath: imageResourcesPath,
                    renderInteractiveForms: renderInteractiveForms,
                    linkService: this.linkService,
                    downloadManager: this.downloadManager,
                    l10n: l10n
                });
            }
        }, {
            key: "getPagesOverview",
            value: function getPagesOverview() {
                var pagesOverview = this._pages.map(function(pageView) {
                    var viewport = pageView.pdfPage.getViewport({
                        scale: 1
                    });
                    return {
                        width: viewport.width,
                        height: viewport.height,
                        rotation: viewport.rotation
                    };
                });
                if (!this.enablePrintAutoRotate) {
                    return pagesOverview;
                }
                var isFirstPagePortrait = (0, _ui_utils.isPortraitOrientation)(pagesOverview[0]);
                return pagesOverview.map(function(size) {
                    if (isFirstPagePortrait === (0, _ui_utils.isPortraitOrientation)(size)) {
                        return size;
                    }
                    return {
                        width: size.height,
                        height: size.width,
                        rotation: (size.rotation + 90) % 360
                    };
                });
            }
        }, {
            key: "_updateScrollMode",
            value: function _updateScrollMode() {
                var pageNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                var scrollMode = this._scrollMode, viewer = this.viewer;
                viewer.classList.toggle("scrollHorizontal", scrollMode === _ui_utils.ScrollMode.HORIZONTAL);
                viewer.classList.toggle("scrollWrapped", scrollMode === _ui_utils.ScrollMode.WRAPPED);
                if (!this.pdfDocument || !pageNumber) {
                    return;
                }
                if (this._currentScaleValue && isNaN(this._currentScaleValue)) {
                    this._setScale(this._currentScaleValue, true);
                }
                this._setCurrentPageNumber(pageNumber, true);
                this.update();
            }
        }, {
            key: "_updateSpreadMode",
            value: function _updateSpreadMode() {
                var pageNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                if (!this.pdfDocument) {
                    return;
                }
                var viewer = this.viewer, pages = this._pages;
                viewer.textContent = "";
                if (this._spreadMode === _ui_utils.SpreadMode.NONE) {
                    for (var i = 0, iMax = pages.length; i < iMax; ++i) {
                        viewer.appendChild(pages[i].div);
                    }
                } else {
                    var parity = this._spreadMode - 1;
                    var spread = null;
                    for (var _i = 0, _iMax = pages.length; _i < _iMax; ++_i) {
                        if (spread === null) {
                            spread = document.createElement("div");
                            spread.className = "spread";
                            viewer.appendChild(spread);
                        } else if (_i % 2 === parity) {
                            spread = spread.cloneNode(false);
                            viewer.appendChild(spread);
                        }
                        spread.appendChild(pages[_i].div);
                    }
                }
                if (!pageNumber) {
                    return;
                }
                this._setCurrentPageNumber(pageNumber, true);
                this.update();
            }
        }, {
            key: "pagesCount",
            get: function get() {
                return this._pages.length;
            }
        }, {
            key: "pageViewsReady",
            get: function get() {
                return this._pageViewsReady;
            }
        }, {
            key: "currentPageNumber",
            get: function get() {
                return this._currentPageNumber;
            },
            set: function set(val) {
                if (!Number.isInteger(val)) {
                    throw new Error("Invalid page number.");
                }
                if (!this.pdfDocument) {
                    return;
                }
                if (!this._setCurrentPageNumber(val, true)) {
                    console.error("".concat(this._name, '.currentPageNumber: "').concat(val, '" is not a valid page.'));
                }
            }
        }, {
            key: "currentPageLabel",
            get: function get() {
                return this._pageLabels && this._pageLabels[this._currentPageNumber - 1];
            },
            set: function set(val) {
                if (!this.pdfDocument) {
                    return;
                }
                var page = val | 0;
                if (this._pageLabels) {
                    var i = this._pageLabels.indexOf(val);
                    if (i >= 0) {
                        page = i + 1;
                    }
                }
                if (!this._setCurrentPageNumber(page, true)) {
                    console.error("".concat(this._name, '.currentPageLabel: "').concat(val, '" is not a valid page.'));
                }
            }
        }, {
            key: "currentScale",
            get: function get() {
                return this._currentScale !== _ui_utils.UNKNOWN_SCALE ? this._currentScale : _ui_utils.DEFAULT_SCALE;
            },
            set: function set(val) {
                if (isNaN(val)) {
                    throw new Error("Invalid numeric scale.");
                }
                if (!this.pdfDocument) {
                    return;
                }
                this._setScale(val, false);
            }
        }, {
            key: "currentScaleValue",
            get: function get() {
                return this._currentScaleValue;
            },
            set: function set(val) {
                if (!this.pdfDocument) {
                    return;
                }
                this._setScale(val, false);
            }
        }, {
            key: "pagesRotation",
            get: function get() {
                return this._pagesRotation;
            },
            set: function set(rotation) {
                if (!(0, _ui_utils.isValidRotation)(rotation)) {
                    throw new Error("Invalid pages rotation angle.");
                }
                if (!this.pdfDocument) {
                    return;
                }
                if (this._pagesRotation === rotation) {
                    return;
                }
                this._pagesRotation = rotation;
                var pageNumber = this._currentPageNumber;
                for (var i = 0, ii = this._pages.length; i < ii; i++) {
                    var pageView = this._pages[i];
                    pageView.update(pageView.scale, rotation);
                }
                if (this._currentScaleValue) {
                    this._setScale(this._currentScaleValue, true);
                }
                this.eventBus.dispatch("rotationchanging", {
                    source: this,
                    pagesRotation: rotation,
                    pageNumber: pageNumber
                });
                if (this.defaultRenderingQueue) {
                    this.update();
                }
            }
        }, {
            key: "_setDocumentViewerElement",
            get: function get() {
                throw new Error("Not implemented: _setDocumentViewerElement");
            }
        }, {
            key: "_isScrollModeHorizontal",
            get: function get() {
                return this.isInPresentationMode ? false : this._scrollMode === _ui_utils.ScrollMode.HORIZONTAL;
            }
        }, {
            key: "isInPresentationMode",
            get: function get() {
                return this.presentationModeState === _ui_utils.PresentationModeState.FULLSCREEN;
            }
        }, {
            key: "isChangingPresentationMode",
            get: function get() {
                return this.presentationModeState === _ui_utils.PresentationModeState.CHANGING;
            }
        }, {
            key: "isHorizontalScrollbarEnabled",
            get: function get() {
                return this.isInPresentationMode ? false : this.container.scrollWidth > this.container.clientWidth;
            }
        }, {
            key: "isVerticalScrollbarEnabled",
            get: function get() {
                return this.isInPresentationMode ? false : this.container.scrollHeight > this.container.clientHeight;
            }
        }, {
            key: "hasEqualPageSizes",
            get: function get() {
                var firstPageView = this._pages[0];
                for (var i = 1, ii = this._pages.length; i < ii; ++i) {
                    var pageView = this._pages[i];
                    if (pageView.width !== firstPageView.width || pageView.height !== firstPageView.height) {
                        return false;
                    }
                }
                return true;
            }
        }, {
            key: "scrollMode",
            get: function get() {
                return this._scrollMode;
            },
            set: function set(mode) {
                if (this._scrollMode === mode) {
                    return;
                }
                if (!(0, _ui_utils.isValidScrollMode)(mode)) {
                    throw new Error("Invalid scroll mode: ".concat(mode));
                }
                this._scrollMode = mode;
                this.eventBus.dispatch("scrollmodechanged", {
                    source: this,
                    mode: mode
                });
                this._updateScrollMode(this._currentPageNumber);
            }
        }, {
            key: "spreadMode",
            get: function get() {
                return this._spreadMode;
            },
            set: function set(mode) {
                if (this._spreadMode === mode) {
                    return;
                }
                if (!(0, _ui_utils.isValidSpreadMode)(mode)) {
                    throw new Error("Invalid spread mode: ".concat(mode));
                }
                this._spreadMode = mode;
                this.eventBus.dispatch("spreadmodechanged", {
                    source: this,
                    mode: mode
                });
                this._updateSpreadMode(this._currentPageNumber);
            }
        } ]);
        return BaseViewer;
    }();
    exports.BaseViewer = BaseViewer;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.DefaultAnnotationLayerFactory = exports.AnnotationLayerBuilder = void 0;
    var _pdfjsLib = __webpack_require__(7);
    var _ui_utils = __webpack_require__(5);
    var _pdf_link_service = __webpack_require__(21);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var AnnotationLayerBuilder = function() {
        function AnnotationLayerBuilder(_ref) {
            var pageDiv = _ref.pageDiv, pdfPage = _ref.pdfPage, linkService = _ref.linkService, downloadManager = _ref.downloadManager, _ref$imageResourcesPa = _ref.imageResourcesPath, imageResourcesPath = _ref$imageResourcesPa === void 0 ? "" : _ref$imageResourcesPa, _ref$renderInteractiv = _ref.renderInteractiveForms, renderInteractiveForms = _ref$renderInteractiv === void 0 ? false : _ref$renderInteractiv, _ref$l10n = _ref.l10n, l10n = _ref$l10n === void 0 ? _ui_utils.NullL10n : _ref$l10n;
            _classCallCheck(this, AnnotationLayerBuilder);
            this.pageDiv = pageDiv;
            this.pdfPage = pdfPage;
            this.linkService = linkService;
            this.downloadManager = downloadManager;
            this.imageResourcesPath = imageResourcesPath;
            this.renderInteractiveForms = renderInteractiveForms;
            this.l10n = l10n;
            this.div = null;
            this._cancelled = false;
        }
        _createClass(AnnotationLayerBuilder, [ {
            key: "render",
            value: function render(viewport) {
                var _this = this;
                var intent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "display";
                this.pdfPage.getAnnotations({
                    intent: intent
                }).then(function(annotations) {
                    if (_this._cancelled) {
                        return;
                    }
                    var parameters = {
                        viewport: viewport.clone({
                            dontFlip: true
                        }),
                        div: _this.div,
                        annotations: annotations,
                        page: _this.pdfPage,
                        imageResourcesPath: _this.imageResourcesPath,
                        renderInteractiveForms: _this.renderInteractiveForms,
                        linkService: _this.linkService,
                        downloadManager: _this.downloadManager
                    };
                    if (_this.div) {
                        _pdfjsLib.AnnotationLayer.update(parameters);
                    } else {
                        if (annotations.length === 0) {
                            return;
                        }
                        _this.div = document.createElement("div");
                        _this.div.className = "annotationLayer";
                        _this.pageDiv.appendChild(_this.div);
                        parameters.div = _this.div;
                        _pdfjsLib.AnnotationLayer.render(parameters);
                        _this.l10n.translate(_this.div);
                    }
                });
            }
        }, {
            key: "cancel",
            value: function cancel() {
                this._cancelled = true;
            }
        }, {
            key: "hide",
            value: function hide() {
                if (!this.div) {
                    return;
                }
                this.div.setAttribute("hidden", "true");
            }
        } ]);
        return AnnotationLayerBuilder;
    }();
    exports.AnnotationLayerBuilder = AnnotationLayerBuilder;
    var DefaultAnnotationLayerFactory = function() {
        function DefaultAnnotationLayerFactory() {
            _classCallCheck(this, DefaultAnnotationLayerFactory);
        }
        _createClass(DefaultAnnotationLayerFactory, [ {
            key: "createAnnotationLayerBuilder",
            value: function createAnnotationLayerBuilder(pageDiv, pdfPage) {
                var imageResourcesPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
                var renderInteractiveForms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                var l10n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _ui_utils.NullL10n;
                return new AnnotationLayerBuilder({
                    pageDiv: pageDiv,
                    pdfPage: pdfPage,
                    imageResourcesPath: imageResourcesPath,
                    renderInteractiveForms: renderInteractiveForms,
                    linkService: new _pdf_link_service.SimpleLinkService(),
                    l10n: l10n
                });
            }
        } ]);
        return DefaultAnnotationLayerFactory;
    }();
    exports.DefaultAnnotationLayerFactory = DefaultAnnotationLayerFactory;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFPageView = void 0;
    var _regenerator = _interopRequireDefault(__webpack_require__(2));
    var _ui_utils = __webpack_require__(5);
    var _pdfjsLib = __webpack_require__(7);
    var _pdf_rendering_queue = __webpack_require__(11);
    var _viewer_compatibility = __webpack_require__(8);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _asyncToGenerator(fn) {
        return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var MAX_CANVAS_PIXELS = _viewer_compatibility.viewerCompatibilityParams.maxCanvasPixels || 16777216;
    var PDFPageView = function() {
        function PDFPageView(options) {
            _classCallCheck(this, PDFPageView);
            var container = options.container;
            var defaultViewport = options.defaultViewport;
            this.id = options.id;
            this.renderingId = "page" + this.id;
            this.pdfPage = null;
            this.pageLabel = null;
            this.rotation = 0;
            this.scale = options.scale || _ui_utils.DEFAULT_SCALE;
            this.viewport = defaultViewport;
            this.pdfPageRotate = defaultViewport.rotation;
            this.hasRestrictedScaling = false;
            this.textLayerMode = Number.isInteger(options.textLayerMode) ? options.textLayerMode : _ui_utils.TextLayerMode.ENABLE;
            this.imageResourcesPath = options.imageResourcesPath || "";
            this.renderInteractiveForms = options.renderInteractiveForms || false;
            this.useOnlyCssZoom = options.useOnlyCssZoom || false;
            this.maxCanvasPixels = options.maxCanvasPixels || MAX_CANVAS_PIXELS;
            this.eventBus = options.eventBus || (0, _ui_utils.getGlobalEventBus)();
            this.renderingQueue = options.renderingQueue;
            this.textLayerFactory = options.textLayerFactory;
            this.annotationLayerFactory = options.annotationLayerFactory;
            this.renderer = options.renderer || _ui_utils.RendererType.CANVAS;
            this.enableWebGL = options.enableWebGL || false;
            this.l10n = options.l10n || _ui_utils.NullL10n;
            this.paintTask = null;
            this.paintedViewportMap = new WeakMap();
            this.renderingState = _pdf_rendering_queue.RenderingStates.INITIAL;
            this.resume = null;
            this.error = null;
            this.onBeforeDraw = null;
            this.onAfterDraw = null;
            this.annotationLayer = null;
            this.textLayer = null;
            this.zoomLayer = null;
            var div = document.createElement("div");
            div.className = "page";
            div.style.width = Math.floor(this.viewport.width) + "px";
            div.style.height = Math.floor(this.viewport.height) + "px";
            div.setAttribute("data-page-number", this.id);
            this.div = div;
            container.appendChild(div);
        }
        _createClass(PDFPageView, [ {
            key: "setPdfPage",
            value: function setPdfPage(pdfPage) {
                this.pdfPage = pdfPage;
                this.pdfPageRotate = pdfPage.rotate;
                var totalRotation = (this.rotation + this.pdfPageRotate) % 360;
                this.viewport = pdfPage.getViewport({
                    scale: this.scale * _ui_utils.CSS_UNITS,
                    rotation: totalRotation
                });
                this.stats = pdfPage.stats;
                this.reset();
            }
        }, {
            key: "destroy",
            value: function destroy() {
                this.reset();
                if (this.pdfPage) {
                    this.pdfPage.cleanup();
                }
            }
        }, {
            key: "_resetZoomLayer",
            value: function _resetZoomLayer() {
                var removeFromDOM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (!this.zoomLayer) {
                    return;
                }
                var zoomLayerCanvas = this.zoomLayer.firstChild;
                this.paintedViewportMap["delete"](zoomLayerCanvas);
                zoomLayerCanvas.width = 0;
                zoomLayerCanvas.height = 0;
                if (removeFromDOM) {
                    this.zoomLayer.remove();
                }
                this.zoomLayer = null;
            }
        }, {
            key: "reset",
            value: function reset() {
                var keepZoomLayer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                var keepAnnotations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                this.cancelRendering(keepAnnotations);
                this.renderingState = _pdf_rendering_queue.RenderingStates.INITIAL;
                var div = this.div;
                div.style.width = Math.floor(this.viewport.width) + "px";
                div.style.height = Math.floor(this.viewport.height) + "px";
                var childNodes = div.childNodes;
                var currentZoomLayerNode = keepZoomLayer && this.zoomLayer || null;
                var currentAnnotationNode = keepAnnotations && this.annotationLayer && this.annotationLayer.div || null;
                for (var i = childNodes.length - 1; i >= 0; i--) {
                    var node = childNodes[i];
                    if (currentZoomLayerNode === node || currentAnnotationNode === node) {
                        continue;
                    }
                    div.removeChild(node);
                }
                div.removeAttribute("data-loaded");
                if (currentAnnotationNode) {
                    this.annotationLayer.hide();
                } else if (this.annotationLayer) {
                    this.annotationLayer.cancel();
                    this.annotationLayer = null;
                }
                if (!currentZoomLayerNode) {
                    if (this.canvas) {
                        this.paintedViewportMap["delete"](this.canvas);
                        this.canvas.width = 0;
                        this.canvas.height = 0;
                        delete this.canvas;
                    }
                    this._resetZoomLayer();
                }
                if (this.svg) {
                    this.paintedViewportMap["delete"](this.svg);
                    delete this.svg;
                }
                this.loadingIconDiv = document.createElement("div");
                this.loadingIconDiv.className = "loadingIcon";
                div.appendChild(this.loadingIconDiv);
            }
        }, {
            key: "update",
            value: function update(scale, rotation) {
                this.scale = scale || this.scale;
                if (typeof rotation !== "undefined") {
                    this.rotation = rotation;
                }
                var totalRotation = (this.rotation + this.pdfPageRotate) % 360;
                this.viewport = this.viewport.clone({
                    scale: this.scale * _ui_utils.CSS_UNITS,
                    rotation: totalRotation
                });
                if (this.svg) {
                    this.cssTransform(this.svg, true);
                    this.eventBus.dispatch("pagerendered", {
                        source: this,
                        pageNumber: this.id,
                        cssTransform: true
                    });
                    return;
                }
                var isScalingRestricted = false;
                if (this.canvas && this.maxCanvasPixels > 0) {
                    var outputScale = this.outputScale;
                    if ((Math.floor(this.viewport.width) * outputScale.sx | 0) * (Math.floor(this.viewport.height) * outputScale.sy | 0) > this.maxCanvasPixels) {
                        isScalingRestricted = true;
                    }
                }
                if (this.canvas) {
                    if (this.useOnlyCssZoom || this.hasRestrictedScaling && isScalingRestricted) {
                        this.cssTransform(this.canvas, true);
                        this.eventBus.dispatch("pagerendered", {
                            source: this,
                            pageNumber: this.id,
                            cssTransform: true
                        });
                        return;
                    }
                    if (!this.zoomLayer && !this.canvas.hasAttribute("hidden")) {
                        this.zoomLayer = this.canvas.parentNode;
                        this.zoomLayer.style.position = "absolute";
                    }
                }
                if (this.zoomLayer) {
                    this.cssTransform(this.zoomLayer.firstChild);
                }
                this.reset(true, true);
            }
        }, {
            key: "cancelRendering",
            value: function cancelRendering() {
                var keepAnnotations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (this.paintTask) {
                    this.paintTask.cancel();
                    this.paintTask = null;
                }
                this.resume = null;
                if (this.textLayer) {
                    this.textLayer.cancel();
                    this.textLayer = null;
                }
                if (!keepAnnotations && this.annotationLayer) {
                    this.annotationLayer.cancel();
                    this.annotationLayer = null;
                }
            }
        }, {
            key: "cssTransform",
            value: function cssTransform(target) {
                var redrawAnnotations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var width = this.viewport.width;
                var height = this.viewport.height;
                var div = this.div;
                target.style.width = target.parentNode.style.width = div.style.width = Math.floor(width) + "px";
                target.style.height = target.parentNode.style.height = div.style.height = Math.floor(height) + "px";
                var relativeRotation = this.viewport.rotation - this.paintedViewportMap.get(target).rotation;
                var absRotation = Math.abs(relativeRotation);
                var scaleX = 1, scaleY = 1;
                if (absRotation === 90 || absRotation === 270) {
                    scaleX = height / width;
                    scaleY = width / height;
                }
                var cssTransform = "rotate(" + relativeRotation + "deg) " + "scale(" + scaleX + "," + scaleY + ")";
                target.style.transform = cssTransform;
                if (this.textLayer) {
                    var textLayerViewport = this.textLayer.viewport;
                    var textRelativeRotation = this.viewport.rotation - textLayerViewport.rotation;
                    var textAbsRotation = Math.abs(textRelativeRotation);
                    var scale = width / textLayerViewport.width;
                    if (textAbsRotation === 90 || textAbsRotation === 270) {
                        scale = width / textLayerViewport.height;
                    }
                    var textLayerDiv = this.textLayer.textLayerDiv;
                    var transX, transY;
                    switch (textAbsRotation) {
                      case 0:
                        transX = transY = 0;
                        break;

                      case 90:
                        transX = 0;
                        transY = "-" + textLayerDiv.style.height;
                        break;

                      case 180:
                        transX = "-" + textLayerDiv.style.width;
                        transY = "-" + textLayerDiv.style.height;
                        break;

                      case 270:
                        transX = "-" + textLayerDiv.style.width;
                        transY = 0;
                        break;

                      default:
                        console.error("Bad rotation value.");
                        break;
                    }
                    textLayerDiv.style.transform = "rotate(" + textAbsRotation + "deg) " + "scale(" + scale + ", " + scale + ") " + "translate(" + transX + ", " + transY + ")";
                    textLayerDiv.style.transformOrigin = "0% 0%";
                }
                if (redrawAnnotations && this.annotationLayer) {
                    this.annotationLayer.render(this.viewport, "display");
                }
            }
        }, {
            key: "getPagePoint",
            value: function getPagePoint(x, y) {
                return this.viewport.convertToPdfPoint(x, y);
            }
        }, {
            key: "draw",
            value: function draw() {
                var _this = this;
                if (this.renderingState !== _pdf_rendering_queue.RenderingStates.INITIAL) {
                    console.error("Must be in new state before drawing");
                    this.reset();
                }
                if (!this.pdfPage) {
                    this.renderingState = _pdf_rendering_queue.RenderingStates.FINISHED;
                    return Promise.reject(new Error("Page is not loaded"));
                }
                this.renderingState = _pdf_rendering_queue.RenderingStates.RUNNING;
                var pdfPage = this.pdfPage;
                var div = this.div;
                var canvasWrapper = document.createElement("div");
                canvasWrapper.style.width = div.style.width;
                canvasWrapper.style.height = div.style.height;
                canvasWrapper.classList.add("canvasWrapper");
                if (this.annotationLayer && this.annotationLayer.div) {
                    div.insertBefore(canvasWrapper, this.annotationLayer.div);
                } else {
                    div.appendChild(canvasWrapper);
                }
                var textLayer = null;
                if (this.textLayerMode !== _ui_utils.TextLayerMode.DISABLE && this.textLayerFactory) {
                    var textLayerDiv = document.createElement("div");
                    textLayerDiv.className = "textLayer";
                    textLayerDiv.style.width = canvasWrapper.style.width;
                    textLayerDiv.style.height = canvasWrapper.style.height;
                    if (this.annotationLayer && this.annotationLayer.div) {
                        div.insertBefore(textLayerDiv, this.annotationLayer.div);
                    } else {
                        div.appendChild(textLayerDiv);
                    }
                    textLayer = this.textLayerFactory.createTextLayerBuilder(textLayerDiv, this.id - 1, this.viewport, this.textLayerMode === _ui_utils.TextLayerMode.ENABLE_ENHANCE);
                }
                this.textLayer = textLayer;
                var renderContinueCallback = null;
                if (this.renderingQueue) {
                    renderContinueCallback = function renderContinueCallback(cont) {
                        if (!_this.renderingQueue.isHighestPriority(_this)) {
                            _this.renderingState = _pdf_rendering_queue.RenderingStates.PAUSED;
                            _this.resume = function() {
                                _this.renderingState = _pdf_rendering_queue.RenderingStates.RUNNING;
                                cont();
                            };
                            return;
                        }
                        cont();
                    };
                }
                var finishPaintTask = function() {
                    var _ref = _asyncToGenerator(_regenerator["default"].mark(function _callee(error) {
                        return _regenerator["default"].wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    if (paintTask === _this.paintTask) {
                                        _this.paintTask = null;
                                    }
                                    if (!(error instanceof _pdfjsLib.RenderingCancelledException)) {
                                        _context.next = 4;
                                        break;
                                    }
                                    _this.error = null;
                                    return _context.abrupt("return");

                                  case 4:
                                    _this.renderingState = _pdf_rendering_queue.RenderingStates.FINISHED;
                                    if (_this.loadingIconDiv) {
                                        div.removeChild(_this.loadingIconDiv);
                                        delete _this.loadingIconDiv;
                                    }
                                    _this._resetZoomLayer(true);
                                    _this.error = error;
                                    _this.stats = pdfPage.stats;
                                    if (_this.onAfterDraw) {
                                        _this.onAfterDraw();
                                    }
                                    _this.eventBus.dispatch("pagerendered", {
                                        source: _this,
                                        pageNumber: _this.id,
                                        cssTransform: false
                                    });
                                    if (!error) {
                                        _context.next = 13;
                                        break;
                                    }
                                    throw error;

                                  case 13:
                                  case "end":
                                    return _context.stop();
                                }
                            }
                        }, _callee);
                    }));
                    return function finishPaintTask(_x) {
                        return _ref.apply(this, arguments);
                    };
                }();
                var paintTask = this.renderer === _ui_utils.RendererType.SVG ? this.paintOnSvg(canvasWrapper) : this.paintOnCanvas(canvasWrapper);
                paintTask.onRenderContinue = renderContinueCallback;
                this.paintTask = paintTask;
                var resultPromise = paintTask.promise.then(function() {
                    return finishPaintTask(null).then(function() {
                        if (textLayer) {
                            var readableStream = pdfPage.streamTextContent({
                                normalizeWhitespace: true
                            });
                            textLayer.setTextContentStream(readableStream);
                            textLayer.render();
                        }
                    });
                }, function(reason) {
                    return finishPaintTask(reason);
                });
                if (this.annotationLayerFactory) {
                    if (!this.annotationLayer) {
                        this.annotationLayer = this.annotationLayerFactory.createAnnotationLayerBuilder(div, pdfPage, this.imageResourcesPath, this.renderInteractiveForms, this.l10n);
                    }
                    this.annotationLayer.render(this.viewport, "display");
                }
                div.setAttribute("data-loaded", true);
                if (this.onBeforeDraw) {
                    this.onBeforeDraw();
                }
                return resultPromise;
            }
        }, {
            key: "paintOnCanvas",
            value: function paintOnCanvas(canvasWrapper) {
                var renderCapability = (0, _pdfjsLib.createPromiseCapability)();
                var result = {
                    promise: renderCapability.promise,
                    onRenderContinue: function onRenderContinue(cont) {
                        cont();
                    },
                    cancel: function cancel() {
                        renderTask.cancel();
                    }
                };
                var viewport = this.viewport;
                var canvas = document.createElement("canvas");
                canvas.id = this.renderingId;
                canvas.setAttribute("hidden", "hidden");
                var isCanvasHidden = true;
                var showCanvas = function showCanvas() {
                    if (isCanvasHidden) {
                        canvas.removeAttribute("hidden");
                        isCanvasHidden = false;
                    }
                };
                canvasWrapper.appendChild(canvas);
                this.canvas = canvas;
                canvas.mozOpaque = true;
                var ctx = canvas.getContext("2d", {
                    alpha: false
                });
                var outputScale = (0, _ui_utils.getOutputScale)(ctx);
                this.outputScale = outputScale;
                if (this.useOnlyCssZoom) {
                    var actualSizeViewport = viewport.clone({
                        scale: _ui_utils.CSS_UNITS
                    });
                    outputScale.sx *= actualSizeViewport.width / viewport.width;
                    outputScale.sy *= actualSizeViewport.height / viewport.height;
                    outputScale.scaled = true;
                }
                if (this.maxCanvasPixels > 0) {
                    var pixelsInViewport = viewport.width * viewport.height;
                    var maxScale = Math.sqrt(this.maxCanvasPixels / pixelsInViewport);
                    if (outputScale.sx > maxScale || outputScale.sy > maxScale) {
                        outputScale.sx = maxScale;
                        outputScale.sy = maxScale;
                        outputScale.scaled = true;
                        this.hasRestrictedScaling = true;
                    } else {
                        this.hasRestrictedScaling = false;
                    }
                }
                var sfx = (0, _ui_utils.approximateFraction)(outputScale.sx);
                var sfy = (0, _ui_utils.approximateFraction)(outputScale.sy);
                canvas.width = (0, _ui_utils.roundToDivide)(viewport.width * outputScale.sx, sfx[0]);
                canvas.height = (0, _ui_utils.roundToDivide)(viewport.height * outputScale.sy, sfy[0]);
                canvas.style.width = (0, _ui_utils.roundToDivide)(viewport.width, sfx[1]) + "px";
                canvas.style.height = (0, _ui_utils.roundToDivide)(viewport.height, sfy[1]) + "px";
                this.paintedViewportMap.set(canvas, viewport);
                var transform = !outputScale.scaled ? null : [ outputScale.sx, 0, 0, outputScale.sy, 0, 0 ];
                var renderContext = {
                    canvasContext: ctx,
                    transform: transform,
                    viewport: this.viewport,
                    enableWebGL: this.enableWebGL,
                    renderInteractiveForms: this.renderInteractiveForms
                };
                var renderTask = this.pdfPage.render(renderContext);
                renderTask.onContinue = function(cont) {
                    showCanvas();
                    if (result.onRenderContinue) {
                        result.onRenderContinue(cont);
                    } else {
                        cont();
                    }
                };
                renderTask.promise.then(function() {
                    showCanvas();
                    renderCapability.resolve(undefined);
                }, function(error) {
                    showCanvas();
                    renderCapability.reject(error);
                });
                return result;
            }
        }, {
            key: "paintOnSvg",
            value: function paintOnSvg(wrapper) {
                var _this2 = this;
                var cancelled = false;
                var ensureNotCancelled = function ensureNotCancelled() {
                    if (cancelled) {
                        throw new _pdfjsLib.RenderingCancelledException("Rendering cancelled, page " + _this2.id, "svg");
                    }
                };
                var pdfPage = this.pdfPage;
                var actualSizeViewport = this.viewport.clone({
                    scale: _ui_utils.CSS_UNITS
                });
                var promise = pdfPage.getOperatorList().then(function(opList) {
                    ensureNotCancelled();
                    var svgGfx = new _pdfjsLib.SVGGraphics(pdfPage.commonObjs, pdfPage.objs);
                    return svgGfx.getSVG(opList, actualSizeViewport).then(function(svg) {
                        ensureNotCancelled();
                        _this2.svg = svg;
                        _this2.paintedViewportMap.set(svg, actualSizeViewport);
                        svg.style.width = wrapper.style.width;
                        svg.style.height = wrapper.style.height;
                        _this2.renderingState = _pdf_rendering_queue.RenderingStates.FINISHED;
                        wrapper.appendChild(svg);
                    });
                });
                return {
                    promise: promise,
                    onRenderContinue: function onRenderContinue(cont) {
                        cont();
                    },
                    cancel: function cancel() {
                        cancelled = true;
                    }
                };
            }
        }, {
            key: "setPageLabel",
            value: function setPageLabel(label) {
                this.pageLabel = typeof label === "string" ? label : null;
                if (this.pageLabel !== null) {
                    this.div.setAttribute("data-page-label", this.pageLabel);
                } else {
                    this.div.removeAttribute("data-page-label");
                }
            }
        }, {
            key: "width",
            get: function get() {
                return this.viewport.width;
            }
        }, {
            key: "height",
            get: function get() {
                return this.viewport.height;
            }
        } ]);
        return PDFPageView;
    }();
    exports.PDFPageView = PDFPageView;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.DefaultTextLayerFactory = exports.TextLayerBuilder = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdfjsLib = __webpack_require__(7);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var EXPAND_DIVS_TIMEOUT = 300;
    var TextLayerBuilder = function() {
        function TextLayerBuilder(_ref) {
            var textLayerDiv = _ref.textLayerDiv, eventBus = _ref.eventBus, pageIndex = _ref.pageIndex, viewport = _ref.viewport, _ref$findController = _ref.findController, findController = _ref$findController === void 0 ? null : _ref$findController, _ref$enhanceTextSelec = _ref.enhanceTextSelection, enhanceTextSelection = _ref$enhanceTextSelec === void 0 ? false : _ref$enhanceTextSelec;
            _classCallCheck(this, TextLayerBuilder);
            this.textLayerDiv = textLayerDiv;
            this.eventBus = eventBus || (0, _ui_utils.getGlobalEventBus)();
            this.textContent = null;
            this.textContentItemsStr = [];
            this.textContentStream = null;
            this.renderingDone = false;
            this.pageIdx = pageIndex;
            this.pageNumber = this.pageIdx + 1;
            this.matches = [];
            this.viewport = viewport;
            this.textDivs = [];
            this.findController = findController;
            this.textLayerRenderTask = null;
            this.enhanceTextSelection = enhanceTextSelection;
            this._onUpdateTextLayerMatches = null;
            this._bindMouse();
        }
        _createClass(TextLayerBuilder, [ {
            key: "_finishRendering",
            value: function _finishRendering() {
                this.renderingDone = true;
                if (!this.enhanceTextSelection) {
                    var endOfContent = document.createElement("div");
                    endOfContent.className = "endOfContent";
                    this.textLayerDiv.appendChild(endOfContent);
                }
                this.eventBus.dispatch("textlayerrendered", {
                    source: this,
                    pageNumber: this.pageNumber,
                    numTextDivs: this.textDivs.length
                });
            }
        }, {
            key: "render",
            value: function render() {
                var _this = this;
                var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                if (!(this.textContent || this.textContentStream) || this.renderingDone) {
                    return;
                }
                this.cancel();
                this.textDivs = [];
                var textLayerFrag = document.createDocumentFragment();
                this.textLayerRenderTask = (0, _pdfjsLib.renderTextLayer)({
                    textContent: this.textContent,
                    textContentStream: this.textContentStream,
                    container: textLayerFrag,
                    viewport: this.viewport,
                    textDivs: this.textDivs,
                    textContentItemsStr: this.textContentItemsStr,
                    timeout: timeout,
                    enhanceTextSelection: this.enhanceTextSelection
                });
                this.textLayerRenderTask.promise.then(function() {
                    _this.textLayerDiv.appendChild(textLayerFrag);
                    _this._finishRendering();
                    _this._updateMatches();
                }, function(reason) {});
                if (!this._onUpdateTextLayerMatches) {
                    this._onUpdateTextLayerMatches = function(evt) {
                        if (evt.pageIndex === _this.pageIdx || evt.pageIndex === -1) {
                            _this._updateMatches();
                        }
                    };
                    this.eventBus.on("updatetextlayermatches", this._onUpdateTextLayerMatches);
                }
            }
        }, {
            key: "cancel",
            value: function cancel() {
                if (this.textLayerRenderTask) {
                    this.textLayerRenderTask.cancel();
                    this.textLayerRenderTask = null;
                }
                if (this._onUpdateTextLayerMatches) {
                    this.eventBus.off("updatetextlayermatches", this._onUpdateTextLayerMatches);
                    this._onUpdateTextLayerMatches = null;
                }
            }
        }, {
            key: "setTextContentStream",
            value: function setTextContentStream(readableStream) {
                this.cancel();
                this.textContentStream = readableStream;
            }
        }, {
            key: "setTextContent",
            value: function setTextContent(textContent) {
                this.cancel();
                this.textContent = textContent;
            }
        }, {
            key: "_convertMatches",
            value: function _convertMatches(matches, matchesLength) {
                if (!matches) {
                    return [];
                }
                var findController = this.findController, textContentItemsStr = this.textContentItemsStr;
                var i = 0, iIndex = 0;
                var end = textContentItemsStr.length - 1;
                var queryLen = findController.state.query.length;
                var result = [];
                for (var m = 0, mm = matches.length; m < mm; m++) {
                    var matchIdx = matches[m];
                    while (i !== end && matchIdx >= iIndex + textContentItemsStr[i].length) {
                        iIndex += textContentItemsStr[i].length;
                        i++;
                    }
                    if (i === textContentItemsStr.length) {
                        console.error("Could not find a matching mapping");
                    }
                    var match = {
                        begin: {
                            divIdx: i,
                            offset: matchIdx - iIndex
                        }
                    };
                    if (matchesLength) {
                        matchIdx += matchesLength[m];
                    } else {
                        matchIdx += queryLen;
                    }
                    while (i !== end && matchIdx > iIndex + textContentItemsStr[i].length) {
                        iIndex += textContentItemsStr[i].length;
                        i++;
                    }
                    match.end = {
                        divIdx: i,
                        offset: matchIdx - iIndex
                    };
                    result.push(match);
                }
                return result;
            }
        }, {
            key: "_renderMatches",
            value: function _renderMatches(matches) {
                if (matches.length === 0) {
                    return;
                }
                var findController = this.findController, pageIdx = this.pageIdx, textContentItemsStr = this.textContentItemsStr, textDivs = this.textDivs;
                var isSelectedPage = pageIdx === findController.selected.pageIdx;
                var selectedMatchIdx = findController.selected.matchIdx;
                var highlightAll = findController.state.highlightAll;
                var prevEnd = null;
                var infinity = {
                    divIdx: -1,
                    offset: undefined
                };
                function beginText(begin, className) {
                    var divIdx = begin.divIdx;
                    textDivs[divIdx].textContent = "";
                    appendTextToDiv(divIdx, 0, begin.offset, className);
                }
                function appendTextToDiv(divIdx, fromOffset, toOffset, className) {
                    var div = textDivs[divIdx];
                    var content = textContentItemsStr[divIdx].substring(fromOffset, toOffset);
                    var node = document.createTextNode(content);
                    if (className) {
                        var span = document.createElement("span");
                        span.className = className;
                        span.appendChild(node);
                        div.appendChild(span);
                        return;
                    }
                    div.appendChild(node);
                }
                var i0 = selectedMatchIdx, i1 = i0 + 1;
                if (highlightAll) {
                    i0 = 0;
                    i1 = matches.length;
                } else if (!isSelectedPage) {
                    return;
                }
                for (var i = i0; i < i1; i++) {
                    var match = matches[i];
                    var begin = match.begin;
                    var end = match.end;
                    var isSelected = isSelectedPage && i === selectedMatchIdx;
                    var highlightSuffix = isSelected ? " selected" : "";
                    if (isSelected) {
                        findController.scrollMatchIntoView({
                            element: textDivs[begin.divIdx],
                            pageIndex: pageIdx,
                            matchIndex: selectedMatchIdx
                        });
                    }
                    if (!prevEnd || begin.divIdx !== prevEnd.divIdx) {
                        if (prevEnd !== null) {
                            appendTextToDiv(prevEnd.divIdx, prevEnd.offset, infinity.offset);
                        }
                        beginText(begin);
                    } else {
                        appendTextToDiv(prevEnd.divIdx, prevEnd.offset, begin.offset);
                    }
                    if (begin.divIdx === end.divIdx) {
                        appendTextToDiv(begin.divIdx, begin.offset, end.offset, "highlight" + highlightSuffix);
                    } else {
                        appendTextToDiv(begin.divIdx, begin.offset, infinity.offset, "highlight begin" + highlightSuffix);
                        for (var n0 = begin.divIdx + 1, n1 = end.divIdx; n0 < n1; n0++) {
                            textDivs[n0].className = "highlight middle" + highlightSuffix;
                        }
                        beginText(end, "highlight end" + highlightSuffix);
                    }
                    prevEnd = end;
                }
                if (prevEnd) {
                    appendTextToDiv(prevEnd.divIdx, prevEnd.offset, infinity.offset);
                }
            }
        }, {
            key: "_updateMatches",
            value: function _updateMatches() {
                if (!this.renderingDone) {
                    return;
                }
                var findController = this.findController, matches = this.matches, pageIdx = this.pageIdx, textContentItemsStr = this.textContentItemsStr, textDivs = this.textDivs;
                var clearedUntilDivIdx = -1;
                for (var i = 0, ii = matches.length; i < ii; i++) {
                    var match = matches[i];
                    var begin = Math.max(clearedUntilDivIdx, match.begin.divIdx);
                    for (var n = begin, end = match.end.divIdx; n <= end; n++) {
                        var div = textDivs[n];
                        div.textContent = textContentItemsStr[n];
                        div.className = "";
                    }
                    clearedUntilDivIdx = match.end.divIdx + 1;
                }
                if (!findController || !findController.highlightMatches) {
                    return;
                }
                var pageMatches = findController.pageMatches[pageIdx] || null;
                var pageMatchesLength = findController.pageMatchesLength[pageIdx] || null;
                this.matches = this._convertMatches(pageMatches, pageMatchesLength);
                this._renderMatches(this.matches);
            }
        }, {
            key: "_bindMouse",
            value: function _bindMouse() {
                var _this2 = this;
                var div = this.textLayerDiv;
                var expandDivsTimer = null;
                div.addEventListener("mousedown", function(evt) {
                    if (_this2.enhanceTextSelection && _this2.textLayerRenderTask) {
                        _this2.textLayerRenderTask.expandTextDivs(true);
                        if (expandDivsTimer) {
                            clearTimeout(expandDivsTimer);
                            expandDivsTimer = null;
                        }
                        return;
                    }
                    var end = div.querySelector(".endOfContent");
                    if (!end) {
                        return;
                    }
                    var adjustTop = evt.target !== div;
                    adjustTop = adjustTop && window.getComputedStyle(end).getPropertyValue("-moz-user-select") !== "none";
                    if (adjustTop) {
                        var divBounds = div.getBoundingClientRect();
                        var r = Math.max(0, (evt.pageY - divBounds.top) / divBounds.height);
                        end.style.top = (r * 100).toFixed(2) + "%";
                    }
                    end.classList.add("active");
                });
                div.addEventListener("mouseup", function() {
                    if (_this2.enhanceTextSelection && _this2.textLayerRenderTask) {
                        expandDivsTimer = setTimeout(function() {
                            if (_this2.textLayerRenderTask) {
                                _this2.textLayerRenderTask.expandTextDivs(false);
                            }
                            expandDivsTimer = null;
                        }, EXPAND_DIVS_TIMEOUT);
                        return;
                    }
                    var end = div.querySelector(".endOfContent");
                    if (!end) {
                        return;
                    }
                    end.style.top = "";
                    end.classList.remove("active");
                });
            }
        } ]);
        return TextLayerBuilder;
    }();
    exports.TextLayerBuilder = TextLayerBuilder;
    var DefaultTextLayerFactory = function() {
        function DefaultTextLayerFactory() {
            _classCallCheck(this, DefaultTextLayerFactory);
        }
        _createClass(DefaultTextLayerFactory, [ {
            key: "createTextLayerBuilder",
            value: function createTextLayerBuilder(textLayerDiv, pageIndex, viewport) {
                var enhanceTextSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                return new TextLayerBuilder({
                    textLayerDiv: textLayerDiv,
                    pageIndex: pageIndex,
                    viewport: viewport,
                    enhanceTextSelection: enhanceTextSelection
                });
            }
        } ]);
        return DefaultTextLayerFactory;
    }();
    exports.DefaultTextLayerFactory = DefaultTextLayerFactory;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.SecondaryToolbar = void 0;
    var _ui_utils = __webpack_require__(5);
    var _pdf_cursor_tools = __webpack_require__(9);
    var _pdf_single_page_viewer = __webpack_require__(33);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var SecondaryToolbar = function() {
        function SecondaryToolbar(options, mainContainer, eventBus) {
            var _this = this;
            _classCallCheck(this, SecondaryToolbar);
            this.toolbar = options.toolbar;
            this.toggleButton = options.toggleButton;
            this.toolbarButtonContainer = options.toolbarButtonContainer;
            this.buttons = [ {
                element: options.presentationModeButton,
                eventName: "presentationmode",
                close: true
            }, {
                element: options.openFileButton,
                eventName: "openfile",
                close: true
            }, {
                element: options.printButton,
                eventName: "print",
                close: true
            }, {
                element: options.downloadButton,
                eventName: "download",
                close: true
            }, {
                element: options.viewBookmarkButton,
                eventName: null,
                close: true
            }, {
                element: options.firstPageButton,
                eventName: "firstpage",
                close: true
            }, {
                element: options.lastPageButton,
                eventName: "lastpage",
                close: true
            }, {
                element: options.pageRotateCwButton,
                eventName: "rotatecw",
                close: false
            }, {
                element: options.pageRotateCcwButton,
                eventName: "rotateccw",
                close: false
            }, {
                element: options.cursorSelectToolButton,
                eventName: "switchcursortool",
                eventDetails: {
                    tool: _pdf_cursor_tools.CursorTool.SELECT
                },
                close: true
            }, {
                element: options.cursorHandToolButton,
                eventName: "switchcursortool",
                eventDetails: {
                    tool: _pdf_cursor_tools.CursorTool.HAND
                },
                close: true
            }, {
                element: options.scrollVerticalButton,
                eventName: "switchscrollmode",
                eventDetails: {
                    mode: _ui_utils.ScrollMode.VERTICAL
                },
                close: true
            }, {
                element: options.scrollHorizontalButton,
                eventName: "switchscrollmode",
                eventDetails: {
                    mode: _ui_utils.ScrollMode.HORIZONTAL
                },
                close: true
            }, {
                element: options.scrollWrappedButton,
                eventName: "switchscrollmode",
                eventDetails: {
                    mode: _ui_utils.ScrollMode.WRAPPED
                },
                close: true
            }, {
                element: options.spreadNoneButton,
                eventName: "switchspreadmode",
                eventDetails: {
                    mode: _ui_utils.SpreadMode.NONE
                },
                close: true
            }, {
                element: options.spreadOddButton,
                eventName: "switchspreadmode",
                eventDetails: {
                    mode: _ui_utils.SpreadMode.ODD
                },
                close: true
            }, {
                element: options.spreadEvenButton,
                eventName: "switchspreadmode",
                eventDetails: {
                    mode: _ui_utils.SpreadMode.EVEN
                },
                close: true
            }, {
                element: options.documentPropertiesButton,
                eventName: "documentproperties",
                close: true
            } ];
            this.items = {
                firstPage: options.firstPageButton,
                lastPage: options.lastPageButton,
                pageRotateCw: options.pageRotateCwButton,
                pageRotateCcw: options.pageRotateCcwButton
            };
            this.mainContainer = mainContainer;
            this.eventBus = eventBus;
            this.opened = false;
            this.containerHeight = null;
            this.previousContainerHeight = null;
            this.reset();
            this._bindClickListeners();
            this._bindCursorToolsListener(options);
            this._bindScrollModeListener(options);
            this._bindSpreadModeListener(options);
            this.eventBus.on("resize", this._setMaxHeight.bind(this));
            this.eventBus.on("baseviewerinit", function(evt) {
                if (evt.source instanceof _pdf_single_page_viewer.PDFSinglePageViewer) {
                    _this.toolbarButtonContainer.classList.add("hiddenScrollModeButtons", "hiddenSpreadModeButtons");
                } else {
                    _this.toolbarButtonContainer.classList.remove("hiddenScrollModeButtons", "hiddenSpreadModeButtons");
                }
            });
        }
        _createClass(SecondaryToolbar, [ {
            key: "setPageNumber",
            value: function setPageNumber(pageNumber) {
                this.pageNumber = pageNumber;
                this._updateUIState();
            }
        }, {
            key: "setPagesCount",
            value: function setPagesCount(pagesCount) {
                this.pagesCount = pagesCount;
                this._updateUIState();
            }
        }, {
            key: "reset",
            value: function reset() {
                this.pageNumber = 0;
                this.pagesCount = 0;
                this._updateUIState();
                this.eventBus.dispatch("secondarytoolbarreset", {
                    source: this
                });
            }
        }, {
            key: "_updateUIState",
            value: function _updateUIState() {
                this.items.firstPage.disabled = this.pageNumber <= 1;
                this.items.lastPage.disabled = this.pageNumber >= this.pagesCount;
                this.items.pageRotateCw.disabled = this.pagesCount === 0;
                this.items.pageRotateCcw.disabled = this.pagesCount === 0;
            }
        }, {
            key: "_bindClickListeners",
            value: function _bindClickListeners() {
                var _this2 = this;
                this.toggleButton.addEventListener("click", this.toggle.bind(this));
                var _loop = function _loop(button) {
                    var _this2$buttons$button = _this2.buttons[button], element = _this2$buttons$button.element, eventName = _this2$buttons$button.eventName, close = _this2$buttons$button.close, eventDetails = _this2$buttons$button.eventDetails;
                    element.addEventListener("click", function(evt) {
                        if (eventName !== null) {
                            var details = {
                                source: _this2
                            };
                            for (var property in eventDetails) {
                                details[property] = eventDetails[property];
                            }
                            _this2.eventBus.dispatch(eventName, details);
                        }
                        if (close) {
                            _this2.close();
                        }
                    });
                };
                for (var button in this.buttons) {
                    _loop(button);
                }
            }
        }, {
            key: "_bindCursorToolsListener",
            value: function _bindCursorToolsListener(buttons) {
                this.eventBus.on("cursortoolchanged", function(_ref) {
                    var tool = _ref.tool;
                    buttons.cursorSelectToolButton.classList.toggle("toggled", tool === _pdf_cursor_tools.CursorTool.SELECT);
                    buttons.cursorHandToolButton.classList.toggle("toggled", tool === _pdf_cursor_tools.CursorTool.HAND);
                });
            }
        }, {
            key: "_bindScrollModeListener",
            value: function _bindScrollModeListener(buttons) {
                var _this3 = this;
                function scrollModeChanged(_ref2) {
                    var mode = _ref2.mode;
                    buttons.scrollVerticalButton.classList.toggle("toggled", mode === _ui_utils.ScrollMode.VERTICAL);
                    buttons.scrollHorizontalButton.classList.toggle("toggled", mode === _ui_utils.ScrollMode.HORIZONTAL);
                    buttons.scrollWrappedButton.classList.toggle("toggled", mode === _ui_utils.ScrollMode.WRAPPED);
                    var isScrollModeHorizontal = mode === _ui_utils.ScrollMode.HORIZONTAL;
                    buttons.spreadNoneButton.disabled = isScrollModeHorizontal;
                    buttons.spreadOddButton.disabled = isScrollModeHorizontal;
                    buttons.spreadEvenButton.disabled = isScrollModeHorizontal;
                }
                this.eventBus.on("scrollmodechanged", scrollModeChanged);
                this.eventBus.on("secondarytoolbarreset", function(evt) {
                    if (evt.source === _this3) {
                        scrollModeChanged({
                            mode: _ui_utils.ScrollMode.VERTICAL
                        });
                    }
                });
            }
        }, {
            key: "_bindSpreadModeListener",
            value: function _bindSpreadModeListener(buttons) {
                var _this4 = this;
                function spreadModeChanged(_ref3) {
                    var mode = _ref3.mode;
                    buttons.spreadNoneButton.classList.toggle("toggled", mode === _ui_utils.SpreadMode.NONE);
                    buttons.spreadOddButton.classList.toggle("toggled", mode === _ui_utils.SpreadMode.ODD);
                    buttons.spreadEvenButton.classList.toggle("toggled", mode === _ui_utils.SpreadMode.EVEN);
                }
                this.eventBus.on("spreadmodechanged", spreadModeChanged);
                this.eventBus.on("secondarytoolbarreset", function(evt) {
                    if (evt.source === _this4) {
                        spreadModeChanged({
                            mode: _ui_utils.SpreadMode.NONE
                        });
                    }
                });
            }
        }, {
            key: "open",
            value: function open() {
                if (this.opened) {
                    return;
                }
                this.opened = true;
                this._setMaxHeight();
                this.toggleButton.classList.add("toggled");
                this.toolbar.classList.remove("hidden");
            }
        }, {
            key: "close",
            value: function close() {
                if (!this.opened) {
                    return;
                }
                this.opened = false;
                this.toolbar.classList.add("hidden");
                this.toggleButton.classList.remove("toggled");
            }
        }, {
            key: "toggle",
            value: function toggle() {
                if (this.opened) {
                    this.close();
                } else {
                    this.open();
                }
            }
        }, {
            key: "_setMaxHeight",
            value: function _setMaxHeight() {
                if (!this.opened) {
                    return;
                }
                this.containerHeight = this.mainContainer.clientHeight;
                if (this.containerHeight === this.previousContainerHeight) {
                    return;
                }
                this.toolbarButtonContainer.setAttribute("style", "max-height: " + (this.containerHeight - _ui_utils.SCROLLBAR_PADDING) + "px;");
                this.previousContainerHeight = this.containerHeight;
            }
        }, {
            key: "isOpen",
            get: function get() {
                return this.opened;
            }
        } ]);
        return SecondaryToolbar;
    }();
    exports.SecondaryToolbar = SecondaryToolbar;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFSinglePageViewer = void 0;
    var _base_viewer = __webpack_require__(28);
    var _pdfjsLib = __webpack_require__(7);
    function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _get(target, property, receiver) {
        if (typeof Reflect !== "undefined" && Reflect.get) {
            _get = Reflect.get;
        } else {
            _get = function _get(target, property, receiver) {
                var base = _superPropBase(target, property);
                if (!base) return;
                var desc = Object.getOwnPropertyDescriptor(base, property);
                if (desc.get) {
                    return desc.get.call(receiver);
                }
                return desc.value;
            };
        }
        return _get(target, property, receiver || target);
    }
    function _superPropBase(object, property) {
        while (!Object.prototype.hasOwnProperty.call(object, property)) {
            object = _getPrototypeOf(object);
            if (object === null) break;
        }
        return object;
    }
    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    var PDFSinglePageViewer = function(_BaseViewer) {
        _inherits(PDFSinglePageViewer, _BaseViewer);
        function PDFSinglePageViewer(options) {
            var _this;
            _classCallCheck(this, PDFSinglePageViewer);
            _this = _possibleConstructorReturn(this, _getPrototypeOf(PDFSinglePageViewer).call(this, options));
            _this.eventBus.on("pagesinit", function(evt) {
                _this._ensurePageViewVisible();
            });
            return _this;
        }
        _createClass(PDFSinglePageViewer, [ {
            key: "_resetView",
            value: function _resetView() {
                _get(_getPrototypeOf(PDFSinglePageViewer.prototype), "_resetView", this).call(this);
                this._previousPageNumber = 1;
                this._shadowViewer = document.createDocumentFragment();
                this._updateScrollDown = null;
            }
        }, {
            key: "_ensurePageViewVisible",
            value: function _ensurePageViewVisible() {
                var pageView = this._pages[this._currentPageNumber - 1];
                var previousPageView = this._pages[this._previousPageNumber - 1];
                var viewerNodes = this.viewer.childNodes;
                switch (viewerNodes.length) {
                  case 0:
                    this.viewer.appendChild(pageView.div);
                    break;

                  case 1:
                    if (viewerNodes[0] !== previousPageView.div) {
                        throw new Error("_ensurePageViewVisible: Unexpected previously visible page.");
                    }
                    if (pageView === previousPageView) {
                        break;
                    }
                    this._shadowViewer.appendChild(previousPageView.div);
                    this.viewer.appendChild(pageView.div);
                    this.container.scrollTop = 0;
                    break;

                  default:
                    throw new Error("_ensurePageViewVisible: Only one page should be visible at a time.");
                }
                this._previousPageNumber = this._currentPageNumber;
            }
        }, {
            key: "_scrollUpdate",
            value: function _scrollUpdate() {
                if (this._updateScrollDown) {
                    this._updateScrollDown();
                }
                _get(_getPrototypeOf(PDFSinglePageViewer.prototype), "_scrollUpdate", this).call(this);
            }
        }, {
            key: "_scrollIntoView",
            value: function _scrollIntoView(_ref) {
                var _this2 = this;
                var pageDiv = _ref.pageDiv, _ref$pageSpot = _ref.pageSpot, pageSpot = _ref$pageSpot === void 0 ? null : _ref$pageSpot, _ref$pageNumber = _ref.pageNumber, pageNumber = _ref$pageNumber === void 0 ? null : _ref$pageNumber;
                if (pageNumber) {
                    this._setCurrentPageNumber(pageNumber);
                }
                var scrolledDown = this._currentPageNumber >= this._previousPageNumber;
                this._ensurePageViewVisible();
                this.update();
                _get(_getPrototypeOf(PDFSinglePageViewer.prototype), "_scrollIntoView", this).call(this, {
                    pageDiv: pageDiv,
                    pageSpot: pageSpot,
                    pageNumber: pageNumber
                });
                this._updateScrollDown = function() {
                    _this2.scroll.down = scrolledDown;
                    _this2._updateScrollDown = null;
                };
            }
        }, {
            key: "_getVisiblePages",
            value: function _getVisiblePages() {
                return this._getCurrentVisiblePage();
            }
        }, {
            key: "_updateHelper",
            value: function _updateHelper(visiblePages) {}
        }, {
            key: "_updateScrollMode",
            value: function _updateScrollMode() {}
        }, {
            key: "_updateSpreadMode",
            value: function _updateSpreadMode() {}
        }, {
            key: "_setDocumentViewerElement",
            get: function get() {
                return (0, _pdfjsLib.shadow)(this, "_setDocumentViewerElement", this._shadowViewer);
            }
        }, {
            key: "_isScrollModeHorizontal",
            get: function get() {
                return (0, _pdfjsLib.shadow)(this, "_isScrollModeHorizontal", false);
            }
        } ]);
        return PDFSinglePageViewer;
    }(_base_viewer.BaseViewer);
    exports.PDFSinglePageViewer = PDFSinglePageViewer;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Toolbar = void 0;
    var _ui_utils = __webpack_require__(5);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var PAGE_NUMBER_LOADING_INDICATOR = "visiblePageIsLoading";
    var SCALE_SELECT_CONTAINER_PADDING = 8;
    var SCALE_SELECT_PADDING = 22;
    var Toolbar = function() {
        function Toolbar(options, eventBus) {
            var l10n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ui_utils.NullL10n;
            _classCallCheck(this, Toolbar);
            this.toolbar = options.container;
            this.eventBus = eventBus;
            this.l10n = l10n;
            this.items = options;
            this._wasLocalized = false;
            this.reset();
            this._bindListeners();
        }
        _createClass(Toolbar, [ {
            key: "setPageNumber",
            value: function setPageNumber(pageNumber, pageLabel) {
                this.pageNumber = pageNumber;
                this.pageLabel = pageLabel;
                this._updateUIState(false);
            }
        }, {
            key: "setPagesCount",
            value: function setPagesCount(pagesCount, hasPageLabels) {
                this.pagesCount = pagesCount;
                this.hasPageLabels = hasPageLabels;
                this._updateUIState(true);
            }
        }, {
            key: "setPageScale",
            value: function setPageScale(pageScaleValue, pageScale) {
                this.pageScaleValue = (pageScaleValue || pageScale).toString();
                this.pageScale = pageScale;
                this._updateUIState(false);
            }
        }, {
            key: "reset",
            value: function reset() {
                this.pageNumber = 0;
                this.pageLabel = null;
                this.hasPageLabels = false;
                this.pagesCount = 0;
                this.pageScaleValue = _ui_utils.DEFAULT_SCALE_VALUE;
                this.pageScale = _ui_utils.DEFAULT_SCALE;
                this._updateUIState(true);
            }
        }, {
            key: "_bindListeners",
            value: function _bindListeners() {
                var _this = this;
                var eventBus = this.eventBus, items = this.items;
                var self = this;
                items.previous.addEventListener("click", function() {
                    eventBus.dispatch("previouspage", {
                        source: self
                    });
                });
                items.next.addEventListener("click", function() {
                    eventBus.dispatch("nextpage", {
                        source: self
                    });
                });
                items.zoomIn.addEventListener("click", function() {
                    eventBus.dispatch("zoomin", {
                        source: self
                    });
                });
                items.zoomOut.addEventListener("click", function() {
                    eventBus.dispatch("zoomout", {
                        source: self
                    });
                });
                items.pageNumber.addEventListener("click", function() {
                    this.select();
                });
                items.pageNumber.addEventListener("change", function() {
                    eventBus.dispatch("pagenumberchanged", {
                        source: self,
                        value: this.value
                    });
                });
                items.scaleSelect.addEventListener("change", function() {
                    if (this.value === "custom") {
                        return;
                    }
                    eventBus.dispatch("scalechanged", {
                        source: self,
                        value: this.value
                    });
                });
                items.presentationModeButton.addEventListener("click", function() {
                    eventBus.dispatch("presentationmode", {
                        source: self
                    });
                });
                items.openFile.addEventListener("click", function() {
                    eventBus.dispatch("openfile", {
                        source: self
                    });
                });
                items.print.addEventListener("click", function() {
                    eventBus.dispatch("print", {
                        source: self
                    });
                });
                items.download.addEventListener("click", function() {
                    eventBus.dispatch("download", {
                        source: self
                    });
                });
                items.scaleSelect.oncontextmenu = _ui_utils.noContextMenuHandler;
                eventBus.on("localized", function() {
                    _this._localized();
                });
            }
        }, {
            key: "_localized",
            value: function _localized() {
                this._wasLocalized = true;
                this._adjustScaleWidth();
                this._updateUIState(true);
            }
        }, {
            key: "_updateUIState",
            value: function _updateUIState() {
                var resetNumPages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (!this._wasLocalized) {
                    return;
                }
                var pageNumber = this.pageNumber, pagesCount = this.pagesCount, pageScaleValue = this.pageScaleValue, pageScale = this.pageScale, items = this.items;
                if (resetNumPages) {
                    if (this.hasPageLabels) {
                        items.pageNumber.type = "text";
                    } else {
                        items.pageNumber.type = "number";
                        this.l10n.get("of_pages", {
                            pagesCount: pagesCount
                        }, "of {{pagesCount}}").then(function(msg) {
                            items.numPages.textContent = msg;
                        });
                    }
                    items.pageNumber.max = pagesCount;
                }
                if (this.hasPageLabels) {
                    items.pageNumber.value = this.pageLabel;
                    this.l10n.get("page_of_pages", {
                        pageNumber: pageNumber,
                        pagesCount: pagesCount
                    }, "({{pageNumber}} of {{pagesCount}})").then(function(msg) {
                        items.numPages.textContent = msg;
                    });
                } else {
                    items.pageNumber.value = pageNumber;
                }
                items.previous.disabled = pageNumber <= 1;
                items.next.disabled = pageNumber >= pagesCount;
                items.zoomOut.disabled = pageScale <= _ui_utils.MIN_SCALE;
                items.zoomIn.disabled = pageScale >= _ui_utils.MAX_SCALE;
                var customScale = Math.round(pageScale * 1e4) / 100;
                this.l10n.get("page_scale_percent", {
                    scale: customScale
                }, "{{scale}}%").then(function(msg) {
                    var options = items.scaleSelect.options;
                    var predefinedValueFound = false;
                    for (var i = 0, ii = options.length; i < ii; i++) {
                        var option = options[i];
                        if (option.value !== pageScaleValue) {
                            option.selected = false;
                            continue;
                        }
                        option.selected = true;
                        predefinedValueFound = true;
                    }
                    if (!predefinedValueFound) {
                        items.customScaleOption.textContent = msg;
                        items.customScaleOption.selected = true;
                    }
                });
            }
        }, {
            key: "updateLoadingIndicatorState",
            value: function updateLoadingIndicatorState() {
                var loading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                var pageNumberInput = this.items.pageNumber;
                pageNumberInput.classList.toggle(PAGE_NUMBER_LOADING_INDICATOR, loading);
            }
        }, {
            key: "_adjustScaleWidth",
            value: function _adjustScaleWidth() {
                var container = this.items.scaleSelectContainer;
                var select = this.items.scaleSelect;
                _ui_utils.animationStarted.then(function() {
                    if (container.clientWidth === 0) {
                        container.setAttribute("style", "display: inherit;");
                    }
                    if (container.clientWidth > 0) {
                        select.setAttribute("style", "min-width: inherit;");
                        var width = select.clientWidth + SCALE_SELECT_CONTAINER_PADDING;
                        select.setAttribute("style", "min-width: " + (width + SCALE_SELECT_PADDING) + "px;");
                        container.setAttribute("style", "min-width: " + width + "px; " + "max-width: " + width + "px;");
                    }
                });
            }
        } ]);
        return Toolbar;
    }();
    exports.Toolbar = Toolbar;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ViewHistory = void 0;
    var _regenerator = _interopRequireDefault(__webpack_require__(2));
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _asyncToGenerator(fn) {
        return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var DEFAULT_VIEW_HISTORY_CACHE_SIZE = 20;
    var ViewHistory = function() {
        function ViewHistory(fingerprint) {
            var _this = this;
            var cacheSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_VIEW_HISTORY_CACHE_SIZE;
            _classCallCheck(this, ViewHistory);
            this.fingerprint = fingerprint;
            this.cacheSize = cacheSize;
            this._initializedPromise = this._readFromStorage().then(function(databaseStr) {
                var database = JSON.parse(databaseStr || "{}");
                if (!("files" in database)) {
                    database.files = [];
                } else {
                    while (database.files.length >= _this.cacheSize) {
                        database.files.shift();
                    }
                }
                var index = -1;
                for (var i = 0, length = database.files.length; i < length; i++) {
                    var branch = database.files[i];
                    if (branch.fingerprint === _this.fingerprint) {
                        index = i;
                        break;
                    }
                }
                if (index === -1) {
                    index = database.files.push({
                        fingerprint: _this.fingerprint
                    }) - 1;
                }
                _this.file = database.files[index];
                _this.database = database;
            });
        }
        _createClass(ViewHistory, [ {
            key: "_writeToStorage",
            value: function() {
                var _writeToStorage2 = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                    var databaseStr;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                databaseStr = JSON.stringify(this.database);
                                localStorage.setItem("pdfjs.history", databaseStr);

                              case 2:
                              case "end":
                                return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));
                function _writeToStorage() {
                    return _writeToStorage2.apply(this, arguments);
                }
                return _writeToStorage;
            }()
        }, {
            key: "_readFromStorage",
            value: function() {
                var _readFromStorage2 = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                return _context2.abrupt("return", localStorage.getItem("pdfjs.history"));

                              case 1:
                              case "end":
                                return _context2.stop();
                            }
                        }
                    }, _callee2);
                }));
                function _readFromStorage() {
                    return _readFromStorage2.apply(this, arguments);
                }
                return _readFromStorage;
            }()
        }, {
            key: "set",
            value: function() {
                var _set = _asyncToGenerator(_regenerator["default"].mark(function _callee3(name, val) {
                    return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.next = 2;
                                return this._initializedPromise;

                              case 2:
                                this.file[name] = val;
                                return _context3.abrupt("return", this._writeToStorage());

                              case 4:
                              case "end":
                                return _context3.stop();
                            }
                        }
                    }, _callee3, this);
                }));
                function set(_x, _x2) {
                    return _set.apply(this, arguments);
                }
                return set;
            }()
        }, {
            key: "setMultiple",
            value: function() {
                var _setMultiple = _asyncToGenerator(_regenerator["default"].mark(function _callee4(properties) {
                    var name;
                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                              case 0:
                                _context4.next = 2;
                                return this._initializedPromise;

                              case 2:
                                for (name in properties) {
                                    this.file[name] = properties[name];
                                }
                                return _context4.abrupt("return", this._writeToStorage());

                              case 4:
                              case "end":
                                return _context4.stop();
                            }
                        }
                    }, _callee4, this);
                }));
                function setMultiple(_x3) {
                    return _setMultiple.apply(this, arguments);
                }
                return setMultiple;
            }()
        }, {
            key: "get",
            value: function() {
                var _get = _asyncToGenerator(_regenerator["default"].mark(function _callee5(name, defaultValue) {
                    var val;
                    return _regenerator["default"].wrap(function _callee5$(_context5) {
                        while (1) {
                            switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return this._initializedPromise;

                              case 2:
                                val = this.file[name];
                                return _context5.abrupt("return", val !== undefined ? val : defaultValue);

                              case 4:
                              case "end":
                                return _context5.stop();
                            }
                        }
                    }, _callee5, this);
                }));
                function get(_x4, _x5) {
                    return _get.apply(this, arguments);
                }
                return get;
            }()
        }, {
            key: "getMultiple",
            value: function() {
                var _getMultiple = _asyncToGenerator(_regenerator["default"].mark(function _callee6(properties) {
                    var values, name, val;
                    return _regenerator["default"].wrap(function _callee6$(_context6) {
                        while (1) {
                            switch (_context6.prev = _context6.next) {
                              case 0:
                                _context6.next = 2;
                                return this._initializedPromise;

                              case 2:
                                values = Object.create(null);
                                for (name in properties) {
                                    val = this.file[name];
                                    values[name] = val !== undefined ? val : properties[name];
                                }
                                return _context6.abrupt("return", values);

                              case 5:
                              case "end":
                                return _context6.stop();
                            }
                        }
                    }, _callee6, this);
                }));
                function getMultiple(_x6) {
                    return _getMultiple.apply(this, arguments);
                }
                return getMultiple;
            }()
        } ]);
        return ViewHistory;
    }();
    exports.ViewHistory = ViewHistory;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.GenericCom = void 0;
    var _regenerator = _interopRequireDefault(__webpack_require__(2));
    var _app = __webpack_require__(1);
    var _preferences = __webpack_require__(37);
    var _download_manager = __webpack_require__(38);
    var _genericl10n = __webpack_require__(39);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _asyncToGenerator(fn) {
        return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    var GenericCom = {};
    exports.GenericCom = GenericCom;
    var GenericPreferences = function(_BasePreferences) {
        _inherits(GenericPreferences, _BasePreferences);
        function GenericPreferences() {
            _classCallCheck(this, GenericPreferences);
            return _possibleConstructorReturn(this, _getPrototypeOf(GenericPreferences).apply(this, arguments));
        }
        _createClass(GenericPreferences, [ {
            key: "_writeToStorage",
            value: function() {
                var _writeToStorage2 = _asyncToGenerator(_regenerator["default"].mark(function _callee(prefObj) {
                    return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                localStorage.setItem("pdfjs.preferences", JSON.stringify(prefObj));

                              case 1:
                              case "end":
                                return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                function _writeToStorage(_x) {
                    return _writeToStorage2.apply(this, arguments);
                }
                return _writeToStorage;
            }()
        }, {
            key: "_readFromStorage",
            value: function() {
                var _readFromStorage2 = _asyncToGenerator(_regenerator["default"].mark(function _callee2(prefObj) {
                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                return _context2.abrupt("return", JSON.parse(localStorage.getItem("pdfjs.preferences")));

                              case 1:
                              case "end":
                                return _context2.stop();
                            }
                        }
                    }, _callee2);
                }));
                function _readFromStorage(_x2) {
                    return _readFromStorage2.apply(this, arguments);
                }
                return _readFromStorage;
            }()
        } ]);
        return GenericPreferences;
    }(_preferences.BasePreferences);
    var GenericExternalServices = Object.create(_app.DefaultExternalServices);
    GenericExternalServices.createDownloadManager = function(options) {
        return new _download_manager.DownloadManager(options);
    };
    GenericExternalServices.createPreferences = function() {
        return new GenericPreferences();
    };
    GenericExternalServices.createL10n = function(_ref) {
        var _ref$locale = _ref.locale, locale = _ref$locale === void 0 ? "en-US" : _ref$locale;
        return new _genericl10n.GenericL10n(locale);
    };
    _app.PDFViewerApplication.externalServices = GenericExternalServices;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.BasePreferences = void 0;
    var _regenerator = _interopRequireDefault(__webpack_require__(2));
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _asyncToGenerator(fn) {
        return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var defaultPreferences = null;
    function getDefaultPreferences() {
        if (!defaultPreferences) {
            defaultPreferences = Promise.resolve({
                cursorToolOnLoad: 0,
                defaultZoomValue: "",
                disablePageLabels: false,
                enablePrintAutoRotate: false,
                enableWebGL: false,
                eventBusDispatchToDOM: false,
                externalLinkTarget: 0,
                historyUpdateUrl: false,
                pdfBugEnabled: false,
                renderer: "canvas",
                renderInteractiveForms: false,
                sidebarViewOnLoad: -1,
                scrollModeOnLoad: -1,
                spreadModeOnLoad: -1,
                textLayerMode: 1,
                useOnlyCssZoom: false,
                viewOnLoad: 0,
                disableAutoFetch: false,
                disableFontFace: false,
                disableRange: false,
                disableStream: false
            });
        }
        return defaultPreferences;
    }
    var BasePreferences = function() {
        function BasePreferences() {
            var _this = this;
            _classCallCheck(this, BasePreferences);
            if (this.constructor === BasePreferences) {
                throw new Error("Cannot initialize BasePreferences.");
            }
            this.prefs = null;
            this._initializedPromise = getDefaultPreferences().then(function(defaults) {
                Object.defineProperty(_this, "defaults", {
                    value: Object.freeze(defaults),
                    writable: false,
                    enumerable: true,
                    configurable: false
                });
                _this.prefs = Object.assign(Object.create(null), defaults);
                return _this._readFromStorage(defaults);
            }).then(function(prefs) {
                if (!prefs) {
                    return;
                }
                for (var name in prefs) {
                    var defaultValue = _this.defaults[name], prefValue = prefs[name];
                    if (defaultValue === undefined || _typeof(prefValue) !== _typeof(defaultValue)) {
                        continue;
                    }
                    _this.prefs[name] = prefValue;
                }
            });
        }
        _createClass(BasePreferences, [ {
            key: "_writeToStorage",
            value: function() {
                var _writeToStorage2 = _asyncToGenerator(_regenerator["default"].mark(function _callee(prefObj) {
                    return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                throw new Error("Not implemented: _writeToStorage");

                              case 1:
                              case "end":
                                return _context.stop();
                            }
                        }
                    }, _callee);
                }));
                function _writeToStorage(_x) {
                    return _writeToStorage2.apply(this, arguments);
                }
                return _writeToStorage;
            }()
        }, {
            key: "_readFromStorage",
            value: function() {
                var _readFromStorage2 = _asyncToGenerator(_regenerator["default"].mark(function _callee2(prefObj) {
                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                throw new Error("Not implemented: _readFromStorage");

                              case 1:
                              case "end":
                                return _context2.stop();
                            }
                        }
                    }, _callee2);
                }));
                function _readFromStorage(_x2) {
                    return _readFromStorage2.apply(this, arguments);
                }
                return _readFromStorage;
            }()
        }, {
            key: "reset",
            value: function() {
                var _reset = _asyncToGenerator(_regenerator["default"].mark(function _callee3() {
                    return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.next = 2;
                                return this._initializedPromise;

                              case 2:
                                this.prefs = Object.assign(Object.create(null), this.defaults);
                                return _context3.abrupt("return", this._writeToStorage(this.defaults));

                              case 4:
                              case "end":
                                return _context3.stop();
                            }
                        }
                    }, _callee3, this);
                }));
                function reset() {
                    return _reset.apply(this, arguments);
                }
                return reset;
            }()
        }, {
            key: "set",
            value: function() {
                var _set = _asyncToGenerator(_regenerator["default"].mark(function _callee4(name, value) {
                    var defaultValue, valueType, defaultType;
                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                              case 0:
                                _context4.next = 2;
                                return this._initializedPromise;

                              case 2:
                                defaultValue = this.defaults[name];
                                if (!(defaultValue === undefined)) {
                                    _context4.next = 7;
                                    break;
                                }
                                throw new Error('Set preference: "'.concat(name, '" is undefined.'));

                              case 7:
                                if (!(value === undefined)) {
                                    _context4.next = 9;
                                    break;
                                }
                                throw new Error("Set preference: no value is specified.");

                              case 9:
                                valueType = _typeof(value);
                                defaultType = _typeof(defaultValue);
                                if (!(valueType !== defaultType)) {
                                    _context4.next = 19;
                                    break;
                                }
                                if (!(valueType === "number" && defaultType === "string")) {
                                    _context4.next = 16;
                                    break;
                                }
                                value = value.toString();
                                _context4.next = 17;
                                break;

                              case 16:
                                throw new Error('Set preference: "'.concat(value, '" is a ').concat(valueType, ", ") + "expected a ".concat(defaultType, "."));

                              case 17:
                                _context4.next = 21;
                                break;

                              case 19:
                                if (!(valueType === "number" && !Number.isInteger(value))) {
                                    _context4.next = 21;
                                    break;
                                }
                                throw new Error('Set preference: "'.concat(value, '" must be an integer.'));

                              case 21:
                                this.prefs[name] = value;
                                return _context4.abrupt("return", this._writeToStorage(this.prefs));

                              case 23:
                              case "end":
                                return _context4.stop();
                            }
                        }
                    }, _callee4, this);
                }));
                function set(_x3, _x4) {
                    return _set.apply(this, arguments);
                }
                return set;
            }()
        }, {
            key: "get",
            value: function() {
                var _get = _asyncToGenerator(_regenerator["default"].mark(function _callee5(name) {
                    var defaultValue, prefValue;
                    return _regenerator["default"].wrap(function _callee5$(_context5) {
                        while (1) {
                            switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return this._initializedPromise;

                              case 2:
                                defaultValue = this.defaults[name];
                                if (!(defaultValue === undefined)) {
                                    _context5.next = 7;
                                    break;
                                }
                                throw new Error('Get preference: "'.concat(name, '" is undefined.'));

                              case 7:
                                prefValue = this.prefs[name];
                                if (!(prefValue !== undefined)) {
                                    _context5.next = 10;
                                    break;
                                }
                                return _context5.abrupt("return", prefValue);

                              case 10:
                                return _context5.abrupt("return", defaultValue);

                              case 11:
                              case "end":
                                return _context5.stop();
                            }
                        }
                    }, _callee5, this);
                }));
                function get(_x5) {
                    return _get.apply(this, arguments);
                }
                return get;
            }()
        }, {
            key: "getAll",
            value: function() {
                var _getAll = _asyncToGenerator(_regenerator["default"].mark(function _callee6() {
                    return _regenerator["default"].wrap(function _callee6$(_context6) {
                        while (1) {
                            switch (_context6.prev = _context6.next) {
                              case 0:
                                _context6.next = 2;
                                return this._initializedPromise;

                              case 2:
                                return _context6.abrupt("return", Object.assign(Object.create(null), this.defaults, this.prefs));

                              case 3:
                              case "end":
                                return _context6.stop();
                            }
                        }
                    }, _callee6, this);
                }));
                function getAll() {
                    return _getAll.apply(this, arguments);
                }
                return getAll;
            }()
        } ]);
        return BasePreferences;
    }();
    exports.BasePreferences = BasePreferences;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.DownloadManager = void 0;
    var _pdfjsLib = __webpack_require__(7);
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var DISABLE_CREATE_OBJECT_URL = _pdfjsLib.apiCompatibilityParams.disableCreateObjectURL || false;
    function _download(blobUrl, filename) {
        var a = document.createElement("a");
        if (!a.click) {
            throw new Error('DownloadManager: "a.click()" is not supported.');
        }
        a.href = blobUrl;
        a.target = "_parent";
        if ("download" in a) {
            a.download = filename;
        }
        (document.body || document.documentElement).appendChild(a);
        a.click();
        a.remove();
    }
    var DownloadManager = function() {
        function DownloadManager(_ref) {
            var _ref$disableCreateObj = _ref.disableCreateObjectURL, disableCreateObjectURL = _ref$disableCreateObj === void 0 ? DISABLE_CREATE_OBJECT_URL : _ref$disableCreateObj;
            _classCallCheck(this, DownloadManager);
            this.disableCreateObjectURL = disableCreateObjectURL;
        }
        _createClass(DownloadManager, [ {
            key: "downloadUrl",
            value: function downloadUrl(url, filename) {
                if (!(0, _pdfjsLib.createValidAbsoluteUrl)(url, "http://example.com")) {
                    return;
                }
                _download(url + "#pdfjs.action=download", filename);
            }
        }, {
            key: "downloadData",
            value: function downloadData(data, filename, contentType) {
                if (navigator.msSaveBlob) {
                    return navigator.msSaveBlob(new Blob([ data ], {
                        type: contentType
                    }), filename);
                }
                var blobUrl = (0, _pdfjsLib.createObjectURL)(data, contentType, this.disableCreateObjectURL);
                _download(blobUrl, filename);
            }
        }, {
            key: "download",
            value: function download(blob, url, filename) {
                if (navigator.msSaveBlob) {
                    if (!navigator.msSaveBlob(blob, filename)) {
                        this.downloadUrl(url, filename);
                    }
                    return;
                }
                if (this.disableCreateObjectURL) {
                    this.downloadUrl(url, filename);
                    return;
                }
                var blobUrl = _pdfjsLib.URL.createObjectURL(blob);
                _download(blobUrl, filename);
            }
        } ]);
        return DownloadManager;
    }();
    exports.DownloadManager = DownloadManager;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.GenericL10n = void 0;
    var _regenerator = _interopRequireDefault(__webpack_require__(2));
    __webpack_require__(40);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
            var info = gen[key](arg);
            var value = info.value;
        } catch (error) {
            reject(error);
            return;
        }
        if (info.done) {
            resolve(value);
        } else {
            Promise.resolve(value).then(_next, _throw);
        }
    }
    function _asyncToGenerator(fn) {
        return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
                var gen = fn.apply(self, args);
                function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                }
                function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                }
                _next(undefined);
            });
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var webL10n = document.webL10n;
    var GenericL10n = function() {
        function GenericL10n(lang) {
            _classCallCheck(this, GenericL10n);
            this._lang = lang;
            this._ready = new Promise(function(resolve, reject) {
                webL10n.setLanguage(lang, function() {
                    resolve(webL10n);
                });
            });
        }
        _createClass(GenericL10n, [ {
            key: "getLanguage",
            value: function() {
                var _getLanguage = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                    var l10n;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                _context.next = 2;
                                return this._ready;

                              case 2:
                                l10n = _context.sent;
                                return _context.abrupt("return", l10n.getLanguage());

                              case 4:
                              case "end":
                                return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));
                function getLanguage() {
                    return _getLanguage.apply(this, arguments);
                }
                return getLanguage;
            }()
        }, {
            key: "getDirection",
            value: function() {
                var _getDirection = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                    var l10n;
                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                _context2.next = 2;
                                return this._ready;

                              case 2:
                                l10n = _context2.sent;
                                return _context2.abrupt("return", l10n.getDirection());

                              case 4:
                              case "end":
                                return _context2.stop();
                            }
                        }
                    }, _callee2, this);
                }));
                function getDirection() {
                    return _getDirection.apply(this, arguments);
                }
                return getDirection;
            }()
        }, {
            key: "get",
            value: function() {
                var _get = _asyncToGenerator(_regenerator["default"].mark(function _callee3(property, args, fallback) {
                    var l10n;
                    return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.next = 2;
                                return this._ready;

                              case 2:
                                l10n = _context3.sent;
                                return _context3.abrupt("return", l10n.get(property, args, fallback));

                              case 4:
                              case "end":
                                return _context3.stop();
                            }
                        }
                    }, _callee3, this);
                }));
                function get(_x, _x2, _x3) {
                    return _get.apply(this, arguments);
                }
                return get;
            }()
        }, {
            key: "translate",
            value: function() {
                var _translate = _asyncToGenerator(_regenerator["default"].mark(function _callee4(element) {
                    var l10n;
                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                              case 0:
                                _context4.next = 2;
                                return this._ready;

                              case 2:
                                l10n = _context4.sent;
                                return _context4.abrupt("return", l10n.translate(element));

                              case 4:
                              case "end":
                                return _context4.stop();
                            }
                        }
                    }, _callee4, this);
                }));
                function translate(_x4) {
                    return _translate.apply(this, arguments);
                }
                return translate;
            }()
        } ]);
        return GenericL10n;
    }();
    exports.GenericL10n = GenericL10n;
}, function(module, exports, __webpack_require__) {
    "use strict";
    document.webL10n = function(window, document, undefined) {
        var gL10nData = {};
        var gTextData = "";
        var gTextProp = "textContent";
        var gLanguage = "";
        var gMacros = {};
        var gReadyState = "loading";
        var gAsyncResourceLoading = true;
        function getL10nResourceLinks() {
            return document.querySelectorAll('link[type="application/l10n"]');
        }
        function getL10nDictionary() {
            var script = document.querySelector('script[type="application/l10n"]');
            return script ? JSON.parse(script.innerHTML) : null;
        }
        function getTranslatableChildren(element) {
            return element ? element.querySelectorAll("*[data-l10n-id]") : [];
        }
        function getL10nAttributes(element) {
            if (!element) return {};
            var l10nId = element.getAttribute("data-l10n-id");
            var l10nArgs = element.getAttribute("data-l10n-args");
            var args = {};
            if (l10nArgs) {
                try {
                    args = JSON.parse(l10nArgs);
                } catch (e) {
                    console.warn("could not parse arguments for #" + l10nId);
                }
            }
            return {
                id: l10nId,
                args: args
            };
        }
        function fireL10nReadyEvent(lang) {
            var evtObject = document.createEvent("Event");
            evtObject.initEvent("localized", true, false);
            evtObject.language = lang;
            document.dispatchEvent(evtObject);
        }
        function xhrLoadText(url, onSuccess, onFailure) {
            onSuccess = onSuccess || function _onSuccess(data) {};
            onFailure = onFailure || function _onFailure() {};
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, gAsyncResourceLoading);
            if (xhr.overrideMimeType) {
                xhr.overrideMimeType("text/plain; charset=utf-8");
            }
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200 || xhr.status === 0) {
                        onSuccess(xhr.responseText);
                    } else {
                        onFailure();
                    }
                }
            };
            xhr.onerror = onFailure;
            xhr.ontimeout = onFailure;
            try {
                xhr.send(null);
            } catch (e) {
                onFailure();
            }
        }
        function parseResource(href, lang, successCallback, failureCallback) {
            var baseURL = href.replace(/[^\/]*$/, "") || "./";
            function evalString(text) {
                if (text.lastIndexOf("\\") < 0) return text;
                return text.replace(/\\\\/g, "\\").replace(/\\n/g, "\n").replace(/\\r/g, "\r").replace(/\\t/g, "\t").replace(/\\b/g, "\b").replace(/\\f/g, "\f").replace(/\\{/g, "{").replace(/\\}/g, "}").replace(/\\"/g, '"').replace(/\\'/g, "'");
            }
            function parseProperties(text, parsedPropertiesCallback) {
                var dictionary = {};
                var reBlank = /^\s*|\s*$/;
                var reComment = /^\s*#|^\s*$/;
                var reSection = /^\s*\[(.*)\]\s*$/;
                var reImport = /^\s*@import\s+url\((.*)\)\s*$/i;
                var reSplit = /^([^=\s]*)\s*=\s*(.+)$/;
                function parseRawLines(rawText, extendedSyntax, parsedRawLinesCallback) {
                    var entries = rawText.replace(reBlank, "").split(/[\r\n]+/);
                    var currentLang = "*";
                    var genericLang = lang.split("-", 1)[0];
                    var skipLang = false;
                    var match = "";
                    function nextEntry() {
                        while (true) {
                            if (!entries.length) {
                                parsedRawLinesCallback();
                                return;
                            }
                            var line = entries.shift();
                            if (reComment.test(line)) continue;
                            if (extendedSyntax) {
                                match = reSection.exec(line);
                                if (match) {
                                    currentLang = match[1].toLowerCase();
                                    skipLang = currentLang !== "*" && currentLang !== lang && currentLang !== genericLang;
                                    continue;
                                } else if (skipLang) {
                                    continue;
                                }
                                match = reImport.exec(line);
                                if (match) {
                                    loadImport(baseURL + match[1], nextEntry);
                                    return;
                                }
                            }
                            var tmp = line.match(reSplit);
                            if (tmp && tmp.length == 3) {
                                dictionary[tmp[1]] = evalString(tmp[2]);
                            }
                        }
                    }
                    nextEntry();
                }
                function loadImport(url, callback) {
                    xhrLoadText(url, function(content) {
                        parseRawLines(content, false, callback);
                    }, function() {
                        console.warn(url + " not found.");
                        callback();
                    });
                }
                parseRawLines(text, true, function() {
                    parsedPropertiesCallback(dictionary);
                });
            }
            xhrLoadText(href, function(response) {
                gTextData += response;
                parseProperties(response, function(data) {
                    for (var key in data) {
                        var id, prop, index = key.lastIndexOf(".");
                        if (index > 0) {
                            id = key.substring(0, index);
                            prop = key.substring(index + 1);
                        } else {
                            id = key;
                            prop = gTextProp;
                        }
                        if (!gL10nData[id]) {
                            gL10nData[id] = {};
                        }
                        gL10nData[id][prop] = data[key];
                    }
                    if (successCallback) {
                        successCallback();
                    }
                });
            }, failureCallback);
        }
        function loadLocale(lang, callback) {
            if (lang) {
                lang = lang.toLowerCase();
            }
            callback = callback || function _callback() {};
            clear();
            gLanguage = lang;
            var langLinks = getL10nResourceLinks();
            var langCount = langLinks.length;
            if (langCount === 0) {
                var dict = getL10nDictionary();
                if (dict && dict.locales && dict.default_locale) {
                    console.log("using the embedded JSON directory, early way out");
                    gL10nData = dict.locales[lang];
                    if (!gL10nData) {
                        var defaultLocale = dict.default_locale.toLowerCase();
                        for (var anyCaseLang in dict.locales) {
                            anyCaseLang = anyCaseLang.toLowerCase();
                            if (anyCaseLang === lang) {
                                gL10nData = dict.locales[lang];
                                break;
                            } else if (anyCaseLang === defaultLocale) {
                                gL10nData = dict.locales[defaultLocale];
                            }
                        }
                    }
                    callback();
                } else {
                    console.log("no resource to load, early way out");
                }
                fireL10nReadyEvent(lang);
                gReadyState = "complete";
                return;
            }
            var onResourceLoaded = null;
            var gResourceCount = 0;
            onResourceLoaded = function onResourceLoaded() {
                gResourceCount++;
                if (gResourceCount >= langCount) {
                    callback();
                    fireL10nReadyEvent(lang);
                    gReadyState = "complete";
                }
            };
            function L10nResourceLink(link) {
                var href = link.href;
                this.load = function(lang, callback) {
                    parseResource(href, lang, callback, function() {
                        console.warn(href + " not found.");
                        console.warn('"' + lang + '" resource not found');
                        gLanguage = "";
                        callback();
                    });
                };
            }
            for (var i = 0; i < langCount; i++) {
                var resource = new L10nResourceLink(langLinks[i]);
                resource.load(lang, onResourceLoaded);
            }
        }
        function clear() {
            gL10nData = {};
            gTextData = "";
            gLanguage = "";
        }
        function getPluralRules(lang) {
            var locales2rules = {
                af: 3,
                ak: 4,
                am: 4,
                ar: 1,
                asa: 3,
                az: 0,
                be: 11,
                bem: 3,
                bez: 3,
                bg: 3,
                bh: 4,
                bm: 0,
                bn: 3,
                bo: 0,
                br: 20,
                brx: 3,
                bs: 11,
                ca: 3,
                cgg: 3,
                chr: 3,
                cs: 12,
                cy: 17,
                da: 3,
                de: 3,
                dv: 3,
                dz: 0,
                ee: 3,
                el: 3,
                en: 3,
                eo: 3,
                es: 3,
                et: 3,
                eu: 3,
                fa: 0,
                ff: 5,
                fi: 3,
                fil: 4,
                fo: 3,
                fr: 5,
                fur: 3,
                fy: 3,
                ga: 8,
                gd: 24,
                gl: 3,
                gsw: 3,
                gu: 3,
                guw: 4,
                gv: 23,
                ha: 3,
                haw: 3,
                he: 2,
                hi: 4,
                hr: 11,
                hu: 0,
                id: 0,
                ig: 0,
                ii: 0,
                is: 3,
                it: 3,
                iu: 7,
                ja: 0,
                jmc: 3,
                jv: 0,
                ka: 0,
                kab: 5,
                kaj: 3,
                kcg: 3,
                kde: 0,
                kea: 0,
                kk: 3,
                kl: 3,
                km: 0,
                kn: 0,
                ko: 0,
                ksb: 3,
                ksh: 21,
                ku: 3,
                kw: 7,
                lag: 18,
                lb: 3,
                lg: 3,
                ln: 4,
                lo: 0,
                lt: 10,
                lv: 6,
                mas: 3,
                mg: 4,
                mk: 16,
                ml: 3,
                mn: 3,
                mo: 9,
                mr: 3,
                ms: 0,
                mt: 15,
                my: 0,
                nah: 3,
                naq: 7,
                nb: 3,
                nd: 3,
                ne: 3,
                nl: 3,
                nn: 3,
                no: 3,
                nr: 3,
                nso: 4,
                ny: 3,
                nyn: 3,
                om: 3,
                or: 3,
                pa: 3,
                pap: 3,
                pl: 13,
                ps: 3,
                pt: 3,
                rm: 3,
                ro: 9,
                rof: 3,
                ru: 11,
                rwk: 3,
                sah: 0,
                saq: 3,
                se: 7,
                seh: 3,
                ses: 0,
                sg: 0,
                sh: 11,
                shi: 19,
                sk: 12,
                sl: 14,
                sma: 7,
                smi: 7,
                smj: 7,
                smn: 7,
                sms: 7,
                sn: 3,
                so: 3,
                sq: 3,
                sr: 11,
                ss: 3,
                ssy: 3,
                st: 3,
                sv: 3,
                sw: 3,
                syr: 3,
                ta: 3,
                te: 3,
                teo: 3,
                th: 0,
                ti: 4,
                tig: 3,
                tk: 3,
                tl: 4,
                tn: 3,
                to: 0,
                tr: 0,
                ts: 3,
                tzm: 22,
                uk: 11,
                ur: 3,
                ve: 3,
                vi: 0,
                vun: 3,
                wa: 4,
                wae: 3,
                wo: 0,
                xh: 3,
                xog: 3,
                yo: 0,
                zh: 0,
                zu: 3
            };
            function isIn(n, list) {
                return list.indexOf(n) !== -1;
            }
            function isBetween(n, start, end) {
                return start <= n && n <= end;
            }
            var pluralRules = {
                0: function _(n) {
                    return "other";
                },
                1: function _(n) {
                    if (isBetween(n % 100, 3, 10)) return "few";
                    if (n === 0) return "zero";
                    if (isBetween(n % 100, 11, 99)) return "many";
                    if (n == 2) return "two";
                    if (n == 1) return "one";
                    return "other";
                },
                2: function _(n) {
                    if (n !== 0 && n % 10 === 0) return "many";
                    if (n == 2) return "two";
                    if (n == 1) return "one";
                    return "other";
                },
                3: function _(n) {
                    if (n == 1) return "one";
                    return "other";
                },
                4: function _(n) {
                    if (isBetween(n, 0, 1)) return "one";
                    return "other";
                },
                5: function _(n) {
                    if (isBetween(n, 0, 2) && n != 2) return "one";
                    return "other";
                },
                6: function _(n) {
                    if (n === 0) return "zero";
                    if (n % 10 == 1 && n % 100 != 11) return "one";
                    return "other";
                },
                7: function _(n) {
                    if (n == 2) return "two";
                    if (n == 1) return "one";
                    return "other";
                },
                8: function _(n) {
                    if (isBetween(n, 3, 6)) return "few";
                    if (isBetween(n, 7, 10)) return "many";
                    if (n == 2) return "two";
                    if (n == 1) return "one";
                    return "other";
                },
                9: function _(n) {
                    if (n === 0 || n != 1 && isBetween(n % 100, 1, 19)) return "few";
                    if (n == 1) return "one";
                    return "other";
                },
                10: function _(n) {
                    if (isBetween(n % 10, 2, 9) && !isBetween(n % 100, 11, 19)) return "few";
                    if (n % 10 == 1 && !isBetween(n % 100, 11, 19)) return "one";
                    return "other";
                },
                11: function _(n) {
                    if (isBetween(n % 10, 2, 4) && !isBetween(n % 100, 12, 14)) return "few";
                    if (n % 10 === 0 || isBetween(n % 10, 5, 9) || isBetween(n % 100, 11, 14)) return "many";
                    if (n % 10 == 1 && n % 100 != 11) return "one";
                    return "other";
                },
                12: function _(n) {
                    if (isBetween(n, 2, 4)) return "few";
                    if (n == 1) return "one";
                    return "other";
                },
                13: function _(n) {
                    if (isBetween(n % 10, 2, 4) && !isBetween(n % 100, 12, 14)) return "few";
                    if (n != 1 && isBetween(n % 10, 0, 1) || isBetween(n % 10, 5, 9) || isBetween(n % 100, 12, 14)) return "many";
                    if (n == 1) return "one";
                    return "other";
                },
                14: function _(n) {
                    if (isBetween(n % 100, 3, 4)) return "few";
                    if (n % 100 == 2) return "two";
                    if (n % 100 == 1) return "one";
                    return "other";
                },
                15: function _(n) {
                    if (n === 0 || isBetween(n % 100, 2, 10)) return "few";
                    if (isBetween(n % 100, 11, 19)) return "many";
                    if (n == 1) return "one";
                    return "other";
                },
                16: function _(n) {
                    if (n % 10 == 1 && n != 11) return "one";
                    return "other";
                },
                17: function _(n) {
                    if (n == 3) return "few";
                    if (n === 0) return "zero";
                    if (n == 6) return "many";
                    if (n == 2) return "two";
                    if (n == 1) return "one";
                    return "other";
                },
                18: function _(n) {
                    if (n === 0) return "zero";
                    if (isBetween(n, 0, 2) && n !== 0 && n != 2) return "one";
                    return "other";
                },
                19: function _(n) {
                    if (isBetween(n, 2, 10)) return "few";
                    if (isBetween(n, 0, 1)) return "one";
                    return "other";
                },
                20: function _(n) {
                    if ((isBetween(n % 10, 3, 4) || n % 10 == 9) && !(isBetween(n % 100, 10, 19) || isBetween(n % 100, 70, 79) || isBetween(n % 100, 90, 99))) return "few";
                    if (n % 1e6 === 0 && n !== 0) return "many";
                    if (n % 10 == 2 && !isIn(n % 100, [ 12, 72, 92 ])) return "two";
                    if (n % 10 == 1 && !isIn(n % 100, [ 11, 71, 91 ])) return "one";
                    return "other";
                },
                21: function _(n) {
                    if (n === 0) return "zero";
                    if (n == 1) return "one";
                    return "other";
                },
                22: function _(n) {
                    if (isBetween(n, 0, 1) || isBetween(n, 11, 99)) return "one";
                    return "other";
                },
                23: function _(n) {
                    if (isBetween(n % 10, 1, 2) || n % 20 === 0) return "one";
                    return "other";
                },
                24: function _(n) {
                    if (isBetween(n, 3, 10) || isBetween(n, 13, 19)) return "few";
                    if (isIn(n, [ 2, 12 ])) return "two";
                    if (isIn(n, [ 1, 11 ])) return "one";
                    return "other";
                }
            };
            var index = locales2rules[lang.replace(/-.*$/, "")];
            if (!(index in pluralRules)) {
                console.warn("plural form unknown for [" + lang + "]");
                return function() {
                    return "other";
                };
            }
            return pluralRules[index];
        }
        gMacros.plural = function(str, param, key, prop) {
            var n = parseFloat(param);
            if (isNaN(n)) return str;
            if (prop != gTextProp) return str;
            if (!gMacros._pluralRules) {
                gMacros._pluralRules = getPluralRules(gLanguage);
            }
            var index = "[" + gMacros._pluralRules(n) + "]";
            if (n === 0 && key + "[zero]" in gL10nData) {
                str = gL10nData[key + "[zero]"][prop];
            } else if (n == 1 && key + "[one]" in gL10nData) {
                str = gL10nData[key + "[one]"][prop];
            } else if (n == 2 && key + "[two]" in gL10nData) {
                str = gL10nData[key + "[two]"][prop];
            } else if (key + index in gL10nData) {
                str = gL10nData[key + index][prop];
            } else if (key + "[other]" in gL10nData) {
                str = gL10nData[key + "[other]"][prop];
            }
            return str;
        };
        function getL10nData(key, args, fallback) {
            var data = gL10nData[key];
            if (!data) {
                console.warn("#" + key + " is undefined.");
                if (!fallback) {
                    return null;
                }
                data = fallback;
            }
            var rv = {};
            for (var prop in data) {
                var str = data[prop];
                str = substIndexes(str, args, key, prop);
                str = substArguments(str, args, key);
                rv[prop] = str;
            }
            return rv;
        }
        function substIndexes(str, args, key, prop) {
            var reIndex = /\{\[\s*([a-zA-Z]+)\(([a-zA-Z]+)\)\s*\]\}/;
            var reMatch = reIndex.exec(str);
            if (!reMatch || !reMatch.length) return str;
            var macroName = reMatch[1];
            var paramName = reMatch[2];
            var param;
            if (args && paramName in args) {
                param = args[paramName];
            } else if (paramName in gL10nData) {
                param = gL10nData[paramName];
            }
            if (macroName in gMacros) {
                var macro = gMacros[macroName];
                str = macro(str, param, key, prop);
            }
            return str;
        }
        function substArguments(str, args, key) {
            var reArgs = /\{\{\s*(.+?)\s*\}\}/g;
            return str.replace(reArgs, function(matched_text, arg) {
                if (args && arg in args) {
                    return args[arg];
                }
                if (arg in gL10nData) {
                    return gL10nData[arg];
                }
                console.log("argument {{" + arg + "}} for #" + key + " is undefined.");
                return matched_text;
            });
        }
        function translateElement(element) {
            var l10n = getL10nAttributes(element);
            if (!l10n.id) return;
            var data = getL10nData(l10n.id, l10n.args);
            if (!data) {
                console.warn("#" + l10n.id + " is undefined.");
                return;
            }
            if (data[gTextProp]) {
                if (getChildElementCount(element) === 0) {
                    element[gTextProp] = data[gTextProp];
                } else {
                    var children = element.childNodes;
                    var found = false;
                    for (var i = 0, l = children.length; i < l; i++) {
                        if (children[i].nodeType === 3 && /\S/.test(children[i].nodeValue)) {
                            if (found) {
                                children[i].nodeValue = "";
                            } else {
                                children[i].nodeValue = data[gTextProp];
                                found = true;
                            }
                        }
                    }
                    if (!found) {
                        var textNode = document.createTextNode(data[gTextProp]);
                        element.insertBefore(textNode, element.firstChild);
                    }
                }
                delete data[gTextProp];
            }
            for (var k in data) {
                element[k] = data[k];
            }
        }
        function getChildElementCount(element) {
            if (element.children) {
                return element.children.length;
            }
            if (typeof element.childElementCount !== "undefined") {
                return element.childElementCount;
            }
            var count = 0;
            for (var i = 0; i < element.childNodes.length; i++) {
                count += element.nodeType === 1 ? 1 : 0;
            }
            return count;
        }
        function translateFragment(element) {
            element = element || document.documentElement;
            var children = getTranslatableChildren(element);
            var elementCount = children.length;
            for (var i = 0; i < elementCount; i++) {
                translateElement(children[i]);
            }
            translateElement(element);
        }
        return {
            get: function get(key, args, fallbackString) {
                var index = key.lastIndexOf(".");
                var prop = gTextProp;
                if (index > 0) {
                    prop = key.substring(index + 1);
                    key = key.substring(0, index);
                }
                var fallback;
                if (fallbackString) {
                    fallback = {};
                    fallback[prop] = fallbackString;
                }
                var data = getL10nData(key, args, fallback);
                if (data && prop in data) {
                    return data[prop];
                }
                return "{{" + key + "}}";
            },
            getData: function getData() {
                return gL10nData;
            },
            getText: function getText() {
                return gTextData;
            },
            getLanguage: function getLanguage() {
                return gLanguage;
            },
            setLanguage: function setLanguage(lang, callback) {
                loadLocale(lang, function() {
                    if (callback) callback();
                });
            },
            getDirection: function getDirection() {
                var rtlList = [ "ar", "he", "fa", "ps", "ur" ];
                var shortCode = gLanguage.split("-", 1)[0];
                return rtlList.indexOf(shortCode) >= 0 ? "rtl" : "ltr";
            },
            translate: translateFragment,
            getReadyState: function getReadyState() {
                return gReadyState;
            },
            ready: function ready(callback) {
                if (!callback) {
                    return;
                } else if (gReadyState == "complete" || gReadyState == "interactive") {
                    window.setTimeout(function() {
                        callback();
                    });
                } else if (document.addEventListener) {
                    document.addEventListener("localized", function once() {
                        document.removeEventListener("localized", once);
                        callback();
                    });
                }
            }
        };
    }(window, document);
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PDFPrintService = PDFPrintService;
    var _ui_utils = __webpack_require__(5);
    var _app = __webpack_require__(1);
    var _pdfjsLib = __webpack_require__(7);
    var activeService = null;
    var overlayManager = null;
    function renderPage(activeServiceOnEntry, pdfDocument, pageNumber, size) {
        var scratchCanvas = activeService.scratchCanvas;
        var PRINT_RESOLUTION = 150;
        var PRINT_UNITS = PRINT_RESOLUTION / 72;
        scratchCanvas.width = Math.floor(size.width * PRINT_UNITS);
        scratchCanvas.height = Math.floor(size.height * PRINT_UNITS);
        var width = Math.floor(size.width * _ui_utils.CSS_UNITS) + "px";
        var height = Math.floor(size.height * _ui_utils.CSS_UNITS) + "px";
        var ctx = scratchCanvas.getContext("2d");
        ctx.save();
        ctx.fillStyle = "rgb(255, 255, 255)";
        ctx.fillRect(0, 0, scratchCanvas.width, scratchCanvas.height);
        ctx.restore();
        return pdfDocument.getPage(pageNumber).then(function(pdfPage) {
            var renderContext = {
                canvasContext: ctx,
                transform: [ PRINT_UNITS, 0, 0, PRINT_UNITS, 0, 0 ],
                viewport: pdfPage.getViewport({
                    scale: 1,
                    rotation: size.rotation
                }),
                intent: "print"
            };
            return pdfPage.render(renderContext).promise;
        }).then(function() {
            return {
                width: width,
                height: height
            };
        });
    }
    function PDFPrintService(pdfDocument, pagesOverview, printContainer, l10n) {
        this.pdfDocument = pdfDocument;
        this.pagesOverview = pagesOverview;
        this.printContainer = printContainer;
        this.l10n = l10n || _ui_utils.NullL10n;
        this.disableCreateObjectURL = pdfDocument.loadingParams["disableCreateObjectURL"];
        this.currentPage = -1;
        this.scratchCanvas = document.createElement("canvas");
    }
    PDFPrintService.prototype = {
        layout: function layout() {
            this.throwIfInactive();
            var body = document.querySelector("body");
            body.setAttribute("data-pdfjsprinting", true);
            var hasEqualPageSizes = this.pagesOverview.every(function(size) {
                return size.width === this.pagesOverview[0].width && size.height === this.pagesOverview[0].height;
            }, this);
            if (!hasEqualPageSizes) {
                console.warn("Not all pages have the same size. The printed " + "result may be incorrect!");
            }
            this.pageStyleSheet = document.createElement("style");
            var pageSize = this.pagesOverview[0];
            this.pageStyleSheet.textContent = "@supports ((size:A4) and (size:1pt 1pt)) {" + "@page { size: " + pageSize.width + "pt " + pageSize.height + "pt;}" + "}";
            body.appendChild(this.pageStyleSheet);
        },
        destroy: function destroy() {
            if (activeService !== this) {
                return;
            }
            this.printContainer.textContent = "";
            if (this.pageStyleSheet) {
                this.pageStyleSheet.remove();
                this.pageStyleSheet = null;
            }
            this.scratchCanvas.width = this.scratchCanvas.height = 0;
            this.scratchCanvas = null;
            activeService = null;
            ensureOverlay().then(function() {
                if (overlayManager.active !== "printServiceOverlay") {
                    return;
                }
                overlayManager.close("printServiceOverlay");
            });
        },
        renderPages: function renderPages() {
            var _this = this;
            var pageCount = this.pagesOverview.length;
            var renderNextPage = function renderNextPage(resolve, reject) {
                _this.throwIfInactive();
                if (++_this.currentPage >= pageCount) {
                    renderProgress(pageCount, pageCount, _this.l10n);
                    resolve();
                    return;
                }
                var index = _this.currentPage;
                renderProgress(index, pageCount, _this.l10n);
                renderPage(_this, _this.pdfDocument, index + 1, _this.pagesOverview[index]).then(_this.useRenderedPage.bind(_this)).then(function() {
                    renderNextPage(resolve, reject);
                }, reject);
            };
            return new Promise(renderNextPage);
        },
        useRenderedPage: function useRenderedPage(printItem) {
            this.throwIfInactive();
            var img = document.createElement("img");
            img.style.width = printItem.width;
            img.style.height = printItem.height;
            var scratchCanvas = this.scratchCanvas;
            if ("toBlob" in scratchCanvas && !this.disableCreateObjectURL) {
                scratchCanvas.toBlob(function(blob) {
                    img.src = _pdfjsLib.URL.createObjectURL(blob);
                });
            } else {
                img.src = scratchCanvas.toDataURL();
            }
            var wrapper = document.createElement("div");
            wrapper.appendChild(img);
            this.printContainer.appendChild(wrapper);
            return new Promise(function(resolve, reject) {
                img.onload = resolve;
                img.onerror = reject;
            });
        },
        performPrint: function performPrint() {
            var _this2 = this;
            this.throwIfInactive();
            return new Promise(function(resolve) {
                setTimeout(function() {
                    if (!_this2.active) {
                        resolve();
                        return;
                    }
                    print.call(window);
                    setTimeout(resolve, 20);
                }, 0);
            });
        },
        get active() {
            return this === activeService;
        },
        throwIfInactive: function throwIfInactive() {
            if (!this.active) {
                throw new Error("This print request was cancelled or completed.");
            }
        }
    };
    var print = window.print;
    window.print = function print() {
        if (activeService) {
            console.warn("Ignored window.print() because of a pending print job.");
            return;
        }
        ensureOverlay().then(function() {
            if (activeService) {
                overlayManager.open("printServiceOverlay");
            }
        });
        try {
            dispatchEvent("beforeprint");
        } finally {
            if (!activeService) {
                console.error("Expected print service to be initialized.");
                ensureOverlay().then(function() {
                    if (overlayManager.active === "printServiceOverlay") {
                        overlayManager.close("printServiceOverlay");
                    }
                });
                return;
            }
            var activeServiceOnEntry = activeService;
            activeService.renderPages().then(function() {
                return activeServiceOnEntry.performPrint();
            })["catch"](function() {}).then(function() {
                if (activeServiceOnEntry.active) {
                    abort();
                }
            });
        }
    };
    function dispatchEvent(eventType) {
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent(eventType, false, false, "custom");
        window.dispatchEvent(event);
    }
    function abort() {
        if (activeService) {
            activeService.destroy();
            dispatchEvent("afterprint");
        }
    }
    function renderProgress(index, total, l10n) {
        var progressContainer = document.getElementById("printServiceOverlay");
        var progress = Math.round(100 * index / total);
        var progressBar = progressContainer.querySelector("progress");
        var progressPerc = progressContainer.querySelector(".relative-progress");
        progressBar.value = progress;
        l10n.get("print_progress_percent", {
            progress: progress
        }, progress + "%").then(function(msg) {
            progressPerc.textContent = msg;
        });
    }
    var hasAttachEvent = !!document.attachEvent;
    window.addEventListener("keydown", function(event) {
        if (event.keyCode === 80 && (event.ctrlKey || event.metaKey) && !event.altKey && (!event.shiftKey || window.chrome || window.opera)) {
            window.print();
            if (hasAttachEvent) {
                return;
            }
            event.preventDefault();
            if (event.stopImmediatePropagation) {
                event.stopImmediatePropagation();
            } else {
                event.stopPropagation();
            }
            return;
        }
    }, true);
    if (hasAttachEvent) {
        document.attachEvent("onkeydown", function(event) {
            event = event || window.event;
            if (event.keyCode === 80 && event.ctrlKey) {
                event.keyCode = 0;
                return false;
            }
        });
    }
    if ("onbeforeprint" in window) {
        var stopPropagationIfNeeded = function stopPropagationIfNeeded(event) {
            if (event.detail !== "custom" && event.stopImmediatePropagation) {
                event.stopImmediatePropagation();
            }
        };
        window.addEventListener("beforeprint", stopPropagationIfNeeded);
        window.addEventListener("afterprint", stopPropagationIfNeeded);
    }
    var overlayPromise;
    function ensureOverlay() {
        if (!overlayPromise) {
            overlayManager = _app.PDFViewerApplication.overlayManager;
            if (!overlayManager) {
                throw new Error("The overlay manager has not yet been initialized.");
            }
            overlayPromise = overlayManager.register("printServiceOverlay", document.getElementById("printServiceOverlay"), abort, true);
            document.getElementById("printCancel").onclick = abort;
        }
        return overlayPromise;
    }
    _app.PDFPrintServiceFactory.instance = {
        supportsPrinting: true,
        createPrintService: function createPrintService(pdfDocument, pagesOverview, printContainer, l10n) {
            if (activeService) {
                throw new Error("The print service is created and active.");
            }
            activeService = new PDFPrintService(pdfDocument, pagesOverview, printContainer, l10n);
            return activeService;
        }
    };
} ]);
